{
    "docs": [
        {
            "location": "/", 
            "text": "Reusable property pane controls for the SharePoint Framework solutions\n\n\nThis repository provides developers with a set of reusable property pane controls that can be used in their SharePoint Framework (SPFx) solutions.\n\n\nGetting started\n\n\nCheck out how to get started here: \nGetting started\n.\n\n\nControls\n\n\nThe following controls are currently available:\n\n\n\n\nPropertyFieldColorPicker\n (Property pane color picker)\n\n\nPropertyFieldDateTimePicker\n (Property pane date and time selector)\n\n\nPropertyFieldListPicker\n (Property pane list selector)\n\n\nPropertyFieldPeoplePicker\n (Property pane people / group selector)\n\n\nPropertyFieldSpinButton\n (Property pane spin button)\n\n\nPropertyFieldTermPicker\n (Property pane managed metadata term selector)\n\n\n\n\nThe following controls are extended controls that show a callout next to the label\n\n\n\n\nPropertyFieldButtonWithCallout\n (Property button field with callout)\n\n\nPropertyFieldCheckboxWithCallout\n (Property checkbox field with callout)\n\n\nPropertyFieldChoiceGroupWithCallout\n (Property choice group field with callout)\n\n\nPropertyFieldDropdownWithCallout\n (Property dropdown field with callout)\n\n\nPropertyFieldLabelWithCallout\n (Property checkbox field with callout)\n\n\nPropertyFieldLinkWithCallout\n (Property checkbox field with callout)\n\n\nPropertyFieldSliderWithCallout\n (Property slider field with callout)\n\n\nPropertyFieldTextWithCallout\n (Property text field with callout)\n\n\nPropertyFieldToggleWithCallout\n (Property toggle field with callout)", 
            "title": "Home"
        }, 
        {
            "location": "/#reusable-property-pane-controls-for-the-sharepoint-framework-solutions", 
            "text": "This repository provides developers with a set of reusable property pane controls that can be used in their SharePoint Framework (SPFx) solutions.", 
            "title": "Reusable property pane controls for the SharePoint Framework solutions"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Check out how to get started here:  Getting started .", 
            "title": "Getting started"
        }, 
        {
            "location": "/#controls", 
            "text": "The following controls are currently available:   PropertyFieldColorPicker  (Property pane color picker)  PropertyFieldDateTimePicker  (Property pane date and time selector)  PropertyFieldListPicker  (Property pane list selector)  PropertyFieldPeoplePicker  (Property pane people / group selector)  PropertyFieldSpinButton  (Property pane spin button)  PropertyFieldTermPicker  (Property pane managed metadata term selector)   The following controls are extended controls that show a callout next to the label   PropertyFieldButtonWithCallout  (Property button field with callout)  PropertyFieldCheckboxWithCallout  (Property checkbox field with callout)  PropertyFieldChoiceGroupWithCallout  (Property choice group field with callout)  PropertyFieldDropdownWithCallout  (Property dropdown field with callout)  PropertyFieldLabelWithCallout  (Property checkbox field with callout)  PropertyFieldLinkWithCallout  (Property checkbox field with callout)  PropertyFieldSliderWithCallout  (Property slider field with callout)  PropertyFieldTextWithCallout  (Property text field with callout)  PropertyFieldToggleWithCallout  (Property toggle field with callout)", 
            "title": "Controls"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\nInstallation\n\n\nTo get started you have to install the following dependency to your project: \n@pnp/spfx-property-controls\n.\n\n\nEnter the following command to install the dependency to your project:\n\n\nnpm install @pnp/spfx-property-controls --save --save-exact\n\n\n\n\n\nConfiguration\n\n\nOnce the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the \nconfig/config.json\n and adding the following line to the \nlocalizedResources\n property:\n\n\nPropertyControlStrings\n:\n \n./node_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js\n\n\n\n\n\n\nNext Steps\n\n\nOnce you installed the dependency you can start using the controls in your solution. Go to the documentation homepage to get an overview of all the available controls: \nhome\n.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "To get started you have to install the following dependency to your project:  @pnp/spfx-property-controls .  Enter the following command to install the dependency to your project:  npm install @pnp/spfx-property-controls --save --save-exact", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#configuration", 
            "text": "Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the  config/config.json  and adding the following line to the  localizedResources  property:  PropertyControlStrings :   ./node_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js", 
            "title": "Configuration"
        }, 
        {
            "location": "/getting-started/#next-steps", 
            "text": "Once you installed the dependency you can start using the controls in your solution. Go to the documentation homepage to get an overview of all the available controls:  home .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/", 
            "text": "PropertyFieldColorPicker control\n\n\nThis control generates a color picker that you can use inside the property pane.\n\n\nPropertyFieldColorPicker\n\n\n\n\nPropertyFieldColorPicker color selector\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldColorPicker\n,\n \nPropertyFieldColorPickerStyle\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldColorPicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ncolor\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldColorPicker\n(\ncolor\n,\n \n{\n\n  \nlabel\n:\n \nColor\n,\n\n  \nselectedColor\n: \nthis.properties.color\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ndisabled\n: \nfalse\n,\n\n  \nalphaSliderHidden\n: \nfalse\n,\n\n  \nstyle\n: \nPropertyFieldColorPickerStyle.Full\n,\n\n  \niconName\n:\n \nPrecipitation\n,\n\n  \nkey\n:\n \ncolorFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldColorPicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\nselectedColor\n\n\nstring\n\n\nno\n\n\nThe CSS-compatible string to describe the initial color\n\n\n\n\n\n\nalphaSliderHidden\n\n\nboolean\n\n\nno\n\n\nWhen true, the alpha slider control is hidden\n\n\n\n\n\n\nstyle\n\n\nPropertyFieldColorPickerStyle\n\n\nno\n\n\nDetermines how the control is displayed (defaults to inline)\n\n\n\n\n\n\niconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for Inline display (defaults to Color)\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\n\n\nEnum \nPropertyFieldColorPickerStyle\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFull\n\n\nDisplay the full control in the property pane\n\n\n\n\n\n\nInline\n\n\nDisplay the color picker inline", 
            "title": "PropertyFieldColorPicker"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/#propertyfieldcolorpicker-control", 
            "text": "This control generates a color picker that you can use inside the property pane.  PropertyFieldColorPicker   PropertyFieldColorPicker color selector", 
            "title": "PropertyFieldColorPicker control"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldColorPicker ,   PropertyFieldColorPickerStyle   }   from   @pnp/spfx-property-controls/lib/PropertyFieldColorPicker ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   color :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldColorPicker ( color ,   { \n   label :   Color , \n   selectedColor :  this.properties.color , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   disabled :  false , \n   alphaSliderHidden :  false , \n   style :  PropertyFieldColorPickerStyle.Full , \n   iconName :   Precipitation , \n   key :   colorFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/#implementation", 
            "text": "The  PropertyFieldColorPicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    selectedColor  string  no  The CSS-compatible string to describe the initial color    alphaSliderHidden  boolean  no  When true, the alpha slider control is hidden    style  PropertyFieldColorPickerStyle  no  Determines how the control is displayed (defaults to inline)    iconName  string  no  The name of the UI Fabric Font Icon to use for Inline display (defaults to Color)    properties  any  yes  Parent web part properties, this object is use to update the property value.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    key  string  yes  An unique key that indicates the identity of this control.     Enum  PropertyFieldColorPickerStyle     Name  Description      Full  Display the full control in the property pane    Inline  Display the color picker inline", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/", 
            "text": "PropertyFieldDateTimePicker control\n\n\nThis control generates a Date and Time picker field that can be used in the property pane of your SharePoint Framework web parts.\n\n\nThe control can be configured to be date only or date and time.\n\n\nDate only\n\n\n\n\nDate picker\n\n\n\n\nDate and time\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldDateTimePicker\n,\n \nDateConvention\n,\n \nTimeConvention\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nimport\n \n{\n \nIDateTimeFieldValue\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker\n;\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ndatetime\n: \nIDateTimeFieldValue\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldDateTimePicker\n(\ndatetime\n,\n \n{\n\n  \nlabel\n:\n \nSelect the date and time\n,\n\n  \ninitialDate\n: \nthis.properties.datetime\n,\n\n  \ndateConvention\n: \nDateConvention.DateTime\n,\n\n  \ntimeConvention\n: \nTimeConvention.Hours12\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nkey\n:\n \ndateTimeFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldDateTimePicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ninitialData\n\n\nIDateTimeFieldValue\n\n\nyes\n\n\nInitial date and time value of the control.\n\n\n\n\n\n\nformatData\n\n\nfunction\n\n\nno\n\n\nDefines a formatDate function that can override the output value.\n\n\n\n\n\n\ndateConvention\n\n\nDateConvention\n\n\nno\n\n\nDefines the date convention to use. By default this is set to date and time.\n\n\n\n\n\n\ntimeConvention\n\n\nTimeConvention\n\n\nno\n\n\nDefines the time convention to use. By default this is set to 24-hour clock convention.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nInterface \nIDateTimeFieldValue\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nDate\n\n\nyes\n\n\nJavaScript date value.\n\n\n\n\n\n\ndisplayValue\n\n\nstring\n\n\nyes\n\n\nDate value formatted as a string.\n\n\n\n\n\n\n\n\nEnum \nDateConvention\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDateTime\n\n\nShows the date and time picker\n\n\n\n\n\n\nDate\n\n\nShows only the date picker\n\n\n\n\n\n\n\n\nEnum \nTimeConvention\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHours12\n\n\nSpecify the hours in 12-hours (AM / PM) time convention.\n\n\n\n\n\n\nHours24\n\n\nSpecify the hours in 24-hours time convention.", 
            "title": "PropertyFieldDateTimePicker"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/#propertyfielddatetimepicker-control", 
            "text": "This control generates a Date and Time picker field that can be used in the property pane of your SharePoint Framework web parts.  The control can be configured to be date only or date and time.  Date only   Date picker   Date and time", 
            "title": "PropertyFieldDateTimePicker control"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldDateTimePicker ,   DateConvention ,   TimeConvention   }   from   @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ;    Create a new property for your web part, for example:   import   {   IDateTimeFieldValue   }   from   @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ;  export   interface   IPropertyControlsTestWebPartProps   { \n   datetime :  IDateTimeFieldValue ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldDateTimePicker ( datetime ,   { \n   label :   Select the date and time , \n   initialDate :  this.properties.datetime , \n   dateConvention :  DateConvention.DateTime , \n   timeConvention :  TimeConvention.Hours12 , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   key :   dateTimeFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/#implementation", 
            "text": "The  PropertyFieldDateTimePicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    initialData  IDateTimeFieldValue  yes  Initial date and time value of the control.    formatData  function  no  Defines a formatDate function that can override the output value.    dateConvention  DateConvention  no  Defines the date convention to use. By default this is set to date and time.    timeConvention  TimeConvention  no  Defines the time convention to use. By default this is set to 24-hour clock convention.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Interface  IDateTimeFieldValue     Property  Type  Required  Description      value  Date  yes  JavaScript date value.    displayValue  string  yes  Date value formatted as a string.     Enum  DateConvention     Name  Description      DateTime  Shows the date and time picker    Date  Shows only the date picker     Enum  TimeConvention     Name  Description      Hours12  Specify the hours in 12-hours (AM / PM) time convention.    Hours24  Specify the hours in 24-hours time convention.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/", 
            "text": "PropertyFieldListPicker control\n\n\nThis control generates a list picker field that can be used in the property pane of your SharePoint Framework web parts.\n\n\nThe control can be configured as a single or multi-selection list picker:\n\n\nSingle list picker\n\n\n\n\nMulti list picker\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldListPicker\n,\n \nPropertyFieldListPickerOrderBy\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldListPicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nlists\n: \nstring\n \n|\n \nstring\n[];\n \n// Stores the list ID(s)\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldListPicker\n(\nsingleList\n,\n \n{\n\n  \nlabel\n:\n \nSelect a list\n,\n\n  \nselectedList\n: \nthis.properties.lists\n,\n\n  \nincludeHidden\n: \nfalse\n,\n\n  \norderBy\n: \nPropertyFieldListPickerOrderBy.Title\n,\n\n  \ndisabled\n: \nfalse\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged.bind\n(\nthis\n),\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ncontext\n: \nthis.context\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nkey\n:\n \nlistPickerFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldListPicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ncontext\n\n\nWebPartContext\n\n\nyes\n\n\nContext of the current web part.\n\n\n\n\n\n\nselectedList\n\n\nstring OR string[]\n\n\nno\n\n\nInitial selected list set of the control.\n\n\n\n\n\n\nbaseTemplate\n\n\nnumber\n\n\nno\n\n\nBaseTemplate ID of the lists or libaries you want to return.\n\n\n\n\n\n\nincludeHidden\n\n\nboolean\n\n\nno\n\n\nSpecify if you want to include hidden lists in the list picker. By default this is set to \ntrue\n.\n\n\n\n\n\n\norderBy\n\n\nPropertyFieldListPickerOrderBy\n\n\nno\n\n\nSpecify the property on which you want to order the retrieve set of lists.\n\n\n\n\n\n\nmultiSelect\n\n\nboolean\n\n\nno\n\n\nSpecify if you want to have a single or multi-list picker. By default this is set to \nfalse\n (single list picker).\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nEnum \nPropertyFieldListPickerOrderBy\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nId\n\n\nSort by list / library ID\n\n\n\n\n\n\nTitle\n\n\nSort by list / library title", 
            "title": "PropertyFieldListPicker"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/#propertyfieldlistpicker-control", 
            "text": "This control generates a list picker field that can be used in the property pane of your SharePoint Framework web parts.  The control can be configured as a single or multi-selection list picker:  Single list picker   Multi list picker", 
            "title": "PropertyFieldListPicker control"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldListPicker ,   PropertyFieldListPickerOrderBy   }   from   @pnp/spfx-property-controls/lib/PropertyFieldListPicker ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   lists :  string   |   string [];   // Stores the list ID(s)  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldListPicker ( singleList ,   { \n   label :   Select a list , \n   selectedList :  this.properties.lists , \n   includeHidden :  false , \n   orderBy :  PropertyFieldListPickerOrderBy.Title , \n   disabled :  false , \n   onPropertyChange :  this.onPropertyPaneFieldChanged.bind ( this ), \n   properties :  this.properties , \n   context :  this.context , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   key :   listPickerFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/#implementation", 
            "text": "The  PropertyFieldListPicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    context  WebPartContext  yes  Context of the current web part.    selectedList  string OR string[]  no  Initial selected list set of the control.    baseTemplate  number  no  BaseTemplate ID of the lists or libaries you want to return.    includeHidden  boolean  no  Specify if you want to include hidden lists in the list picker. By default this is set to  true .    orderBy  PropertyFieldListPickerOrderBy  no  Specify the property on which you want to order the retrieve set of lists.    multiSelect  boolean  no  Specify if you want to have a single or multi-list picker. By default this is set to  false  (single list picker).    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Enum  PropertyFieldListPickerOrderBy     Name  Description      Id  Sort by list / library ID    Title  Sort by list / library title", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/", 
            "text": "PropertyFieldPeoplePicker control\n\n\nThis control generates a people / group picker that can be used in the property pane of your SharePoint Framework web parts.\n\n\nSearching for persons\n\n\n\n\nSearching for groups\n\n\n\n\nSelected people / groups\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldPeoplePicker\n,\n \nPrincipalType\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nimport\n \n{\n \nIPropertyFieldGroupOrPerson\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker\n;\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \npeople\n: \nIPropertyFieldGroupOrPerson\n[];\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldPeoplePicker\n(\npeople\n,\n \n{\n\n  \nlabel\n:\n \nPropertyFieldPeoplePicker\n,\n\n  \ninitialData\n: \nthis.properties.people\n,\n\n  \nallowDuplicate\n: \nfalse\n,\n\n  \nprincipalType\n:\n \n[\nPrincipalType\n.\nUsers\n,\n \nPrincipalType\n.\nSharePoint\n,\n \nPrincipalType\n.\nSecurity\n],\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \ncontext\n: \nthis.context\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nkey\n:\n \npeopleFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldPeoplePicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ncontext\n\n\nWebPartContext\n\n\nyes\n\n\nContext of the current web part.\n\n\n\n\n\n\ninitialData\n\n\nIPropertyFieldGroupOrPerson[]\n\n\nno\n\n\nIntial data to load in the people picker (optional).\n\n\n\n\n\n\nallowDuplicate\n\n\nboolean\n\n\nno\n\n\nDefines if the People Picker allows to select duplicated users (optional).\n\n\n\n\n\n\nprincipalType\n\n\nPrincipalType[]\n\n\nno\n\n\nDefine which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nInterface \nIPropertyFieldGroupOrPerson\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\nno\n\n\nThe ID of the group\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nno\n\n\nGroup description\n\n\n\n\n\n\nfullName\n\n\nstring\n\n\nyes\n\n\nUsers' full name or group display name\n\n\n\n\n\n\nlogin\n\n\nstring\n\n\nyes\n\n\nUsers' login or group provider name (when security group) or group account name (when SharePoint group).\n\n\n\n\n\n\nemail\n\n\nstring\n\n\nno\n\n\nUsers' email\n\n\n\n\n\n\njobTitle\n\n\nstring\n\n\nno\n\n\nUsers' job title\n\n\n\n\n\n\ninitials\n\n\nstring\n\n\nno\n\n\nUsers' initials\n\n\n\n\n\n\nimageUrl\n\n\nstring\n\n\nno\n\n\nUsers' profile image URL\n\n\n\n\n\n\n\n\nEnum \nPrincipalType\n\n\nThe \nPrincipalType\n enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUsers\n\n\nTo specify if you want to retrieve users.\n\n\n\n\n\n\nSecurity\n\n\nTo specify if you want to retrieve security groups.\n\n\n\n\n\n\nSharePoint\n\n\nTo specify if you want to retrieve SharePoint groups.", 
            "title": "PropertyFieldPeoplePicker"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/#propertyfieldpeoplepicker-control", 
            "text": "This control generates a people / group picker that can be used in the property pane of your SharePoint Framework web parts.  Searching for persons   Searching for groups   Selected people / groups", 
            "title": "PropertyFieldPeoplePicker control"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldPeoplePicker ,   PrincipalType   }   from   @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ;    Create a new property for your web part, for example:   import   {   IPropertyFieldGroupOrPerson   }   from   @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ;  export   interface   IPropertyControlsTestWebPartProps   { \n   people :  IPropertyFieldGroupOrPerson [];  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldPeoplePicker ( people ,   { \n   label :   PropertyFieldPeoplePicker , \n   initialData :  this.properties.people , \n   allowDuplicate :  false , \n   principalType :   [ PrincipalType . Users ,   PrincipalType . SharePoint ,   PrincipalType . Security ], \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   context :  this.context , \n   properties :  this.properties , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   key :   peopleFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/#implementation", 
            "text": "The  PropertyFieldPeoplePicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    context  WebPartContext  yes  Context of the current web part.    initialData  IPropertyFieldGroupOrPerson[]  no  Intial data to load in the people picker (optional).    allowDuplicate  boolean  no  Defines if the People Picker allows to select duplicated users (optional).    principalType  PrincipalType[]  no  Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Interface  IPropertyFieldGroupOrPerson     Property  Type  Required  Description      id  string  no  The ID of the group    description  string  no  Group description    fullName  string  yes  Users' full name or group display name    login  string  yes  Users' login or group provider name (when security group) or group account name (when SharePoint group).    email  string  no  Users' email    jobTitle  string  no  Users' job title    initials  string  no  Users' initials    imageUrl  string  no  Users' profile image URL     Enum  PrincipalType  The  PrincipalType  enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups.     Name  Description      Users  To specify if you want to retrieve users.    Security  To specify if you want to retrieve security groups.    SharePoint  To specify if you want to retrieve SharePoint groups.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/", 
            "text": "PropertyFieldSpinButton control\n\n\nThis control generates a spin button which allows the user to incrementally adjust a value in small steps.\n\n\nPropertyFieldSpinButton initial render\n\n\n\n\nPropertyFieldSpinButton increment\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldSpinButton\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldSpinButton\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nspinValue\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldSpinButton\n(\nspinValue\n,\n \n{\n\n  \nlabel\n:\n \nSpin Value\n,\n\n  \ninitialValue\n: \nthis.properties.spinValue\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ndisabled\n: \nfalse\n,\n\n  \nsuffix\n:\n \npx\n,\n\n  \nmin\n: \n0\n,\n\n  \nmax\n: \n5\n,\n\n  \nstep\n: \n0.25\n,\n\n  \ndecimalPlaces\n: \n2\n,\n\n  \nincrementIconName\n:\n \nCalculatorAddition\n,\n\n  \ndecrementIconName\n:\n \nCalculatorSubtract\n,\n\n  \nkey\n:\n \nspinButtonFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldSpinButton\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ninitialValue\n\n\nnumber\n\n\nno\n\n\nInitial number value of the control.\n\n\n\n\n\n\nstep\n\n\nnumber\n\n\nno\n\n\nThe difference between the two adjacent values of the SpinButton (default is 1)\n\n\n\n\n\n\nmin\n\n\nnumber\n\n\nno\n\n\nThe minimum value (no minimum when unspecified)\n\n\n\n\n\n\nmax\n\n\nnumber\n\n\nno\n\n\nThe minimum value (no minimum when unspecified)\n\n\n\n\n\n\nincrementIconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for the increment button (defaults to ChevronUpSmall)\n\n\n\n\n\n\ndecrementIconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for the decrement button (defaults to ChevronDownSmall)\n\n\n\n\n\n\nsuffix\n\n\nstring\n\n\nno\n\n\nAn optional string value to append to the field display\n\n\n\n\n\n\ndecimalPlaces\n\n\nnumber\n\n\nno\n\n\nThe number of decimal places to show/allow (defaults to 0)\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.", 
            "title": "PropertyFieldSpinButton"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/#propertyfieldspinbutton-control", 
            "text": "This control generates a spin button which allows the user to incrementally adjust a value in small steps.  PropertyFieldSpinButton initial render   PropertyFieldSpinButton increment", 
            "title": "PropertyFieldSpinButton control"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldSpinButton   }   from   @pnp/spfx-property-controls/lib/PropertyFieldSpinButton ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   spinValue :  number ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldSpinButton ( spinValue ,   { \n   label :   Spin Value , \n   initialValue :  this.properties.spinValue , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   disabled :  false , \n   suffix :   px , \n   min :  0 , \n   max :  5 , \n   step :  0.25 , \n   decimalPlaces :  2 , \n   incrementIconName :   CalculatorAddition , \n   decrementIconName :   CalculatorSubtract , \n   key :   spinButtonFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/#implementation", 
            "text": "The  PropertyFieldSpinButton  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    initialValue  number  no  Initial number value of the control.    step  number  no  The difference between the two adjacent values of the SpinButton (default is 1)    min  number  no  The minimum value (no minimum when unspecified)    max  number  no  The minimum value (no minimum when unspecified)    incrementIconName  string  no  The name of the UI Fabric Font Icon to use for the increment button (defaults to ChevronUpSmall)    decrementIconName  string  no  The name of the UI Fabric Font Icon to use for the decrement button (defaults to ChevronDownSmall)    suffix  string  no  An optional string value to append to the field display    decimalPlaces  number  no  The number of decimal places to show/allow (defaults to 0)    properties  any  yes  Parent web part properties, this object is use to update the property value.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    key  string  yes  An unique key that indicates the identity of this control.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/", 
            "text": "PropertyFieldTermPicker control\n\n\nThis control generates a term picker that can be used in the property pane of your SharePoint Framework web parts.\n\n\n\n\nDisclaimer\n: This control makes use of the \nProcessQuery\n API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available.\n\n\n\n\nEmpty term picker\n\n\n\n\nSelecting terms\n\n\n\n\nSelected terms in the panel\n\n\n\n\nEmpty term picker\n\n\n\n\nLimit the term set to a specific group or termset\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldTermPicker\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldTermPicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nimport\n \n{\n \nICheckedTerms\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldTermPicker\n;\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nterms\n: \nICheckedTerms\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldTermPicker\n(\nterms\n,\n \n{\n\n  \nlabel\n:\n \nSelect terms\n,\n\n  \npanelTitle\n:\n \nSelect terms\n,\n\n  \ninitialValues\n: \nthis.properties.terms\n,\n\n  \nallowMultipleSelections\n: \ntrue\n,\n\n  \nexcludeSystemGroup\n: \nfalse\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ncontext\n: \nthis.context\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nlimitByGroupNameOrID\n:\n \nPeople\n,\n\n  \nlimitByTermsetNameOrID\n:\n \nLocation\n,\n\n  \nkey\n:\n \ntermSetsPickerFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldTermPicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\npanelTitle\n\n\nstring\n\n\nyes\n\n\nTermSet Picker Panel title.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ncontext\n\n\nWebPartContext\n\n\nyes\n\n\nContext of the current web part.\n\n\n\n\n\n\ninitialValues\n\n\nICheckedTerms\n\n\nno\n\n\nDefines the selected by default term sets.\n\n\n\n\n\n\nallowMultipleSelections\n\n\nboolean\n\n\nno\n\n\nDefines if the user can select only one or many term sets. Default value is false.\n\n\n\n\n\n\nexcludeSystemGroup\n\n\nboolean\n\n\nno\n\n\nIndicator to define if the system Groups are exclude. Default is false.\n\n\n\n\n\n\nlimitByGroupNameOrID\n\n\nstring\n\n\nno\n\n\nLimit the term sets that can be used by the group name or ID.\n\n\n\n\n\n\nlimitByTermsetNameOrID\n\n\nstring\n\n\nno\n\n\nLimit the terms that can be picked by the Term Set name or ID.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nInterface \nICheckedTerms\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\nyes\n\n\nThe ID of the term\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\nThe name of the term\n\n\n\n\n\n\npath\n\n\nstring\n\n\nyes\n\n\nThe path of the term\n\n\n\n\n\n\ntermSet\n\n\nstring\n\n\nyes\n\n\nThe parent term set of the term", 
            "title": "PropertyFieldTermPicker"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/#propertyfieldtermpicker-control", 
            "text": "This control generates a term picker that can be used in the property pane of your SharePoint Framework web parts.   Disclaimer : This control makes use of the  ProcessQuery  API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available.   Empty term picker   Selecting terms   Selected terms in the panel   Empty term picker   Limit the term set to a specific group or termset", 
            "title": "PropertyFieldTermPicker control"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldTermPicker   }   from   @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ;    Create a new property for your web part, for example:   import   {   ICheckedTerms   }   from   @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ;  export   interface   IPropertyControlsTestWebPartProps   { \n   terms :  ICheckedTerms ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldTermPicker ( terms ,   { \n   label :   Select terms , \n   panelTitle :   Select terms , \n   initialValues :  this.properties.terms , \n   allowMultipleSelections :  true , \n   excludeSystemGroup :  false , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   context :  this.context , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   limitByGroupNameOrID :   People , \n   limitByTermsetNameOrID :   Location , \n   key :   termSetsPickerFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/#implementation", 
            "text": "The  PropertyFieldTermPicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    panelTitle  string  yes  TermSet Picker Panel title.    disabled  boolean  no  Specify if the control needs to be disabled.    context  WebPartContext  yes  Context of the current web part.    initialValues  ICheckedTerms  no  Defines the selected by default term sets.    allowMultipleSelections  boolean  no  Defines if the user can select only one or many term sets. Default value is false.    excludeSystemGroup  boolean  no  Indicator to define if the system Groups are exclude. Default is false.    limitByGroupNameOrID  string  no  Limit the term sets that can be used by the group name or ID.    limitByTermsetNameOrID  string  no  Limit the terms that can be picked by the Term Set name or ID.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Interface  ICheckedTerms     Property  Type  Required  Description      id  string  yes  The ID of the term    name  string  yes  The name of the term    path  string  yes  The path of the term    termSet  string  yes  The parent term set of the term", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/", 
            "text": "PropertyFieldButtonWithCallout control\n\n\nThis control generates a button control with a callout.\n\n\nPropertyFieldButtonWithCallout rendering\n\n\n\n\nPropertyFieldButtonWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldButtonWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldButtonWithCallout\n;\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldButtonWithCallout\n(\nfakeProperty\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \nbuttonWithCalloutFieldId\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nTests connection to the database with the parameters listed above\n),\n\n  \ncalloutWidth\n: \n150\n,\n\n  \ntext\n:\n \nTest connection\n,\n\n  \nonClick\n:\n \n()\n \n=\n \n{\n \n/* Code to test db connection */\n \n}\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldButtonWithCallout\n control uses the same implementation as the default \nPropertyPaneButton\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldButtonWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/#propertyfieldbuttonwithcallout-control", 
            "text": "This control generates a button control with a callout.  PropertyFieldButtonWithCallout rendering   PropertyFieldButtonWithCallout callout opened", 
            "title": "PropertyFieldButtonWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldButtonWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldButtonWithCallout ;    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldButtonWithCallout ( fakeProperty ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   buttonWithCalloutFieldId , \n   calloutContent :  React.createElement ( p ,   {},   Tests connection to the database with the parameters listed above ), \n   calloutWidth :  150 , \n   text :   Test connection , \n   onClick :   ()   =   {   /* Code to test db connection */   }  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/#implementation", 
            "text": "The  PropertyFieldButtonWithCallout  control uses the same implementation as the default  PropertyPaneButton  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/", 
            "text": "PropertyFieldCheckboxWithCallout control\n\n\nThis control generates a checkbox control with a callout.\n\n\nPropertyFieldCheckboxWithCallout rendering\n\n\n\n\nPropertyFieldCheckboxWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldCheckboxWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldCheckboxWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ncheckboxWithCalloutValue\n: \nboolean\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldCheckboxWithCallout\n(\ncheckboxWithCalloutValue\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \ncheckboxWithCalloutFieldId\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nCheck the checkbox to accept Application Terms and Conditions\n),\n\n  \ncalloutWidth\n: \n200\n,\n\n  \ntext\n:\n \nAccept terms and conditions\n,\n\n  \nchecked\n: \nthis.properties.checkboxWithCalloutValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldCheckboxWithCallout\n control uses the same implementation as the default \nPropertyPaneCheckbox\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldCheckboxWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/#propertyfieldcheckboxwithcallout-control", 
            "text": "This control generates a checkbox control with a callout.  PropertyFieldCheckboxWithCallout rendering   PropertyFieldCheckboxWithCallout callout opened", 
            "title": "PropertyFieldCheckboxWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldCheckboxWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldCheckboxWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   checkboxWithCalloutValue :  boolean ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldCheckboxWithCallout ( checkboxWithCalloutValue ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   checkboxWithCalloutFieldId , \n   calloutContent :  React.createElement ( p ,   {},   Check the checkbox to accept Application Terms and Conditions ), \n   calloutWidth :  200 , \n   text :   Accept terms and conditions , \n   checked :  this.properties.checkboxWithCalloutValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/#implementation", 
            "text": "The  PropertyFieldCheckboxWithCallout  control uses the same implementation as the default  PropertyPaneCheckbox  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/", 
            "text": "PropertyFieldChoiceGroupWithCallout control\n\n\nThis control generates a choice group control with a callout.\n\n\nPropertyFieldChoiceGroupWithCallout rendering\n\n\n\n\nPropertyFieldChoiceGroupWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldChoiceGroupWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldChoiceGroupWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nchoiceGroupWithCalloutValue\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldChoiceGroupWithCallout\n(\nchoiceGroupWithCalloutValue\n,\n \n{\n\n  \ncalloutContent\n: \nReact.createElement\n(\ndiv\n,\n \n{},\n \nSelect preferrable mobile platform\n),\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Hover\n,\n\n  \nkey\n:\n \nchoiceGroupWithCalloutFieldId\n,\n\n  \nlabel\n:\n \nPreferred mobile platform\n,\n\n  \noptions\n:\n \n[{\n\n    \nkey\n:\n \niOS\n,\n\n    \ntext\n:\n \niOS\n,\n\n    \nchecked\n: \nthis.properties.choiceGroupWithCalloutValue\n \n===\n \niOS\n\n  \n},\n \n{\n\n    \nkey\n:\n \nAndroid\n,\n\n    \ntext\n:\n \nAndroid\n,\n\n    \nchecked\n: \nthis.properties.choiceGroupWithCalloutValue\n \n===\n \nAndroid\n\n  \n},\n \n{\n\n    \nkey\n:\n \nOther\n,\n\n    \ntext\n:\n \nOther\n,\n\n    \nchecked\n: \nthis.properties.choiceGroupWithCalloutValue\n \n===\n \nOther\n\n  \n}]\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldChoiceGroupWithCallout\n control uses the same implementation as the default \nPropertyPaneChoiceGroup\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldChoiceGroupWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/#propertyfieldchoicegroupwithcallout-control", 
            "text": "This control generates a choice group control with a callout.  PropertyFieldChoiceGroupWithCallout rendering   PropertyFieldChoiceGroupWithCallout callout opened", 
            "title": "PropertyFieldChoiceGroupWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldChoiceGroupWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldChoiceGroupWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   choiceGroupWithCalloutValue :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldChoiceGroupWithCallout ( choiceGroupWithCalloutValue ,   { \n   calloutContent :  React.createElement ( div ,   {},   Select preferrable mobile platform ), \n   calloutTrigger :  CalloutTriggers.Hover , \n   key :   choiceGroupWithCalloutFieldId , \n   label :   Preferred mobile platform , \n   options :   [{ \n     key :   iOS , \n     text :   iOS , \n     checked :  this.properties.choiceGroupWithCalloutValue   ===   iOS \n   },   { \n     key :   Android , \n     text :   Android , \n     checked :  this.properties.choiceGroupWithCalloutValue   ===   Android \n   },   { \n     key :   Other , \n     text :   Other , \n     checked :  this.properties.choiceGroupWithCalloutValue   ===   Other \n   }]  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/#implementation", 
            "text": "The  PropertyFieldChoiceGroupWithCallout  control uses the same implementation as the default  PropertyPaneChoiceGroup  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/", 
            "text": "PropertyFieldDropDownWithCallout control\n\n\nThis control generates a dropdown control with a callout.\n\n\nPropertyFieldDropDownWithCallout rendering\n\n\n\n\nPropertyFieldDropDownWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldDropdownWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldDropdownWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ndropdownInfoHeaderKey\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldDropdownWithCallout\n(\ndropdownInfoHeaderKey\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Hover\n,\n\n  \nkey\n:\n \ndropdownInfoHeaderFieldId\n,\n\n  \nlabel\n:\n \nSelect the version\n,\n\n  \noptions\n:\n \n[{\n\n    \nkey\n:\n \nv1.0.0\n,\n\n    \ntext\n:\n \nv1.0.0\n\n  \n},\n \n{\n\n    \nkey\n:\n \nv1.0.1\n,\n\n    \ntext\n:\n \nv1.0.1\n\n  \n},\n \n{\n\n    \nkey\n:\n \nv1.0.2\n,\n\n    \ntext\n:\n \nv1.0.2\n\n  \n},\n \n{\n\n    \nkey\n:\n \nv2.0.0\n,\n\n    \ntext\n:\n \nv2.0.0\n\n  \n}],\n\n  \nselectedKey\n: \nthis.properties.dropdownInfoHeaderKey\n,\n\n  \ncalloutContent\n: \ndropdownInfoHeaderCallountContent\n\n\n})\n\n\n\n\n\n\n\n\nImplement the \ncalloutContent\n function as follows:\n\n\n\n\nprivate\n \ngetDropdownInfoHeaderCalloutContent\n()\n:\n \nJSX\n.\nElement\n \n{\n\n  \nconst\n \nselectedKey\n: \nstring\n \n=\n \nthis\n.\nproperties\n.\ndropdownInfoHeaderKey\n;\n\n\n  \nif\n \n(\nselectedKey\n)\n \n{\n\n    \nreturn\n \nReact\n.\ncreateElement\n(\ndiv\n,\n \n{},\n \n`you have selected \n${\nselectedKey\n}\n`\n);\n\n  \n}\n \nelse\n \n{\n\n    \nreturn\n \nReact\n.\ncreateElement\n(\ndiv\n,\n \n{},\n \n`you haven\nt selected any version`\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldDropDownWithCallout\n control uses the same implementation as the default \nPropertyPaneDropdown\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldDropdownWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/#propertyfielddropdownwithcallout-control", 
            "text": "This control generates a dropdown control with a callout.  PropertyFieldDropDownWithCallout rendering   PropertyFieldDropDownWithCallout callout opened", 
            "title": "PropertyFieldDropDownWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldDropdownWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldDropdownWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   dropdownInfoHeaderKey :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldDropdownWithCallout ( dropdownInfoHeaderKey ,   { \n   calloutTrigger :  CalloutTriggers.Hover , \n   key :   dropdownInfoHeaderFieldId , \n   label :   Select the version , \n   options :   [{ \n     key :   v1.0.0 , \n     text :   v1.0.0 \n   },   { \n     key :   v1.0.1 , \n     text :   v1.0.1 \n   },   { \n     key :   v1.0.2 , \n     text :   v1.0.2 \n   },   { \n     key :   v2.0.0 , \n     text :   v2.0.0 \n   }], \n   selectedKey :  this.properties.dropdownInfoHeaderKey , \n   calloutContent :  dropdownInfoHeaderCallountContent  })    Implement the  calloutContent  function as follows:   private   getDropdownInfoHeaderCalloutContent () :   JSX . Element   { \n   const   selectedKey :  string   =   this . properties . dropdownInfoHeaderKey ; \n\n   if   ( selectedKey )   { \n     return   React . createElement ( div ,   {},   `you have selected  ${ selectedKey } ` ); \n   }   else   { \n     return   React . createElement ( div ,   {},   `you haven t selected any version` ); \n   }  }", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/#implementation", 
            "text": "The  PropertyFieldDropDownWithCallout  control uses the same implementation as the default  PropertyPaneDropdown  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/", 
            "text": "PropertyFieldLabelWithCallout control\n\n\nThis control generates a label control with a callout.\n\n\nPropertyFieldLabelWithCallout rendering\n\n\n\n\nPropertyFieldLabelWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldLabelWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldLabelWithCallout\n;\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldLabelWithCallout\n(\nfakeProp\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \nLabelWithCalloutFieldId\n,\n\n  \ncalloutContent\n:\n \nUse dropdowns below to select list and list\\\ns field to work with\n,\n\n  \ncalloutWidth\n: \n200\n,\n\n  \ntext\n:\n \nSelect List and Field\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldLabelWithCallout\n control uses the same implementation as the default \nPropertyPaneLabel\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldLabelWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/#propertyfieldlabelwithcallout-control", 
            "text": "This control generates a label control with a callout.  PropertyFieldLabelWithCallout rendering   PropertyFieldLabelWithCallout callout opened", 
            "title": "PropertyFieldLabelWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldLabelWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldLabelWithCallout ;    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldLabelWithCallout ( fakeProp ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   LabelWithCalloutFieldId , \n   calloutContent :   Use dropdowns below to select list and list\\ s field to work with , \n   calloutWidth :  200 , \n   text :   Select List and Field  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/#implementation", 
            "text": "The  PropertyFieldLabelWithCallout  control uses the same implementation as the default  PropertyPaneLabel  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/", 
            "text": "PropertyFieldLinkWithCallout control\n\n\nThis control generates a link control with a callout.\n\n\nPropertyFieldLinkWithCallout rendering\n\n\n\n\nPropertyFieldLinkWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldLinkWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldLinkWithCallout\n;\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldLinkWithCallout\n(\nfakeProp\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \nlinkWithCalloutFieldId\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nClick the link to open a new page with Application Terms \n Conditions\n),\n\n  \ncalloutWidth\n: \n200\n,\n\n  \ntext\n:\n \nTerms \n Conditions\n,\n\n  \nhref\n:\n \nhttps://github.com/SharePoint/sp-dev-fx-property-controls\n,\n\n  \ntarget\n:\n \n_blank\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldLinkWithCallout\n control uses the same implementation as the default \nPropertyPaneLink\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldLinkWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/#propertyfieldlinkwithcallout-control", 
            "text": "This control generates a link control with a callout.  PropertyFieldLinkWithCallout rendering   PropertyFieldLinkWithCallout callout opened", 
            "title": "PropertyFieldLinkWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldLinkWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldLinkWithCallout ;    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldLinkWithCallout ( fakeProp ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   linkWithCalloutFieldId , \n   calloutContent :  React.createElement ( p ,   {},   Click the link to open a new page with Application Terms   Conditions ), \n   calloutWidth :  200 , \n   text :   Terms   Conditions , \n   href :   https://github.com/SharePoint/sp-dev-fx-property-controls , \n   target :   _blank  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/#implementation", 
            "text": "The  PropertyFieldLinkWithCallout  control uses the same implementation as the default  PropertyPaneLink  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/", 
            "text": "PropertyFieldSliderWithCallout control\n\n\nThis control generates a slider control with a callout.\n\n\nPropertyFieldSliderWithCallout rendering\n\n\n\n\nPropertyFieldSliderWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldSliderWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldSliderWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nsliderWithCalloutValue\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldSliderWithCallout\n(\nsliderWithCalloutValue\n,\n \n{\n\n  \ncalloutContent\n: \nReact.createElement\n(\ndiv\n,\n \n{},\n \nSelect background image opacity\n),\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \ncalloutWidth\n: \n200\n,\n\n  \nkey\n:\n \nsliderWithCalloutFieldId\n,\n\n  \nlabel\n:\n \nOpacity\n,\n\n  \nmax\n: \n100\n,\n\n  \nmin\n: \n0\n,\n\n  \nstep\n: \n1\n,\n\n  \nshowValue\n: \ntrue\n,\n\n  \nvalue\n: \nthis.properties.sliderWithCalloutValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldSliderWithCallout\n control uses the same implementation as the default \nPropertyPaneSlider\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldSliderWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/#propertyfieldsliderwithcallout-control", 
            "text": "This control generates a slider control with a callout.  PropertyFieldSliderWithCallout rendering   PropertyFieldSliderWithCallout callout opened", 
            "title": "PropertyFieldSliderWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldSliderWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldSliderWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   sliderWithCalloutValue :  number ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldSliderWithCallout ( sliderWithCalloutValue ,   { \n   calloutContent :  React.createElement ( div ,   {},   Select background image opacity ), \n   calloutTrigger :  CalloutTriggers.Click , \n   calloutWidth :  200 , \n   key :   sliderWithCalloutFieldId , \n   label :   Opacity , \n   max :  100 , \n   min :  0 , \n   step :  1 , \n   showValue :  true , \n   value :  this.properties.sliderWithCalloutValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/#implementation", 
            "text": "The  PropertyFieldSliderWithCallout  control uses the same implementation as the default  PropertyPaneSlider  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/", 
            "text": "PropertyFieldTextWithCallout control\n\n\nThis control generates a text field control with a callout.\n\n\nPropertyFieldTextWithCallout rendering\n\n\n\n\nPropertyFieldTextWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldTextWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldTextWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ntextInfoHeaderValue\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldTextWithCallout\n(\ntextInfoHeaderValue\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Hover\n,\n\n  \nkey\n:\n \ntextInfoHeaderFieldId\n,\n\n  \nlabel\n:\n \nDescribe your PnP passion with few words\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\nspan\n,\n \n{},\n \nYou can describe your passion with such words as strong, cosmic, all-absorbing, etc.\n),\n\n  \ncalloutWidth\n: \n150\n,\n\n  \nvalue\n: \nthis.properties.textInfoHeaderValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldTextWithCallout\n control uses the same implementation as the default \nPropertyPaneTextField\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldTextWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/#propertyfieldtextwithcallout-control", 
            "text": "This control generates a text field control with a callout.  PropertyFieldTextWithCallout rendering   PropertyFieldTextWithCallout callout opened", 
            "title": "PropertyFieldTextWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldTextWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldTextWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   textInfoHeaderValue :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldTextWithCallout ( textInfoHeaderValue ,   { \n   calloutTrigger :  CalloutTriggers.Hover , \n   key :   textInfoHeaderFieldId , \n   label :   Describe your PnP passion with few words , \n   calloutContent :  React.createElement ( span ,   {},   You can describe your passion with such words as strong, cosmic, all-absorbing, etc. ), \n   calloutWidth :  150 , \n   value :  this.properties.textInfoHeaderValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/#implementation", 
            "text": "The  PropertyFieldTextWithCallout  control uses the same implementation as the default  PropertyPaneTextField  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/", 
            "text": "PropertyFieldToggleWithCallout control\n\n\nThis control generates a toggle control with a callout.\n\n\nPropertyFieldToggleWithCallout rendering\n\n\n\n\nPropertyFieldToggleWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldToggleWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldToggleWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ntoggleInfoHeaderValue\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldToggleWithCallout\n(\ntoggleInfoHeaderValue\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \ntoggleInfoHeaderFieldId\n,\n\n  \nlabel\n:\n \nTurn on the PnP feature\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nWith this control you can enable or disable the PnP features in your web part\n),\n\n  \nonText\n:\n \nON\n,\n\n  \noffText\n:\n \nOFF\n,\n\n  \nchecked\n: \nthis.properties.toggleInfoHeaderValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldToggleWithCallout\n control uses the same implementation as the default \nPropertyPaneToggle\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldToggleWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/#propertyfieldtogglewithcallout-control", 
            "text": "This control generates a toggle control with a callout.  PropertyFieldToggleWithCallout rendering   PropertyFieldToggleWithCallout callout opened", 
            "title": "PropertyFieldToggleWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldToggleWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldToggleWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   toggleInfoHeaderValue :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldToggleWithCallout ( toggleInfoHeaderValue ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   toggleInfoHeaderFieldId , \n   label :   Turn on the PnP feature , \n   calloutContent :  React.createElement ( p ,   {},   With this control you can enable or disable the PnP features in your web part ), \n   onText :   ON , \n   offText :   OFF , \n   checked :  this.properties.toggleInfoHeaderValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/#implementation", 
            "text": "The  PropertyFieldToggleWithCallout  control uses the same implementation as the default  PropertyPaneToggle  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Releases\n\n\n1.1.1\n\n\n\n\nRemoved operation name from telemetry\n\n\n\n\n1.1.0\n\n\nImprovements\n\n- Telemetry added\n- Term picker control has now the option to scope on term set or group\n\n\nNew controls\n\n- Added the \nPropertyFieldButtonWithCallout\n control\n- Added the \nPropertyFieldCheckboxWithCallout\n control\n- Added the \nPropertyFieldChoiceGroupWithCallout\n control\n- Added the \nPropertyFieldWithCallout\n control\n- Added the \nPropertyLabelWithCallout\n control\n- Added the \nPropertyLinkWithCallout\n control\n- Added the \nPropertySliderWithCallout\n control\n\n\n1.0.0\n\n\n\n\nAdded the \nPropertyFieldDropdownWithCallout\n control\n\n\nAdded the \nPropertyFieldTextWithCallout\n control\n\n\nAdded the \nPropertyFieldToggleWithCallout\n control\n\n\n\n\nBeta 1.0.0-beta.4\n\n\nNew Controls\n\n- Added the \nPropertyFieldColorPicker\n control\n- Added the \nPropertyFieldSpinButton\n control\n\n\nBeta 1.0.0-beta.3\n\n\nImprovement\n\n- Added \nfirstDayOfWeek\n option to the date picker control\n\n\nBeta 1.0.0-beta.2\n\n\n\n\nInitial release", 
            "title": "Release notes"
        }, 
        {
            "location": "/about/release-notes/#releases", 
            "text": "", 
            "title": "Releases"
        }, 
        {
            "location": "/about/release-notes/#111", 
            "text": "Removed operation name from telemetry", 
            "title": "1.1.1"
        }, 
        {
            "location": "/about/release-notes/#110", 
            "text": "Improvements \n- Telemetry added\n- Term picker control has now the option to scope on term set or group  New controls \n- Added the  PropertyFieldButtonWithCallout  control\n- Added the  PropertyFieldCheckboxWithCallout  control\n- Added the  PropertyFieldChoiceGroupWithCallout  control\n- Added the  PropertyFieldWithCallout  control\n- Added the  PropertyLabelWithCallout  control\n- Added the  PropertyLinkWithCallout  control\n- Added the  PropertySliderWithCallout  control", 
            "title": "1.1.0"
        }, 
        {
            "location": "/about/release-notes/#100", 
            "text": "Added the  PropertyFieldDropdownWithCallout  control  Added the  PropertyFieldTextWithCallout  control  Added the  PropertyFieldToggleWithCallout  control", 
            "title": "1.0.0"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta4", 
            "text": "New Controls \n- Added the  PropertyFieldColorPicker  control\n- Added the  PropertyFieldSpinButton  control", 
            "title": "Beta 1.0.0-beta.4"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta3", 
            "text": "Improvement \n- Added  firstDayOfWeek  option to the date picker control", 
            "title": "Beta 1.0.0-beta.3"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta2", 
            "text": "Initial release", 
            "title": "Beta 1.0.0-beta.2"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\n\nMIT License\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}