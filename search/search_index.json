{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reusable property pane controls for the SharePoint Framework solutions This repository provides developers with a set of reusable property pane controls that can be used in their SharePoint Framework (SPFx) solutions. Attention The controls project has a minimal dependency on SharePoint Framework version 1.3.0 . Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version 1.1.0 will get used. Getting started Installation To get started you have to install the following dependency to your project: @pnp/spfx-property-controls . Enter the following command to install the dependency to your project: npm install @pnp/spfx-property-controls --save --save-exact Configuration Note Since v1.7.0 the localized resource path will automatically be configured during the dependency installing. Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: PropertyControlStrings : node_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js Controls The following controls are currently available: PropertyFieldColorPicker (Property pane color picker) PropertyFieldDateTimePicker (Property pane date and time selector) PropertyFieldListPicker (Property pane list selector) PropertyFieldPeoplePicker (Property pane people / group selector) PropertyFieldSpinButton (Property pane spin button) PropertyFieldTermPicker (Property pane managed metadata term selector) PropertyFieldEnterpriseTermPicker (Property pane managed metadata term selector for enterprise scenarios) PropertyFieldMultiSelect (Property pane field which allows multi-value selection) PropertyFieldNumber (Property pane field which allows only number values) PropertyPaneWebPartInformation (Property pane webpart information panel) PropertyPanePropertyEditor (Property pane control that allows raw editing, export and import of webpart properties) The following controls are extended controls that show a callout next to the label PropertyFieldButtonWithCallout (Property button field with callout) PropertyFieldCheckboxWithCallout (Property checkbox field with callout) PropertyFieldChoiceGroupWithCallout (Property choice group field with callout) PropertyFieldDropdownWithCallout (Property dropdown field with callout) PropertyFieldLabelWithCallout (Property checkbox field with callout) PropertyFieldLinkWithCallout (Property checkbox field with callout) PropertyFieldSliderWithCallout (Property slider field with callout) PropertyFieldTextWithCallout (Property text field with callout) PropertyFieldToggleWithCallout (Property toggle field with callout)","title":"Home"},{"location":"#reusable-property-pane-controls-for-the-sharepoint-framework-solutions","text":"This repository provides developers with a set of reusable property pane controls that can be used in their SharePoint Framework (SPFx) solutions. Attention The controls project has a minimal dependency on SharePoint Framework version 1.3.0 . Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version 1.1.0 will get used.","title":"Reusable property pane controls for the SharePoint Framework solutions"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#installation","text":"To get started you have to install the following dependency to your project: @pnp/spfx-property-controls . Enter the following command to install the dependency to your project: npm install @pnp/spfx-property-controls --save --save-exact","title":"Installation"},{"location":"#configuration","text":"Note Since v1.7.0 the localized resource path will automatically be configured during the dependency installing. Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: PropertyControlStrings : node_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js","title":"Configuration"},{"location":"#controls","text":"The following controls are currently available: PropertyFieldColorPicker (Property pane color picker) PropertyFieldDateTimePicker (Property pane date and time selector) PropertyFieldListPicker (Property pane list selector) PropertyFieldPeoplePicker (Property pane people / group selector) PropertyFieldSpinButton (Property pane spin button) PropertyFieldTermPicker (Property pane managed metadata term selector) PropertyFieldEnterpriseTermPicker (Property pane managed metadata term selector for enterprise scenarios) PropertyFieldMultiSelect (Property pane field which allows multi-value selection) PropertyFieldNumber (Property pane field which allows only number values) PropertyPaneWebPartInformation (Property pane webpart information panel) PropertyPanePropertyEditor (Property pane control that allows raw editing, export and import of webpart properties) The following controls are extended controls that show a callout next to the label PropertyFieldButtonWithCallout (Property button field with callout) PropertyFieldCheckboxWithCallout (Property checkbox field with callout) PropertyFieldChoiceGroupWithCallout (Property choice group field with callout) PropertyFieldDropdownWithCallout (Property dropdown field with callout) PropertyFieldLabelWithCallout (Property checkbox field with callout) PropertyFieldLinkWithCallout (Property checkbox field with callout) PropertyFieldSliderWithCallout (Property slider field with callout) PropertyFieldTextWithCallout (Property text field with callout) PropertyFieldToggleWithCallout (Property toggle field with callout)","title":"Controls"},{"location":"beta/","text":"Testing out a beta release All you need to do for testing out a beta release of @pnp/spfx-property-controls is to install the dependency as follows: npm install @pnp/spfx-property-controls@next --save Beta control documentation The control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the dev branch: beta documentation . Next Steps Once you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started: home .","title":"Beta testing"},{"location":"beta/#testing-out-a-beta-release","text":"All you need to do for testing out a beta release of @pnp/spfx-property-controls is to install the dependency as follows: npm install @pnp/spfx-property-controls@next --save","title":"Testing out a beta release"},{"location":"beta/#beta-control-documentation","text":"The control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the dev branch: beta documentation .","title":"Beta control documentation"},{"location":"beta/#next-steps","text":"Once you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started: home .","title":"Next Steps"},{"location":"getting-started/","text":"Getting started Installation To get started you have to install the following dependency to your project: @pnp/spfx-property-controls . Enter the following command to install the dependency to your project: npm install @pnp/spfx-property-controls --save --save-exact Configuration Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: PropertyControlStrings : ./node_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js Next Steps Once you installed the dependency you can start using the controls in your solution. Go to the documentation homepage to get an overview of all the available controls: home .","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"To get started you have to install the following dependency to your project: @pnp/spfx-property-controls . Enter the following command to install the dependency to your project: npm install @pnp/spfx-property-controls --save --save-exact","title":"Installation"},{"location":"getting-started/#configuration","text":"Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: PropertyControlStrings : ./node_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js","title":"Configuration"},{"location":"getting-started/#next-steps","text":"Once you installed the dependency you can start using the controls in your solution. Go to the documentation homepage to get an overview of all the available controls: home .","title":"Next Steps"},{"location":"about/license/","text":"License Copyright (c) Microsoft Corporation. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Releases 1.14.0 New control(s) PropertyFieldEnterpriseTermPicker : New control to load term sets by using @pnp/pnpjs #70 #120 Enhancements PropertyFieldCollectionData : Setting to specify if item creation is enabled/disabled #130 PropertyFieldCollectionData : Setting to specify if item deletion is enabled/disabled #131 PropertyFieldCollectionData : Implemented a property to specify if field editing is enabled/disabled #132 Added Chinese localization #137 PropertyFieldColorPicker : Added a isHidden property #138 PropertyFieldCollectionData : return the item in the custom renderer #147 Added Russian localization #142 Fixes PropertyFieldTermPicker : fix sort order with lowercased terms #133 PropertyFieldCollectionData : Bug with onCustomRender() #135 PropertyFieldCollectionData : Fixed bug with dropdown rendering in IE #136 PropertyFieldNumber : Min/max number check fix + localization label fixes #141 PropertyFieldTermPicker : Fix layout issues in IE11 #143 Contributors Special thanks to our contributors (in alphabetical order): Simon-Pierre Plante , Yannick Plenevaux , Alex Terentiev , Roger Zhang . 1.13.1 Fixes PropertyFieldCollectionData : Fixed issue for loading the control in the local workbench #128 1.13.0 Enhancements Updated the office-ui-fabric-react to the same version as in SPFx 1.7.0 #105 PropertyFieldPeoplePicker : Ability to select only from a specific site #9 PropertyFieldCollectionData : Added support for custom field rendering #122 PropertyFieldCollectionData : Added the functionality to sort the items in the collection #123 Fixes PropertyFieldDateTimePicker : Fix for the hours dropdown not showing values #112 PropertyFieldCollectionData : Issue with debounce validation overriding the inserted values #113 PropertyPaneWebPartInformation : Remove redundant 'Description' label #119 PropertyFieldCodeEditor : Handle initial value after updating properties #121 Contributors Special thanks to our contributor: Erwin van Hunen . 1.12.0 New control(s) PropertyPaneWebPartInformation : New control to show more information about the current web part #108 PropertyPanePropertyEditor : New control that allows you to export/import property pane settings #114 Enhancements Dutch localization added #82 French localization added #84 PropertyFieldCollectionData : Allow the user to specify a deferred validation time for each field #98 PropertyFieldCollectionData : added a onRenderOption option to allow custom option rendering #102 PropertyFieldNumber : Introduced the aria label #104 Hide callout from the controls with callout if no message is provided #107 PropertyFieldListPicker : Add the ability to refresh target site while pane is open #109 Fixes PropertyFieldCollectionData : Fixed catastrophic backtracking regex issue for URL validation #99 Contributors Special thanks to our contributors (in alphabetical order): Paul Bullock , Junle Li , PooLP , Erwin van Hunen . 1.11.0 Enhancements PropertyFieldCollectionData : Show error messages #96 Fixes Fixes based on SonarCloud analysis 1.10.0 Enhancements PropertyFieldPeoplePicker : Security groups come back with EntityType of FormsRole rather then SecGroup #93 PropertyFieldCollectionData : Add the current row's information in the onGetErrorMessage callback #92 Fixes PropertyFieldPeoplePicker : No suggestions returned when using Security Groups, Multi-select and NO duplicates. #90 PropertyFieldTermPicker : Terms which are set as unavailable for tagging are still selectable #94 1.9.0 Enhancements PropertyFieldCollectionData : Added custom validation for string , number , icon , and URL field types #74 PropertyFieldCollectionData : Add an option to specify a default value #86 PropertyFieldCollectionData : override placeholder for the inputs #87 PropertyFieldCollectionData : Hide save button when \"Add and save\" is shown #88 Fixes PropertyFieldMultiSelect : fixed an issue where the control didn't retain the preselected values when dropdown options were provided async #85 PropertyFieldOrder : fixed an issue where items where provided async #81 1.8.0 Enhancements New telemetry approach which allows you to use Application Insights instance #79 PropertyFieldListPicker add optional property for target site #21 Contributors Special thanks to our contributor: Joel Rodrigues . 1.7.0 Enhancements Add npm postinstall script to automatically add the localization config #64 Add a description to the PropertyFieldCollectionData panel #67 Added a font field type for the PropertyFieldCollectionData control #66 Added a URL field type for the PropertyFieldCollectionData control #72 Field validation implemented to enable/disable save buttons in PropertyFieldCollectionData control. Related to previous enhancement. Added properties to the TaxonomyPicker to specify which terms are disabled/not-selectable #69 Fixes PropertyFieldPeoplePicker validation error does not clear as expected #68 1.6.0 New control(s) PropertyFieldCollectionData was added #58 PropertyFieldOrder was added #19 PropertyFieldSwatchColorPicker was added #55 Enhancements Allow the term set to be selectable in the PropertyFieldTermPicker #60 Fixes Fix for PropertyFieldColorPicker Palette Icon alignment issue in IE11 #56 1.5.1 Enhancements Color Pickers optionally return Color Objects #55 Fixes Undefined web part context fixed in the PropertyFieldPeoplePicker #47 Taxonomy service fix for working with term set GUID #48 Added focus intercepting input for Full style #52 1.5.0 Enhancements PropertyFieldListPicker control extended with select all lists option #8 PropertyFieldTermPicker control extended with the ability to search terms by typing in the textbox #11 #42 #44 #45 SPTermStorePickerService has a new interface which contains only the required properties 1.4.2 Enhancements Introduced the onGetErrorMessage property for the PropertyFieldNumber field control ( #36 ) 1.4.1 Enhancements Optimized telemetry so that it only pushes control data Fixes Fixes for issue #30 PropertyFieldPeoplePicker Validation does not work as expected #33 1.4.0 New control(s) PropertyFieldMultiSelect got added PropertyFieldNumber got added Enhancements PropertyFieldTermPicker new introduced property to specify to show or hide the term store name: hideTermStoreName . PropertyFieldTermPicker updated process when terms were unselected based on ID instead of path. 1.3.0 New control(s) PropertyFieldCodeEditor got added Enhancements PropertyFieldTermPicker improved with save and cancel button PropertyFieldTermPicker improved with onClick event on input field 1.2.0 Enhancements Added the option to the people picker to allow you to specify single or multi-selection Fixes People picker accidentally picked the wrong person Improved telemetry with some object checks 1.1.1 Enhancements Removed operation name from telemetry 1.1.0 New control(s) Added the PropertyFieldButtonWithCallout control Added the PropertyFieldCheckboxWithCallout control Added the PropertyFieldChoiceGroupWithCallout control Added the PropertyFieldWithCallout control Added the PropertyLabelWithCallout control Added the PropertyLinkWithCallout control Added the PropertySliderWithCallout control Enhancements Telemetry added Term picker control has now the option to scope on term set or group 1.0.0 New control(s) Added the PropertyFieldDropdownWithCallout control Added the PropertyFieldTextWithCallout control Added the PropertyFieldToggleWithCallout control 1.0.0-beta.3 Enhancements Added firstDayOfWeek option to the date picker control 1.0.0-beta.2 New control(s) Initial release","title":"Release notes"},{"location":"about/release-notes/#releases","text":"","title":"Releases"},{"location":"about/release-notes/#1140","text":"","title":"1.14.0"},{"location":"about/release-notes/#new-controls","text":"PropertyFieldEnterpriseTermPicker : New control to load term sets by using @pnp/pnpjs #70 #120","title":"New control(s)"},{"location":"about/release-notes/#enhancements","text":"PropertyFieldCollectionData : Setting to specify if item creation is enabled/disabled #130 PropertyFieldCollectionData : Setting to specify if item deletion is enabled/disabled #131 PropertyFieldCollectionData : Implemented a property to specify if field editing is enabled/disabled #132 Added Chinese localization #137 PropertyFieldColorPicker : Added a isHidden property #138 PropertyFieldCollectionData : return the item in the custom renderer #147 Added Russian localization #142","title":"Enhancements"},{"location":"about/release-notes/#fixes","text":"PropertyFieldTermPicker : fix sort order with lowercased terms #133 PropertyFieldCollectionData : Bug with onCustomRender() #135 PropertyFieldCollectionData : Fixed bug with dropdown rendering in IE #136 PropertyFieldNumber : Min/max number check fix + localization label fixes #141 PropertyFieldTermPicker : Fix layout issues in IE11 #143","title":"Fixes"},{"location":"about/release-notes/#contributors","text":"Special thanks to our contributors (in alphabetical order): Simon-Pierre Plante , Yannick Plenevaux , Alex Terentiev , Roger Zhang .","title":"Contributors"},{"location":"about/release-notes/#1131","text":"","title":"1.13.1"},{"location":"about/release-notes/#fixes_1","text":"PropertyFieldCollectionData : Fixed issue for loading the control in the local workbench #128","title":"Fixes"},{"location":"about/release-notes/#1130","text":"","title":"1.13.0"},{"location":"about/release-notes/#enhancements_1","text":"Updated the office-ui-fabric-react to the same version as in SPFx 1.7.0 #105 PropertyFieldPeoplePicker : Ability to select only from a specific site #9 PropertyFieldCollectionData : Added support for custom field rendering #122 PropertyFieldCollectionData : Added the functionality to sort the items in the collection #123","title":"Enhancements"},{"location":"about/release-notes/#fixes_2","text":"PropertyFieldDateTimePicker : Fix for the hours dropdown not showing values #112 PropertyFieldCollectionData : Issue with debounce validation overriding the inserted values #113 PropertyPaneWebPartInformation : Remove redundant 'Description' label #119 PropertyFieldCodeEditor : Handle initial value after updating properties #121","title":"Fixes"},{"location":"about/release-notes/#contributors_1","text":"Special thanks to our contributor: Erwin van Hunen .","title":"Contributors"},{"location":"about/release-notes/#1120","text":"","title":"1.12.0"},{"location":"about/release-notes/#new-controls_1","text":"PropertyPaneWebPartInformation : New control to show more information about the current web part #108 PropertyPanePropertyEditor : New control that allows you to export/import property pane settings #114","title":"New control(s)"},{"location":"about/release-notes/#enhancements_2","text":"Dutch localization added #82 French localization added #84 PropertyFieldCollectionData : Allow the user to specify a deferred validation time for each field #98 PropertyFieldCollectionData : added a onRenderOption option to allow custom option rendering #102 PropertyFieldNumber : Introduced the aria label #104 Hide callout from the controls with callout if no message is provided #107 PropertyFieldListPicker : Add the ability to refresh target site while pane is open #109","title":"Enhancements"},{"location":"about/release-notes/#fixes_3","text":"PropertyFieldCollectionData : Fixed catastrophic backtracking regex issue for URL validation #99","title":"Fixes"},{"location":"about/release-notes/#contributors_2","text":"Special thanks to our contributors (in alphabetical order): Paul Bullock , Junle Li , PooLP , Erwin van Hunen .","title":"Contributors"},{"location":"about/release-notes/#1110","text":"","title":"1.11.0"},{"location":"about/release-notes/#enhancements_3","text":"PropertyFieldCollectionData : Show error messages #96","title":"Enhancements"},{"location":"about/release-notes/#fixes_4","text":"Fixes based on SonarCloud analysis","title":"Fixes"},{"location":"about/release-notes/#1100","text":"","title":"1.10.0"},{"location":"about/release-notes/#enhancements_4","text":"PropertyFieldPeoplePicker : Security groups come back with EntityType of FormsRole rather then SecGroup #93 PropertyFieldCollectionData : Add the current row's information in the onGetErrorMessage callback #92","title":"Enhancements"},{"location":"about/release-notes/#fixes_5","text":"PropertyFieldPeoplePicker : No suggestions returned when using Security Groups, Multi-select and NO duplicates. #90 PropertyFieldTermPicker : Terms which are set as unavailable for tagging are still selectable #94","title":"Fixes"},{"location":"about/release-notes/#190","text":"","title":"1.9.0"},{"location":"about/release-notes/#enhancements_5","text":"PropertyFieldCollectionData : Added custom validation for string , number , icon , and URL field types #74 PropertyFieldCollectionData : Add an option to specify a default value #86 PropertyFieldCollectionData : override placeholder for the inputs #87 PropertyFieldCollectionData : Hide save button when \"Add and save\" is shown #88","title":"Enhancements"},{"location":"about/release-notes/#fixes_6","text":"PropertyFieldMultiSelect : fixed an issue where the control didn't retain the preselected values when dropdown options were provided async #85 PropertyFieldOrder : fixed an issue where items where provided async #81","title":"Fixes"},{"location":"about/release-notes/#180","text":"","title":"1.8.0"},{"location":"about/release-notes/#enhancements_6","text":"New telemetry approach which allows you to use Application Insights instance #79 PropertyFieldListPicker add optional property for target site #21","title":"Enhancements"},{"location":"about/release-notes/#contributors_3","text":"Special thanks to our contributor: Joel Rodrigues .","title":"Contributors"},{"location":"about/release-notes/#170","text":"","title":"1.7.0"},{"location":"about/release-notes/#enhancements_7","text":"Add npm postinstall script to automatically add the localization config #64 Add a description to the PropertyFieldCollectionData panel #67 Added a font field type for the PropertyFieldCollectionData control #66 Added a URL field type for the PropertyFieldCollectionData control #72 Field validation implemented to enable/disable save buttons in PropertyFieldCollectionData control. Related to previous enhancement. Added properties to the TaxonomyPicker to specify which terms are disabled/not-selectable #69","title":"Enhancements"},{"location":"about/release-notes/#fixes_7","text":"PropertyFieldPeoplePicker validation error does not clear as expected #68","title":"Fixes"},{"location":"about/release-notes/#160","text":"","title":"1.6.0"},{"location":"about/release-notes/#new-controls_2","text":"PropertyFieldCollectionData was added #58 PropertyFieldOrder was added #19 PropertyFieldSwatchColorPicker was added #55","title":"New control(s)"},{"location":"about/release-notes/#enhancements_8","text":"Allow the term set to be selectable in the PropertyFieldTermPicker #60","title":"Enhancements"},{"location":"about/release-notes/#fixes_8","text":"Fix for PropertyFieldColorPicker Palette Icon alignment issue in IE11 #56","title":"Fixes"},{"location":"about/release-notes/#151","text":"","title":"1.5.1"},{"location":"about/release-notes/#enhancements_9","text":"Color Pickers optionally return Color Objects #55","title":"Enhancements"},{"location":"about/release-notes/#fixes_9","text":"Undefined web part context fixed in the PropertyFieldPeoplePicker #47 Taxonomy service fix for working with term set GUID #48 Added focus intercepting input for Full style #52","title":"Fixes"},{"location":"about/release-notes/#150","text":"","title":"1.5.0"},{"location":"about/release-notes/#enhancements_10","text":"PropertyFieldListPicker control extended with select all lists option #8 PropertyFieldTermPicker control extended with the ability to search terms by typing in the textbox #11 #42 #44 #45 SPTermStorePickerService has a new interface which contains only the required properties","title":"Enhancements"},{"location":"about/release-notes/#142","text":"","title":"1.4.2"},{"location":"about/release-notes/#enhancements_11","text":"Introduced the onGetErrorMessage property for the PropertyFieldNumber field control ( #36 )","title":"Enhancements"},{"location":"about/release-notes/#141","text":"","title":"1.4.1"},{"location":"about/release-notes/#enhancements_12","text":"Optimized telemetry so that it only pushes control data","title":"Enhancements"},{"location":"about/release-notes/#fixes_10","text":"Fixes for issue #30 PropertyFieldPeoplePicker Validation does not work as expected #33","title":"Fixes"},{"location":"about/release-notes/#140","text":"","title":"1.4.0"},{"location":"about/release-notes/#new-controls_3","text":"PropertyFieldMultiSelect got added PropertyFieldNumber got added","title":"New control(s)"},{"location":"about/release-notes/#enhancements_13","text":"PropertyFieldTermPicker new introduced property to specify to show or hide the term store name: hideTermStoreName . PropertyFieldTermPicker updated process when terms were unselected based on ID instead of path.","title":"Enhancements"},{"location":"about/release-notes/#130","text":"","title":"1.3.0"},{"location":"about/release-notes/#new-controls_4","text":"PropertyFieldCodeEditor got added","title":"New control(s)"},{"location":"about/release-notes/#enhancements_14","text":"PropertyFieldTermPicker improved with save and cancel button PropertyFieldTermPicker improved with onClick event on input field","title":"Enhancements"},{"location":"about/release-notes/#120","text":"","title":"1.2.0"},{"location":"about/release-notes/#enhancements_15","text":"Added the option to the people picker to allow you to specify single or multi-selection","title":"Enhancements"},{"location":"about/release-notes/#fixes_11","text":"People picker accidentally picked the wrong person Improved telemetry with some object checks","title":"Fixes"},{"location":"about/release-notes/#111","text":"","title":"1.1.1"},{"location":"about/release-notes/#enhancements_16","text":"Removed operation name from telemetry","title":"Enhancements"},{"location":"about/release-notes/#110","text":"","title":"1.1.0"},{"location":"about/release-notes/#new-controls_5","text":"Added the PropertyFieldButtonWithCallout control Added the PropertyFieldCheckboxWithCallout control Added the PropertyFieldChoiceGroupWithCallout control Added the PropertyFieldWithCallout control Added the PropertyLabelWithCallout control Added the PropertyLinkWithCallout control Added the PropertySliderWithCallout control","title":"New control(s)"},{"location":"about/release-notes/#enhancements_17","text":"Telemetry added Term picker control has now the option to scope on term set or group","title":"Enhancements"},{"location":"about/release-notes/#100","text":"","title":"1.0.0"},{"location":"about/release-notes/#new-controls_6","text":"Added the PropertyFieldDropdownWithCallout control Added the PropertyFieldTextWithCallout control Added the PropertyFieldToggleWithCallout control","title":"New control(s)"},{"location":"about/release-notes/#100-beta3","text":"","title":"1.0.0-beta.3"},{"location":"about/release-notes/#enhancements_18","text":"Added firstDayOfWeek option to the date picker control","title":"Enhancements"},{"location":"about/release-notes/#100-beta2","text":"","title":"1.0.0-beta.2"},{"location":"about/release-notes/#new-controls_7","text":"Initial release","title":"New control(s)"},{"location":"controls/PropertyFieldButtonWithCallout/","text":"PropertyFieldButtonWithCallout control This control generates a button control with a callout. PropertyFieldButtonWithCallout rendering PropertyFieldButtonWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldButtonWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldButtonWithCallout ; Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldButtonWithCallout ( fakeProperty , { calloutTrigger : CalloutTriggers.Click , key : buttonWithCalloutFieldId , calloutContent : React.createElement ( p , {}, Tests connection to the database with the parameters listed above ), calloutWidth : 150 , text : Test connection , onClick : () = { /* Code to test db connection */ } }) Implementation The PropertyFieldButtonWithCallout control uses the same implementation as the default PropertyPaneButton and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldButtonWithCallout"},{"location":"controls/PropertyFieldButtonWithCallout/#propertyfieldbuttonwithcallout-control","text":"This control generates a button control with a callout. PropertyFieldButtonWithCallout rendering PropertyFieldButtonWithCallout callout opened","title":"PropertyFieldButtonWithCallout control"},{"location":"controls/PropertyFieldButtonWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldButtonWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldButtonWithCallout ; Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldButtonWithCallout ( fakeProperty , { calloutTrigger : CalloutTriggers.Click , key : buttonWithCalloutFieldId , calloutContent : React.createElement ( p , {}, Tests connection to the database with the parameters listed above ), calloutWidth : 150 , text : Test connection , onClick : () = { /* Code to test db connection */ } })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldButtonWithCallout/#implementation","text":"The PropertyFieldButtonWithCallout control uses the same implementation as the default PropertyPaneButton and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldCheckboxWithCallout/","text":"PropertyFieldCheckboxWithCallout control This control generates a checkbox control with a callout. PropertyFieldCheckboxWithCallout rendering PropertyFieldCheckboxWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldCheckboxWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldCheckboxWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { checkboxWithCalloutValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldCheckboxWithCallout ( checkboxWithCalloutValue , { calloutTrigger : CalloutTriggers.Click , key : checkboxWithCalloutFieldId , calloutContent : React.createElement ( p , {}, Check the checkbox to accept Application Terms and Conditions ), calloutWidth : 200 , text : Accept terms and conditions , checked : this.properties.checkboxWithCalloutValue }) Implementation The PropertyFieldCheckboxWithCallout control uses the same implementation as the default PropertyPaneCheckbox and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldCheckboxWithCallout"},{"location":"controls/PropertyFieldCheckboxWithCallout/#propertyfieldcheckboxwithcallout-control","text":"This control generates a checkbox control with a callout. PropertyFieldCheckboxWithCallout rendering PropertyFieldCheckboxWithCallout callout opened","title":"PropertyFieldCheckboxWithCallout control"},{"location":"controls/PropertyFieldCheckboxWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldCheckboxWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldCheckboxWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { checkboxWithCalloutValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldCheckboxWithCallout ( checkboxWithCalloutValue , { calloutTrigger : CalloutTriggers.Click , key : checkboxWithCalloutFieldId , calloutContent : React.createElement ( p , {}, Check the checkbox to accept Application Terms and Conditions ), calloutWidth : 200 , text : Accept terms and conditions , checked : this.properties.checkboxWithCalloutValue })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldCheckboxWithCallout/#implementation","text":"The PropertyFieldCheckboxWithCallout control uses the same implementation as the default PropertyPaneCheckbox and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldChoiceGroupWithCallout/","text":"PropertyFieldChoiceGroupWithCallout control This control generates a choice group control with a callout. PropertyFieldChoiceGroupWithCallout rendering PropertyFieldChoiceGroupWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldChoiceGroupWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldChoiceGroupWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { choiceGroupWithCalloutValue : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldChoiceGroupWithCallout ( choiceGroupWithCalloutValue , { calloutContent : React.createElement ( div , {}, Select preferrable mobile platform ), calloutTrigger : CalloutTriggers.Hover , key : choiceGroupWithCalloutFieldId , label : Preferred mobile platform , options : [{ key : iOS , text : iOS , checked : this.properties.choiceGroupWithCalloutValue === iOS }, { key : Android , text : Android , checked : this.properties.choiceGroupWithCalloutValue === Android }, { key : Other , text : Other , checked : this.properties.choiceGroupWithCalloutValue === Other }] }) Implementation The PropertyFieldChoiceGroupWithCallout control uses the same implementation as the default PropertyPaneChoiceGroup and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldChoiceGroupWithCallout"},{"location":"controls/PropertyFieldChoiceGroupWithCallout/#propertyfieldchoicegroupwithcallout-control","text":"This control generates a choice group control with a callout. PropertyFieldChoiceGroupWithCallout rendering PropertyFieldChoiceGroupWithCallout callout opened","title":"PropertyFieldChoiceGroupWithCallout control"},{"location":"controls/PropertyFieldChoiceGroupWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldChoiceGroupWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldChoiceGroupWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { choiceGroupWithCalloutValue : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldChoiceGroupWithCallout ( choiceGroupWithCalloutValue , { calloutContent : React.createElement ( div , {}, Select preferrable mobile platform ), calloutTrigger : CalloutTriggers.Hover , key : choiceGroupWithCalloutFieldId , label : Preferred mobile platform , options : [{ key : iOS , text : iOS , checked : this.properties.choiceGroupWithCalloutValue === iOS }, { key : Android , text : Android , checked : this.properties.choiceGroupWithCalloutValue === Android }, { key : Other , text : Other , checked : this.properties.choiceGroupWithCalloutValue === Other }] })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldChoiceGroupWithCallout/#implementation","text":"The PropertyFieldChoiceGroupWithCallout control uses the same implementation as the default PropertyPaneChoiceGroup and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldCodeEditor/","text":"PropertyFieldCodeEditor control This control generates a code editor which can be used to add custom styling or content to your web part. PropertyFieldCodeEditor PropertyFieldCodeEditor editing experience How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldCodeEditor , PropertyFieldCodeEditorLanguages } from @pnp/spfx-property-controls/lib/PropertyFieldCodeEditor ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { htmlCode : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldCodeEditor ( htmlCode , { label : Edit HTML Code , panelTitle : Edit HTML Code , initialValue : this.properties.htmlCode , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , disabled : false , key : codeEditorFieldId , language : PropertyFieldCodeEditorLanguages.HTML }) Implementation The PropertyFieldColorPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. panelTitle string yes Title of the code editor panel. initialValue string no Defines the initial code. language PropertyFieldCodeEditorLanguages no Sets the language on the code editor. properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control. Enum PropertyFieldCodeEditorLanguages Name css JavaScript JSON Handlebars HTML Plain Text Sass TypeScript XML","title":"PropertyFieldCodeEditor"},{"location":"controls/PropertyFieldCodeEditor/#propertyfieldcodeeditor-control","text":"This control generates a code editor which can be used to add custom styling or content to your web part. PropertyFieldCodeEditor PropertyFieldCodeEditor editing experience","title":"PropertyFieldCodeEditor control"},{"location":"controls/PropertyFieldCodeEditor/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldCodeEditor , PropertyFieldCodeEditorLanguages } from @pnp/spfx-property-controls/lib/PropertyFieldCodeEditor ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { htmlCode : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldCodeEditor ( htmlCode , { label : Edit HTML Code , panelTitle : Edit HTML Code , initialValue : this.properties.htmlCode , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , disabled : false , key : codeEditorFieldId , language : PropertyFieldCodeEditorLanguages.HTML })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldCodeEditor/#implementation","text":"The PropertyFieldColorPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. panelTitle string yes Title of the code editor panel. initialValue string no Defines the initial code. language PropertyFieldCodeEditorLanguages no Sets the language on the code editor. properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control. Enum PropertyFieldCodeEditorLanguages Name css JavaScript JSON Handlebars HTML Plain Text Sass TypeScript XML","title":"Implementation"},{"location":"controls/PropertyFieldCollectionData/","text":"PropertyFieldCollectionData control This property field control gives you the ability to insert a list / collection data which can be used in your web part. For example: you want to specify multiple locations for showing a weather information. The control allows you to specify multiple data types like: string, number, boolean, or dropdown. PropertyFieldCollectionData The type of data you get returned depends on the fields you defined. For the example above, the data looks like this: [ { Title : Person , Lastname : 1 , Age : 42 , City : helsinki , Sign : true }, { Title : Person , Lastname : 2 , Age : 42 , City : helsinki , Sign : true } ] How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldCollectionData , CustomCollectionFieldType } from @pnp/spfx-property-controls/lib/PropertyFieldCollectionData ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { collectionData : any []; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldCollectionData ( collectionData , { key : collectionData , label : Collection data , panelHeader : Collection data panel header , manageBtnLabel : Manage collection data , value : this.properties.collectionData , fields : [ { id : Title , title : Firstname , type : CustomCollectionFieldType.string , required : true }, { id : Lastname , title : Lastname , type : CustomCollectionFieldType.string }, { id : Age , title : Age , type : CustomCollectionFieldType.number , required : true }, { id : City , title : Favorite city , type : CustomCollectionFieldType.dropdown , options : [ { key : antwerp , text : Antwerp }, { key : helsinki , text : Helsinki }, { key : montreal , text : Montreal } ], required : true }, { id : Sign , title : Signed , type : CustomCollectionFieldType.boolean } ], disabled : false }) Sample of custom field rendering Here is an example of how you can render your own controls in the PropertyFieldCollectionData control: { id : customFieldId , title : Custom Field , type : CustomCollectionFieldType.custom , onCustomRender : ( field , value , onUpdate , item , itemId ) = { return ( React . createElement ( div , null , React . createElement ( input , { key : itemId , value : value , onChange : ( event : React.FormEvent HTMLInputElement ) = onUpdate ( field . id , event . currentTarget . value ) }), \ud83c\udf89 ) ); } } Implementation The PropertyFieldCollectionData control can be configured with the following properties: Property Type Required Description Default Value key string yes An unique key that indicates the identity of this control. label string yes Property field label displayed on top. panelHeader string yes Label to be used as the header in the panel. panelDescription string no Property that allows you to specify a description in the collection panel. manageBtnLabel string yes Label of the button to open the panel. fields ICustomCollectionField[] yes The fields to be used for the list of collection data. value string yes The collection data value. enableSorting boolean no Specify if you want to be able to sort the items in the collection. false disabled boolean no Specify if the control is disabled. false disableItemCreation boolean no Allows you to specify if user can create new items. false disableItemDeletion boolean no Allows you to specify if users can delete already inserted items. false Interface ICustomCollectionField Property Type Required Description id string yes ID of the field. title string yes Title of the field. This will be used for the label in the table. type CustomCollectionFieldType yes Specifies the type of field to render. disableEdit boolean no Allows you to specify if a field is disabled for editing. required boolean no Specify if the field is required. options IDropdownOption[] no Dropdown options. Only necessary when dropdown type is used. onRenderOption IRenderFunction no Dropdown custom options render method. Only for the dropdown field type. placeholder string no Placehoder text which will be used for the input field. If not provided the input title will be used. defaultValue any no Specify a default value for the input field. deferredValidationTime number no Field will start to validate after users stop typing for deferredValidationTime milliseconds. Default: 200ms. onGetErrorMessage (value: any, index: number, crntItem: any): string | Promise no The method is used to get the validation error message and determine whether the input value is valid or not. It provides you the current row index and the item you are currently editing. onCustomRender (field: ICustomCollectionField, value: any, onUpdate: (fieldId: string, value: any) = void, item: any, itemUniqueId: string) = JSX.Element no This property is only required if you are using the custom field type and it can be used to specify the custom rendering of your control in the collection data. Enum CustomCollectionFieldType Type Description string Text field number Number field boolean Checkbox dropdown Dropdown field. You will have to specify the options property when using this field type fabricIcon Name of the Office UI Fabric icon url URL field custom This gives you control over the whole field rendering. Be sure to provide the onCustomRender method to render your control in the collection data.","title":"PropertyFieldCollectionData"},{"location":"controls/PropertyFieldCollectionData/#propertyfieldcollectiondata-control","text":"This property field control gives you the ability to insert a list / collection data which can be used in your web part. For example: you want to specify multiple locations for showing a weather information. The control allows you to specify multiple data types like: string, number, boolean, or dropdown. PropertyFieldCollectionData The type of data you get returned depends on the fields you defined. For the example above, the data looks like this: [ { Title : Person , Lastname : 1 , Age : 42 , City : helsinki , Sign : true }, { Title : Person , Lastname : 2 , Age : 42 , City : helsinki , Sign : true } ]","title":"PropertyFieldCollectionData control"},{"location":"controls/PropertyFieldCollectionData/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldCollectionData , CustomCollectionFieldType } from @pnp/spfx-property-controls/lib/PropertyFieldCollectionData ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { collectionData : any []; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldCollectionData ( collectionData , { key : collectionData , label : Collection data , panelHeader : Collection data panel header , manageBtnLabel : Manage collection data , value : this.properties.collectionData , fields : [ { id : Title , title : Firstname , type : CustomCollectionFieldType.string , required : true }, { id : Lastname , title : Lastname , type : CustomCollectionFieldType.string }, { id : Age , title : Age , type : CustomCollectionFieldType.number , required : true }, { id : City , title : Favorite city , type : CustomCollectionFieldType.dropdown , options : [ { key : antwerp , text : Antwerp }, { key : helsinki , text : Helsinki }, { key : montreal , text : Montreal } ], required : true }, { id : Sign , title : Signed , type : CustomCollectionFieldType.boolean } ], disabled : false })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldCollectionData/#sample-of-custom-field-rendering","text":"Here is an example of how you can render your own controls in the PropertyFieldCollectionData control: { id : customFieldId , title : Custom Field , type : CustomCollectionFieldType.custom , onCustomRender : ( field , value , onUpdate , item , itemId ) = { return ( React . createElement ( div , null , React . createElement ( input , { key : itemId , value : value , onChange : ( event : React.FormEvent HTMLInputElement ) = onUpdate ( field . id , event . currentTarget . value ) }), \ud83c\udf89 ) ); } }","title":"Sample of custom field rendering"},{"location":"controls/PropertyFieldCollectionData/#implementation","text":"The PropertyFieldCollectionData control can be configured with the following properties: Property Type Required Description Default Value key string yes An unique key that indicates the identity of this control. label string yes Property field label displayed on top. panelHeader string yes Label to be used as the header in the panel. panelDescription string no Property that allows you to specify a description in the collection panel. manageBtnLabel string yes Label of the button to open the panel. fields ICustomCollectionField[] yes The fields to be used for the list of collection data. value string yes The collection data value. enableSorting boolean no Specify if you want to be able to sort the items in the collection. false disabled boolean no Specify if the control is disabled. false disableItemCreation boolean no Allows you to specify if user can create new items. false disableItemDeletion boolean no Allows you to specify if users can delete already inserted items. false Interface ICustomCollectionField Property Type Required Description id string yes ID of the field. title string yes Title of the field. This will be used for the label in the table. type CustomCollectionFieldType yes Specifies the type of field to render. disableEdit boolean no Allows you to specify if a field is disabled for editing. required boolean no Specify if the field is required. options IDropdownOption[] no Dropdown options. Only necessary when dropdown type is used. onRenderOption IRenderFunction no Dropdown custom options render method. Only for the dropdown field type. placeholder string no Placehoder text which will be used for the input field. If not provided the input title will be used. defaultValue any no Specify a default value for the input field. deferredValidationTime number no Field will start to validate after users stop typing for deferredValidationTime milliseconds. Default: 200ms. onGetErrorMessage (value: any, index: number, crntItem: any): string | Promise no The method is used to get the validation error message and determine whether the input value is valid or not. It provides you the current row index and the item you are currently editing. onCustomRender (field: ICustomCollectionField, value: any, onUpdate: (fieldId: string, value: any) = void, item: any, itemUniqueId: string) = JSX.Element no This property is only required if you are using the custom field type and it can be used to specify the custom rendering of your control in the collection data. Enum CustomCollectionFieldType Type Description string Text field number Number field boolean Checkbox dropdown Dropdown field. You will have to specify the options property when using this field type fabricIcon Name of the Office UI Fabric icon url URL field custom This gives you control over the whole field rendering. Be sure to provide the onCustomRender method to render your control in the collection data.","title":"Implementation"},{"location":"controls/PropertyFieldColorPicker/","text":"PropertyFieldColorPicker control This control generates a color picker that you can use inside the property pane. PropertyFieldColorPicker PropertyFieldColorPicker color selector How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldColorPicker , PropertyFieldColorPickerStyle } from @pnp/spfx-property-controls/lib/PropertyFieldColorPicker ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { color : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldColorPicker ( color , { label : Color , selectedColor : this.properties.color , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , disabled : false , isHidden : false , alphaSliderHidden : false , style : PropertyFieldColorPickerStyle.Full , iconName : Precipitation , key : colorFieldId }) Implementation The PropertyFieldColorPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. isHidden boolean no Specify if the control needs to be hidden. selectedColor string or IColor no The CSS-compatible string or an IColor object to describe the initial color alphaSliderHidden boolean no When true, the alpha slider control is hidden style PropertyFieldColorPickerStyle no Determines how the control is displayed (defaults to inline) iconName string no The name of the UI Fabric Font Icon to use for Inline display (defaults to Color) valueAsObject boolean no When true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control. Enum PropertyFieldColorPickerStyle Name Description Full Display the full control in the property pane Inline Display the color picker inline Value By default, the Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios. By setting the valueAsObject property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object: Property Type Description str string CSS-compatible string (this is the same value that would normally be returned when valueAsObject is false) hex string Hex value (does not reflect alpha) r number Red g number Green b number Blue h number Hue s number Saturation v number Value","title":"PropertyFieldColorPicker"},{"location":"controls/PropertyFieldColorPicker/#propertyfieldcolorpicker-control","text":"This control generates a color picker that you can use inside the property pane. PropertyFieldColorPicker PropertyFieldColorPicker color selector","title":"PropertyFieldColorPicker control"},{"location":"controls/PropertyFieldColorPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldColorPicker , PropertyFieldColorPickerStyle } from @pnp/spfx-property-controls/lib/PropertyFieldColorPicker ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { color : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldColorPicker ( color , { label : Color , selectedColor : this.properties.color , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , disabled : false , isHidden : false , alphaSliderHidden : false , style : PropertyFieldColorPickerStyle.Full , iconName : Precipitation , key : colorFieldId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldColorPicker/#implementation","text":"The PropertyFieldColorPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. isHidden boolean no Specify if the control needs to be hidden. selectedColor string or IColor no The CSS-compatible string or an IColor object to describe the initial color alphaSliderHidden boolean no When true, the alpha slider control is hidden style PropertyFieldColorPickerStyle no Determines how the control is displayed (defaults to inline) iconName string no The name of the UI Fabric Font Icon to use for Inline display (defaults to Color) valueAsObject boolean no When true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control. Enum PropertyFieldColorPickerStyle Name Description Full Display the full control in the property pane Inline Display the color picker inline","title":"Implementation"},{"location":"controls/PropertyFieldColorPicker/#value","text":"By default, the Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios. By setting the valueAsObject property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object: Property Type Description str string CSS-compatible string (this is the same value that would normally be returned when valueAsObject is false) hex string Hex value (does not reflect alpha) r number Red g number Green b number Blue h number Hue s number Saturation v number Value","title":"Value"},{"location":"controls/PropertyFieldDateTimePicker/","text":"PropertyFieldDateTimePicker control This control generates a Date and Time picker field that can be used in the property pane of your SharePoint Framework web parts. The control can be configured to be date only or date and time. Date only Date picker Date and time How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldDateTimePicker , DateConvention , TimeConvention } from @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ; Create a new property for your web part, for example: import { IDateTimeFieldValue } from @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ; export interface IPropertyControlsTestWebPartProps { datetime : IDateTimeFieldValue ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldDateTimePicker ( datetime , { label : Select the date and time , initialDate : this.properties.datetime , dateConvention : DateConvention.DateTime , timeConvention : TimeConvention.Hours12 , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , onGetErrorMessage : null , deferredValidationTime : 0 , key : dateTimeFieldId }) Implementation The PropertyFieldDateTimePicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. initialData IDateTimeFieldValue yes Initial date and time value of the control. formatData function no Defines a formatDate function that can override the output value. dateConvention DateConvention no Defines the date convention to use. By default this is set to date and time. timeConvention TimeConvention no Defines the time convention to use. By default this is set to 24-hour clock convention. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. Interface IDateTimeFieldValue Property Type Required Description value Date yes JavaScript date value. displayValue string yes Date value formatted as a string. Enum DateConvention Name Description DateTime Shows the date and time picker Date Shows only the date picker Enum TimeConvention Name Description Hours12 Specify the hours in 12-hours (AM / PM) time convention. Hours24 Specify the hours in 24-hours time convention.","title":"PropertyFieldDateTimePicker"},{"location":"controls/PropertyFieldDateTimePicker/#propertyfielddatetimepicker-control","text":"This control generates a Date and Time picker field that can be used in the property pane of your SharePoint Framework web parts. The control can be configured to be date only or date and time. Date only Date picker Date and time","title":"PropertyFieldDateTimePicker control"},{"location":"controls/PropertyFieldDateTimePicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldDateTimePicker , DateConvention , TimeConvention } from @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ; Create a new property for your web part, for example: import { IDateTimeFieldValue } from @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ; export interface IPropertyControlsTestWebPartProps { datetime : IDateTimeFieldValue ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldDateTimePicker ( datetime , { label : Select the date and time , initialDate : this.properties.datetime , dateConvention : DateConvention.DateTime , timeConvention : TimeConvention.Hours12 , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , onGetErrorMessage : null , deferredValidationTime : 0 , key : dateTimeFieldId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldDateTimePicker/#implementation","text":"The PropertyFieldDateTimePicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. initialData IDateTimeFieldValue yes Initial date and time value of the control. formatData function no Defines a formatDate function that can override the output value. dateConvention DateConvention no Defines the date convention to use. By default this is set to date and time. timeConvention TimeConvention no Defines the time convention to use. By default this is set to 24-hour clock convention. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. Interface IDateTimeFieldValue Property Type Required Description value Date yes JavaScript date value. displayValue string yes Date value formatted as a string. Enum DateConvention Name Description DateTime Shows the date and time picker Date Shows only the date picker Enum TimeConvention Name Description Hours12 Specify the hours in 12-hours (AM / PM) time convention. Hours24 Specify the hours in 24-hours time convention.","title":"Implementation"},{"location":"controls/PropertyFieldDropdownWithCallout/","text":"PropertyFieldDropDownWithCallout control This control generates a dropdown control with a callout. PropertyFieldDropDownWithCallout rendering PropertyFieldDropDownWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldDropdownWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldDropdownWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { dropdownInfoHeaderKey : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldDropdownWithCallout ( dropdownInfoHeaderKey , { calloutTrigger : CalloutTriggers.Hover , key : dropdownInfoHeaderFieldId , label : Select the version , options : [{ key : v1.0.0 , text : v1.0.0 }, { key : v1.0.1 , text : v1.0.1 }, { key : v1.0.2 , text : v1.0.2 }, { key : v2.0.0 , text : v2.0.0 }], selectedKey : this.properties.dropdownInfoHeaderKey , calloutContent : dropdownInfoHeaderCallountContent }) Implement the calloutContent function as follows: private getDropdownInfoHeaderCalloutContent () : JSX . Element { const selectedKey : string = this . properties . dropdownInfoHeaderKey ; if ( selectedKey ) { return React . createElement ( div , {}, `you have selected ${ selectedKey } ` ); } else { return React . createElement ( div , {}, `you haven t selected any version` ); } } Implementation The PropertyFieldDropDownWithCallout control uses the same implementation as the default PropertyPaneDropdown and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldDropdownWithCallout"},{"location":"controls/PropertyFieldDropdownWithCallout/#propertyfielddropdownwithcallout-control","text":"This control generates a dropdown control with a callout. PropertyFieldDropDownWithCallout rendering PropertyFieldDropDownWithCallout callout opened","title":"PropertyFieldDropDownWithCallout control"},{"location":"controls/PropertyFieldDropdownWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldDropdownWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldDropdownWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { dropdownInfoHeaderKey : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldDropdownWithCallout ( dropdownInfoHeaderKey , { calloutTrigger : CalloutTriggers.Hover , key : dropdownInfoHeaderFieldId , label : Select the version , options : [{ key : v1.0.0 , text : v1.0.0 }, { key : v1.0.1 , text : v1.0.1 }, { key : v1.0.2 , text : v1.0.2 }, { key : v2.0.0 , text : v2.0.0 }], selectedKey : this.properties.dropdownInfoHeaderKey , calloutContent : dropdownInfoHeaderCallountContent }) Implement the calloutContent function as follows: private getDropdownInfoHeaderCalloutContent () : JSX . Element { const selectedKey : string = this . properties . dropdownInfoHeaderKey ; if ( selectedKey ) { return React . createElement ( div , {}, `you have selected ${ selectedKey } ` ); } else { return React . createElement ( div , {}, `you haven t selected any version` ); } }","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldDropdownWithCallout/#implementation","text":"The PropertyFieldDropDownWithCallout control uses the same implementation as the default PropertyPaneDropdown and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldEnterpriseTermPicker/","text":"PropertyFieldEnterpriseTermPicker control This control generates a term picker that can be used in the property pane of your SharePoint Framework web parts. Disclaimer : This control makes use of the @pnp/sp-taxonomy module to retrieve the managed metadata information. It leads to increase of the bundle/package size if the control is being used. Use the control for \"enterprise\" scenarios (large term stores with lots of objects) or if you need to request labels for terms. Empty term picker Selecting terms Selected terms in the panel Empty term picker Term picker: Auto Complete Limit the term set to a specific group or termset How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldEnterpriseTermPicker } from @pnp/spfx-property-controls/lib/PropertyFieldEnterpriseTermPicker ; Create a new property for your web part, for example: import { IPickerTerms } from @pnp/spfx-property-controls/lib/PropertyFieldEnterpriseTermPicker ; export interface IPropertyControlsTestWebPartProps { terms : IPickerTerms ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldEnterpriseTermPicker ( terms , { label : Select terms , panelTitle : Select terms , initialValues : this.properties.terms , allowMultipleSelections : true , excludeSystemGroup : false , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , context : this.context , onGetErrorMessage : null , deferredValidationTime : 0 , limitByGroupNameOrID : People , limitByTermsetNameOrID : Location , key : termSetsPickerFieldId , includeLabels : true }) Implementation The PropertyFieldEnterpriseTermPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. panelTitle string yes TermSet Picker Panel title. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. excludeSystemGroup boolean no Indicator to define if the system Groups are exclude. Default is false. limitByGroupNameOrID string no Limit the term sets that can be used by the group name or ID. limitByTermsetNameOrID string no Limit the terms that can be picked by the Term Set name or ID. hideTermStoreName boolean no Specifies if you want to show or hide the term store name from the panel. isTermSetSelectable boolean no Specify if the term set itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. resolveDelay number no The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. if a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called. Default is 500. includeLabels boolean no Specifies if term labels should be loaded from the store. Interface IPickerTerms Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent term set of the term termSetName string no The Name of the parent term set of the term Differences between PropertyFieldEnterpriseTermPicker and PropertyFieldTermPicker PropertyFieldEnterpriseTermPicker is implemented to be used for \"enterprise\" Term Stores with large amount of groups, terms sets, and terms. It loads term sets and terms on demand - only at the moment when specified group or term set has been expanded in the Term Store Tree. To implement on-demand loading PropertyFieldEnterpriseTermPicker uses @pnp/sp-taxonomy module from @pnp/pnpjs library. It increases the size of a bundle when the control is used. Additionaly, PropertyFieldEnterpriseTermPicker allows to request labels for the terms in the picker. PropertyFieldTermPicker loads all the groups and term sets from the term service during the initial request. This approach fits most of the scenarios with small and medium number of objects in a term store. Besides that, PropertyFieldTermPicker does not use any additional libraries or modules to retrieve data from the taxonomy service which makes it much more lightweight option in comparison with PropertyFieldEnterpriseTermPicker . See PropertyFieldTermPicker for implementation details. We recommend to use PropertyFieldTermPicker control if you don't need on-demand loading or term labels .","title":"PropertyFieldEnterpriseTermPicker control"},{"location":"controls/PropertyFieldEnterpriseTermPicker/#propertyfieldenterprisetermpicker-control","text":"This control generates a term picker that can be used in the property pane of your SharePoint Framework web parts. Disclaimer : This control makes use of the @pnp/sp-taxonomy module to retrieve the managed metadata information. It leads to increase of the bundle/package size if the control is being used. Use the control for \"enterprise\" scenarios (large term stores with lots of objects) or if you need to request labels for terms. Empty term picker Selecting terms Selected terms in the panel Empty term picker Term picker: Auto Complete Limit the term set to a specific group or termset","title":"PropertyFieldEnterpriseTermPicker control"},{"location":"controls/PropertyFieldEnterpriseTermPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldEnterpriseTermPicker } from @pnp/spfx-property-controls/lib/PropertyFieldEnterpriseTermPicker ; Create a new property for your web part, for example: import { IPickerTerms } from @pnp/spfx-property-controls/lib/PropertyFieldEnterpriseTermPicker ; export interface IPropertyControlsTestWebPartProps { terms : IPickerTerms ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldEnterpriseTermPicker ( terms , { label : Select terms , panelTitle : Select terms , initialValues : this.properties.terms , allowMultipleSelections : true , excludeSystemGroup : false , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , context : this.context , onGetErrorMessage : null , deferredValidationTime : 0 , limitByGroupNameOrID : People , limitByTermsetNameOrID : Location , key : termSetsPickerFieldId , includeLabels : true })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldEnterpriseTermPicker/#implementation","text":"The PropertyFieldEnterpriseTermPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. panelTitle string yes TermSet Picker Panel title. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. excludeSystemGroup boolean no Indicator to define if the system Groups are exclude. Default is false. limitByGroupNameOrID string no Limit the term sets that can be used by the group name or ID. limitByTermsetNameOrID string no Limit the terms that can be picked by the Term Set name or ID. hideTermStoreName boolean no Specifies if you want to show or hide the term store name from the panel. isTermSetSelectable boolean no Specify if the term set itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. resolveDelay number no The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. if a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called. Default is 500. includeLabels boolean no Specifies if term labels should be loaded from the store. Interface IPickerTerms Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent term set of the term termSetName string no The Name of the parent term set of the term","title":"Implementation"},{"location":"controls/PropertyFieldEnterpriseTermPicker/#differences-between-propertyfieldenterprisetermpicker-and-propertyfieldtermpicker","text":"PropertyFieldEnterpriseTermPicker is implemented to be used for \"enterprise\" Term Stores with large amount of groups, terms sets, and terms. It loads term sets and terms on demand - only at the moment when specified group or term set has been expanded in the Term Store Tree. To implement on-demand loading PropertyFieldEnterpriseTermPicker uses @pnp/sp-taxonomy module from @pnp/pnpjs library. It increases the size of a bundle when the control is used. Additionaly, PropertyFieldEnterpriseTermPicker allows to request labels for the terms in the picker. PropertyFieldTermPicker loads all the groups and term sets from the term service during the initial request. This approach fits most of the scenarios with small and medium number of objects in a term store. Besides that, PropertyFieldTermPicker does not use any additional libraries or modules to retrieve data from the taxonomy service which makes it much more lightweight option in comparison with PropertyFieldEnterpriseTermPicker . See PropertyFieldTermPicker for implementation details. We recommend to use PropertyFieldTermPicker control if you don't need on-demand loading or term labels .","title":"Differences between PropertyFieldEnterpriseTermPicker and PropertyFieldTermPicker"},{"location":"controls/PropertyFieldLabelWithCallout/","text":"PropertyFieldLabelWithCallout control This control generates a label control with a callout. PropertyFieldLabelWithCallout rendering PropertyFieldLabelWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldLabelWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldLabelWithCallout ; Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldLabelWithCallout ( fakeProp , { calloutTrigger : CalloutTriggers.Click , key : LabelWithCalloutFieldId , calloutContent : Use dropdowns below to select list and list\\ s field to work with , calloutWidth : 200 , text : Select List and Field }) Implementation The PropertyFieldLabelWithCallout control uses the same implementation as the default PropertyPaneLabel and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldLabelWithCallout"},{"location":"controls/PropertyFieldLabelWithCallout/#propertyfieldlabelwithcallout-control","text":"This control generates a label control with a callout. PropertyFieldLabelWithCallout rendering PropertyFieldLabelWithCallout callout opened","title":"PropertyFieldLabelWithCallout control"},{"location":"controls/PropertyFieldLabelWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldLabelWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldLabelWithCallout ; Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldLabelWithCallout ( fakeProp , { calloutTrigger : CalloutTriggers.Click , key : LabelWithCalloutFieldId , calloutContent : Use dropdowns below to select list and list\\ s field to work with , calloutWidth : 200 , text : Select List and Field })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldLabelWithCallout/#implementation","text":"The PropertyFieldLabelWithCallout control uses the same implementation as the default PropertyPaneLabel and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldLinkWithCallout/","text":"PropertyFieldLinkWithCallout control This control generates a link control with a callout. PropertyFieldLinkWithCallout rendering PropertyFieldLinkWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldLinkWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldLinkWithCallout ; Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldLinkWithCallout ( fakeProp , { calloutTrigger : CalloutTriggers.Click , key : linkWithCalloutFieldId , calloutContent : React.createElement ( p , {}, Click the link to open a new page with Application Terms Conditions ), calloutWidth : 200 , text : Terms Conditions , href : https://github.com/SharePoint/sp-dev-fx-property-controls , target : _blank }) Implementation The PropertyFieldLinkWithCallout control uses the same implementation as the default PropertyPaneLink and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldLinkWithCallout"},{"location":"controls/PropertyFieldLinkWithCallout/#propertyfieldlinkwithcallout-control","text":"This control generates a link control with a callout. PropertyFieldLinkWithCallout rendering PropertyFieldLinkWithCallout callout opened","title":"PropertyFieldLinkWithCallout control"},{"location":"controls/PropertyFieldLinkWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/Callout ; import { PropertyFieldLinkWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldLinkWithCallout ; Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldLinkWithCallout ( fakeProp , { calloutTrigger : CalloutTriggers.Click , key : linkWithCalloutFieldId , calloutContent : React.createElement ( p , {}, Click the link to open a new page with Application Terms Conditions ), calloutWidth : 200 , text : Terms Conditions , href : https://github.com/SharePoint/sp-dev-fx-property-controls , target : _blank })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldLinkWithCallout/#implementation","text":"The PropertyFieldLinkWithCallout control uses the same implementation as the default PropertyPaneLink and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldListPicker/","text":"PropertyFieldListPicker control This control generates a list picker field that can be used in the property pane of your SharePoint Framework web parts. The control can be configured as a single or multi-selection list picker: Single list picker Multi list picker How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldListPicker , PropertyFieldListPickerOrderBy } from @pnp/spfx-property-controls/lib/PropertyFieldListPicker ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { lists : string | string []; // Stores the list ID(s) } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldListPicker ( lists , { label : Select a list , selectedList : this.properties.lists , includeHidden : false , orderBy : PropertyFieldListPickerOrderBy.Title , disabled : false , onPropertyChange : this.onPropertyPaneFieldChanged.bind ( this ), properties : this.properties , context : this.context , onGetErrorMessage : null , deferredValidationTime : 0 , key : listPickerFieldId }) Implementation The PropertyFieldListPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. selectedList string OR string[] no Initial selected list set of the control. baseTemplate number no BaseTemplate ID of the lists or libaries you want to return. includeHidden boolean no Specify if you want to include hidden lists in the list picker. By default this is set to true . orderBy PropertyFieldListPickerOrderBy no Specify the property on which you want to order the retrieve set of lists. multiSelect boolean no Specify if you want to have a single or multi-list picker. By default this is set to false (single list picker). showSelectAll boolean no Specify if you want the Select All checkbox. By default this is set to false (mult-list picker only). selectAllInList boolean no Specify where to show the Select All checkbox. When false (default), checkbox is shown before the label, when true it is shown with the lists (mult-list picker only). selectAllInListLabel string no The label to use for the in list select all checkbox (mult-list picker only). webAbsoluteUrl string no Absolute Web Url of target site (user requires permissions) onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. Enum PropertyFieldListPickerOrderBy Name Description Id Sort by list / library ID Title Sort by list / library title","title":"PropertyFieldListPicker"},{"location":"controls/PropertyFieldListPicker/#propertyfieldlistpicker-control","text":"This control generates a list picker field that can be used in the property pane of your SharePoint Framework web parts. The control can be configured as a single or multi-selection list picker: Single list picker Multi list picker","title":"PropertyFieldListPicker control"},{"location":"controls/PropertyFieldListPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldListPicker , PropertyFieldListPickerOrderBy } from @pnp/spfx-property-controls/lib/PropertyFieldListPicker ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { lists : string | string []; // Stores the list ID(s) } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldListPicker ( lists , { label : Select a list , selectedList : this.properties.lists , includeHidden : false , orderBy : PropertyFieldListPickerOrderBy.Title , disabled : false , onPropertyChange : this.onPropertyPaneFieldChanged.bind ( this ), properties : this.properties , context : this.context , onGetErrorMessage : null , deferredValidationTime : 0 , key : listPickerFieldId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldListPicker/#implementation","text":"The PropertyFieldListPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. selectedList string OR string[] no Initial selected list set of the control. baseTemplate number no BaseTemplate ID of the lists or libaries you want to return. includeHidden boolean no Specify if you want to include hidden lists in the list picker. By default this is set to true . orderBy PropertyFieldListPickerOrderBy no Specify the property on which you want to order the retrieve set of lists. multiSelect boolean no Specify if you want to have a single or multi-list picker. By default this is set to false (single list picker). showSelectAll boolean no Specify if you want the Select All checkbox. By default this is set to false (mult-list picker only). selectAllInList boolean no Specify where to show the Select All checkbox. When false (default), checkbox is shown before the label, when true it is shown with the lists (mult-list picker only). selectAllInListLabel string no The label to use for the in list select all checkbox (mult-list picker only). webAbsoluteUrl string no Absolute Web Url of target site (user requires permissions) onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. Enum PropertyFieldListPickerOrderBy Name Description Id Sort by list / library ID Title Sort by list / library title","title":"Implementation"},{"location":"controls/PropertyFieldMultiSelect/","text":"PropertyFieldMultiSelect control This control generates a dropdown with the possibility of selecting multiple values. Multi-select field rendering How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldMultiSelect } from @pnp/spfx-property-controls/lib/PropertyFieldMultiSelect ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { multiSelect : string []; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldMultiSelect ( multiSelect , { key : multiSelect , label : Multi select field , options : [ { key : EN , text : EN }, { key : FR , text : FR }, { key : NL , text : NL } ], selectedKeys : this.properties.multiSelect }) Implementation The PropertyFieldMultiSelect control uses the same implementation as the default PropertyPaneDropdown control and has the following additional properties: Property Type Required Description selectedKeys string[] OR number[] no Specifies the selected keys. Important : Do not make use of the selectedKey property. This property is inherited from the PropertyPaneDropdown control.","title":"PropertyFieldMultiSelect"},{"location":"controls/PropertyFieldMultiSelect/#propertyfieldmultiselect-control","text":"This control generates a dropdown with the possibility of selecting multiple values. Multi-select field rendering","title":"PropertyFieldMultiSelect control"},{"location":"controls/PropertyFieldMultiSelect/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldMultiSelect } from @pnp/spfx-property-controls/lib/PropertyFieldMultiSelect ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { multiSelect : string []; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldMultiSelect ( multiSelect , { key : multiSelect , label : Multi select field , options : [ { key : EN , text : EN }, { key : FR , text : FR }, { key : NL , text : NL } ], selectedKeys : this.properties.multiSelect })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldMultiSelect/#implementation","text":"The PropertyFieldMultiSelect control uses the same implementation as the default PropertyPaneDropdown control and has the following additional properties: Property Type Required Description selectedKeys string[] OR number[] no Specifies the selected keys. Important : Do not make use of the selectedKey property. This property is inherited from the PropertyPaneDropdown control.","title":"Implementation"},{"location":"controls/PropertyFieldNumber/","text":"PropertyFieldNumber control This control generates an input field for numbers. Text is not allowed as this will result into an invalid input. PropertyFieldNumber example usage How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldNumber } from @pnp/spfx-property-controls/lib/PropertyFieldNumber ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { numberValue : number ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldNumber ( numberValue , { key : numberValue , label : Number value only , description : Number field description , value : this.properties.numberValue , maxValue : 10 , minValue : 1 , disabled : false }) You can also implement your own validation with the onGetErrorMessage property as follows: PropertyFieldNumber ( numberValue , { key : numberValue , label : Number value only , description : Number field description , value : this.properties.numberValue , maxValue : 10 , minValue : 1 , disabled : false , onGetErrorMessage : ( value : number ) = { if ( value % 2 !== 0 ) { return Only even numbers are allowed ; } return ; } }) Implementation The PropertyFieldNumber control can be configured with the following properties: Property Type Required Description key string yes An unique key that indicates the identity of this control. label string yes Property field label displayed on top. description string no The number field input description. placeholder string no Placeholder text to be displayed in the number field. value number no Value to be displayed in the number field. maxValue number no Maximum number that can be inserted. minValue number no Minimum number that can be inserted. ariaLabel string no The aria label for the number field. disabled boolean no Specify if the control needs to be disabled. errorMessage string no If set, this will be displayed as an error message. onGetErrorMessage (value: number) = string no If set, this method is used to get the validation error message and determine whether the input value is valid or not. deferredValidationTime number no Number field will start to validate after users stop typing for deferredValidationTime milliseconds.","title":"PropertyFieldNumber"},{"location":"controls/PropertyFieldNumber/#propertyfieldnumber-control","text":"This control generates an input field for numbers. Text is not allowed as this will result into an invalid input. PropertyFieldNumber example usage","title":"PropertyFieldNumber control"},{"location":"controls/PropertyFieldNumber/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldNumber } from @pnp/spfx-property-controls/lib/PropertyFieldNumber ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { numberValue : number ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldNumber ( numberValue , { key : numberValue , label : Number value only , description : Number field description , value : this.properties.numberValue , maxValue : 10 , minValue : 1 , disabled : false }) You can also implement your own validation with the onGetErrorMessage property as follows: PropertyFieldNumber ( numberValue , { key : numberValue , label : Number value only , description : Number field description , value : this.properties.numberValue , maxValue : 10 , minValue : 1 , disabled : false , onGetErrorMessage : ( value : number ) = { if ( value % 2 !== 0 ) { return Only even numbers are allowed ; } return ; } })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldNumber/#implementation","text":"The PropertyFieldNumber control can be configured with the following properties: Property Type Required Description key string yes An unique key that indicates the identity of this control. label string yes Property field label displayed on top. description string no The number field input description. placeholder string no Placeholder text to be displayed in the number field. value number no Value to be displayed in the number field. maxValue number no Maximum number that can be inserted. minValue number no Minimum number that can be inserted. ariaLabel string no The aria label for the number field. disabled boolean no Specify if the control needs to be disabled. errorMessage string no If set, this will be displayed as an error message. onGetErrorMessage (value: number) = string no If set, this method is used to get the validation error message and determine whether the input value is valid or not. deferredValidationTime number no Number field will start to validate after users stop typing for deferredValidationTime milliseconds.","title":"Implementation"},{"location":"controls/PropertyFieldOrder/","text":"PropertyFieldOrder control This control generates a list that can be easily reordered using drag and drop and/or arrow buttons. PropertyFieldOrder How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldOrder } from @pnp/spfx-property-controls/lib/PropertyFieldOrder ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { orderedItems : Array any ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldOrder ( orderedItems , { key : orderedItems , label : Ordered Items , items : this.properties.orderedItems , properties : this.properties , onPropertyChange : this.onPropertyPaneFieldChanged }) Item Rendering By default, items will render using the toString() method for each element in your items array. This works well for simple arrays of strings, numbers, etc. Object Property When working with an array of objects, you can specify the name of the property to use as the display value by specifying the textProperty property. For instance, for an array of objects like the following: [ { text : Cat , iconName : Cat }, { text : Pig , iconName : Savings }, { text : Human , iconName : Running }, { text : Robot , iconName : Robot }, { text : Dog , iconName : FangBody } ] To prevent every item from showing as [object Object] , you can set the textProperty property to the name of the property you would like to use for display: PropertyFieldOrder ( orderedItems , { key : orderedItems , label : Ordered Items , items : this.properties.orderedItems , textProperty : text , properties : this.properties , onPropertyChange : this.onPropertyPaneFieldChanged }) Custom Rendering You can fully customize how items are rendered by providing the onRenderItem callback function and returning whatever JSX.Element you want. For example, you can define your function in a tsx file like this: import * as React from react ; export const orderedItem = ( item : any , index : number ) : JSX . Element = { return ( span i className = { ms-Icon ms-Icon-- + item . iconName } style = {{ paddingRight : 4px }} / { item . text } /span ); }; You can then import this function into your webpart using the relative path to this file similar to the following: import { orderedItem } from ./components/OrderedItem ; Then you can simply reference it in your PropertyFieldOrder : PropertyFieldOrder ( orderedItems , { key : orderedItems , label : Ordered Items , items : this.properties.orderedItems , onRenderItem : orderedItem , properties : this.properties , onPropertyChange : this.onPropertyPaneFieldChanged }) Implementation The PropertyFieldOrder control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. items Array yes An array of values to reorder. textProperty string no The property to use for display, when undefined, the toString() method of the object is used (ignored when the onRenderItem function is specified) maxHeight number no The maximun height for the items in px (when not set, the control expands as necessary) disabled boolean no Specify if the control needs to be disabled. disableDragAndDrop boolean no When true, drag and drop reordering is disabled (defaults to false) removeArrows boolean no When true, arrow buttons are not displayed (defaults to false) moveUpIconName string no The name of the UI Fabric Font Icon to use for the move up button (defaults to ChevronUpSmall) moveDownIconName string no The name of the UI Fabric Font Icon to use for the move down button (defaults to ChevronDownSmall) onRenderItem function no Optional callback to provide custom rendering of the item (default is simple text based on either item or the property identified in the textProperty) properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control.","title":"PropertyFieldOrder"},{"location":"controls/PropertyFieldOrder/#propertyfieldorder-control","text":"This control generates a list that can be easily reordered using drag and drop and/or arrow buttons. PropertyFieldOrder","title":"PropertyFieldOrder control"},{"location":"controls/PropertyFieldOrder/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldOrder } from @pnp/spfx-property-controls/lib/PropertyFieldOrder ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { orderedItems : Array any ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldOrder ( orderedItems , { key : orderedItems , label : Ordered Items , items : this.properties.orderedItems , properties : this.properties , onPropertyChange : this.onPropertyPaneFieldChanged })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldOrder/#item-rendering","text":"By default, items will render using the toString() method for each element in your items array. This works well for simple arrays of strings, numbers, etc.","title":"Item Rendering"},{"location":"controls/PropertyFieldOrder/#object-property","text":"When working with an array of objects, you can specify the name of the property to use as the display value by specifying the textProperty property. For instance, for an array of objects like the following: [ { text : Cat , iconName : Cat }, { text : Pig , iconName : Savings }, { text : Human , iconName : Running }, { text : Robot , iconName : Robot }, { text : Dog , iconName : FangBody } ] To prevent every item from showing as [object Object] , you can set the textProperty property to the name of the property you would like to use for display: PropertyFieldOrder ( orderedItems , { key : orderedItems , label : Ordered Items , items : this.properties.orderedItems , textProperty : text , properties : this.properties , onPropertyChange : this.onPropertyPaneFieldChanged })","title":"Object Property"},{"location":"controls/PropertyFieldOrder/#custom-rendering","text":"You can fully customize how items are rendered by providing the onRenderItem callback function and returning whatever JSX.Element you want. For example, you can define your function in a tsx file like this: import * as React from react ; export const orderedItem = ( item : any , index : number ) : JSX . Element = { return ( span i className = { ms-Icon ms-Icon-- + item . iconName } style = {{ paddingRight : 4px }} / { item . text } /span ); }; You can then import this function into your webpart using the relative path to this file similar to the following: import { orderedItem } from ./components/OrderedItem ; Then you can simply reference it in your PropertyFieldOrder : PropertyFieldOrder ( orderedItems , { key : orderedItems , label : Ordered Items , items : this.properties.orderedItems , onRenderItem : orderedItem , properties : this.properties , onPropertyChange : this.onPropertyPaneFieldChanged })","title":"Custom Rendering"},{"location":"controls/PropertyFieldOrder/#implementation","text":"The PropertyFieldOrder control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. items Array yes An array of values to reorder. textProperty string no The property to use for display, when undefined, the toString() method of the object is used (ignored when the onRenderItem function is specified) maxHeight number no The maximun height for the items in px (when not set, the control expands as necessary) disabled boolean no Specify if the control needs to be disabled. disableDragAndDrop boolean no When true, drag and drop reordering is disabled (defaults to false) removeArrows boolean no When true, arrow buttons are not displayed (defaults to false) moveUpIconName string no The name of the UI Fabric Font Icon to use for the move up button (defaults to ChevronUpSmall) moveDownIconName string no The name of the UI Fabric Font Icon to use for the move down button (defaults to ChevronDownSmall) onRenderItem function no Optional callback to provide custom rendering of the item (default is simple text based on either item or the property identified in the textProperty) properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control.","title":"Implementation"},{"location":"controls/PropertyFieldPeoplePicker/","text":"PropertyFieldPeoplePicker control This control generates a people / group picker that can be used in the property pane of your SharePoint Framework web parts. Searching for persons Searching for groups Selected people / groups How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldPeoplePicker , PrincipalType } from @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ; Create a new property for your web part, for example: import { IPropertyFieldGroupOrPerson } from @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ; export interface IPropertyControlsTestWebPartProps { people : IPropertyFieldGroupOrPerson []; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldPeoplePicker ( people , { label : PropertyFieldPeoplePicker , initialData : this.properties.people , allowDuplicate : false , principalType : [ PrincipalType . Users , PrincipalType . SharePoint , PrincipalType . Security ], onPropertyChange : this.onPropertyPaneFieldChanged , context : this.context , properties : this.properties , onGetErrorMessage : null , deferredValidationTime : 0 , key : peopleFieldId }) Implementation The PropertyFieldPeoplePicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialData IPropertyFieldGroupOrPerson[] no Intial data to load in the people picker (optional). allowDuplicate boolean no Defines if the People Picker allows to select duplicated users (optional). multiSelect boolean no Define if you want to allow multi user / group selection. (optional, true by default). principalType PrincipalType[] no Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. targetSiteUrl string no Specify the URL of the target site from which you want to retreive the users/groups. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. Interface IPropertyFieldGroupOrPerson Property Type Required Description id string no The ID of the group description string no Group description fullName string yes Users' full name or group display name login string yes Users' login or group provider name (when security group) or group account name (when SharePoint group). email string no Users' email jobTitle string no Users' job title initials string no Users' initials imageUrl string no Users' profile image URL Enum PrincipalType The PrincipalType enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups. Name Description Users To specify if you want to retrieve users. Security To specify if you want to retrieve security groups. SharePoint To specify if you want to retrieve SharePoint groups.","title":"PropertyFieldPeoplePicker"},{"location":"controls/PropertyFieldPeoplePicker/#propertyfieldpeoplepicker-control","text":"This control generates a people / group picker that can be used in the property pane of your SharePoint Framework web parts. Searching for persons Searching for groups Selected people / groups","title":"PropertyFieldPeoplePicker control"},{"location":"controls/PropertyFieldPeoplePicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldPeoplePicker , PrincipalType } from @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ; Create a new property for your web part, for example: import { IPropertyFieldGroupOrPerson } from @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ; export interface IPropertyControlsTestWebPartProps { people : IPropertyFieldGroupOrPerson []; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldPeoplePicker ( people , { label : PropertyFieldPeoplePicker , initialData : this.properties.people , allowDuplicate : false , principalType : [ PrincipalType . Users , PrincipalType . SharePoint , PrincipalType . Security ], onPropertyChange : this.onPropertyPaneFieldChanged , context : this.context , properties : this.properties , onGetErrorMessage : null , deferredValidationTime : 0 , key : peopleFieldId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldPeoplePicker/#implementation","text":"The PropertyFieldPeoplePicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialData IPropertyFieldGroupOrPerson[] no Intial data to load in the people picker (optional). allowDuplicate boolean no Defines if the People Picker allows to select duplicated users (optional). multiSelect boolean no Define if you want to allow multi user / group selection. (optional, true by default). principalType PrincipalType[] no Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. targetSiteUrl string no Specify the URL of the target site from which you want to retreive the users/groups. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. Interface IPropertyFieldGroupOrPerson Property Type Required Description id string no The ID of the group description string no Group description fullName string yes Users' full name or group display name login string yes Users' login or group provider name (when security group) or group account name (when SharePoint group). email string no Users' email jobTitle string no Users' job title initials string no Users' initials imageUrl string no Users' profile image URL Enum PrincipalType The PrincipalType enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups. Name Description Users To specify if you want to retrieve users. Security To specify if you want to retrieve security groups. SharePoint To specify if you want to retrieve SharePoint groups.","title":"Implementation"},{"location":"controls/PropertyFieldSliderWithCallout/","text":"PropertyFieldSliderWithCallout control This control generates a slider control with a callout. PropertyFieldSliderWithCallout rendering PropertyFieldSliderWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldSliderWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldSliderWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { sliderWithCalloutValue : number ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldSliderWithCallout ( sliderWithCalloutValue , { calloutContent : React.createElement ( div , {}, Select background image opacity ), calloutTrigger : CalloutTriggers.Click , calloutWidth : 200 , key : sliderWithCalloutFieldId , label : Opacity , max : 100 , min : 0 , step : 1 , showValue : true , value : this.properties.sliderWithCalloutValue }) Implementation The PropertyFieldSliderWithCallout control uses the same implementation as the default PropertyPaneSlider and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldSliderWithCallout"},{"location":"controls/PropertyFieldSliderWithCallout/#propertyfieldsliderwithcallout-control","text":"This control generates a slider control with a callout. PropertyFieldSliderWithCallout rendering PropertyFieldSliderWithCallout callout opened","title":"PropertyFieldSliderWithCallout control"},{"location":"controls/PropertyFieldSliderWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldSliderWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldSliderWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { sliderWithCalloutValue : number ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldSliderWithCallout ( sliderWithCalloutValue , { calloutContent : React.createElement ( div , {}, Select background image opacity ), calloutTrigger : CalloutTriggers.Click , calloutWidth : 200 , key : sliderWithCalloutFieldId , label : Opacity , max : 100 , min : 0 , step : 1 , showValue : true , value : this.properties.sliderWithCalloutValue })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldSliderWithCallout/#implementation","text":"The PropertyFieldSliderWithCallout control uses the same implementation as the default PropertyPaneSlider and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldSpinButton/","text":"PropertyFieldSpinButton control This control generates a spin button which allows the user to incrementally adjust a value in small steps. PropertyFieldSpinButton initial render PropertyFieldSpinButton increment How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldSpinButton } from @pnp/spfx-property-controls/lib/PropertyFieldSpinButton ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { spinValue : number ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldSpinButton ( spinValue , { label : Spin Value , initialValue : this.properties.spinValue , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , disabled : false , suffix : px , min : 0 , max : 5 , step : 0.25 , decimalPlaces : 2 , incrementIconName : CalculatorAddition , decrementIconName : CalculatorSubtract , key : spinButtonFieldId }) Implementation The PropertyFieldSpinButton control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. initialValue number no Initial number value of the control. step number no The difference between the two adjacent values of the SpinButton (default is 1) min number no The minimum value (no minimum when unspecified) max number no The minimum value (no minimum when unspecified) incrementIconName string no The name of the UI Fabric Font Icon to use for the increment button (defaults to ChevronUpSmall) decrementIconName string no The name of the UI Fabric Font Icon to use for the decrement button (defaults to ChevronDownSmall) suffix string no An optional string value to append to the field display decimalPlaces number no The number of decimal places to show/allow (defaults to 0) properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control.","title":"PropertyFieldSpinButton"},{"location":"controls/PropertyFieldSpinButton/#propertyfieldspinbutton-control","text":"This control generates a spin button which allows the user to incrementally adjust a value in small steps. PropertyFieldSpinButton initial render PropertyFieldSpinButton increment","title":"PropertyFieldSpinButton control"},{"location":"controls/PropertyFieldSpinButton/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldSpinButton } from @pnp/spfx-property-controls/lib/PropertyFieldSpinButton ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { spinValue : number ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldSpinButton ( spinValue , { label : Spin Value , initialValue : this.properties.spinValue , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , disabled : false , suffix : px , min : 0 , max : 5 , step : 0.25 , decimalPlaces : 2 , incrementIconName : CalculatorAddition , decrementIconName : CalculatorSubtract , key : spinButtonFieldId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldSpinButton/#implementation","text":"The PropertyFieldSpinButton control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. initialValue number no Initial number value of the control. step number no The difference between the two adjacent values of the SpinButton (default is 1) min number no The minimum value (no minimum when unspecified) max number no The minimum value (no minimum when unspecified) incrementIconName string no The name of the UI Fabric Font Icon to use for the increment button (defaults to ChevronUpSmall) decrementIconName string no The name of the UI Fabric Font Icon to use for the decrement button (defaults to ChevronDownSmall) suffix string no An optional string value to append to the field display decimalPlaces number no The number of decimal places to show/allow (defaults to 0) properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control.","title":"Implementation"},{"location":"controls/PropertyFieldSwatchColorPicker/","text":"PropertyFieldSwatchColorPicker control This control generates a swatch color picker that you can use inside the property pane. PropertyFieldSwatchColorPicker PropertyFieldColorPicker color selector How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldSwatchColorPicker , PropertyFieldSwatchColorPickerStyle } from @pnp/spfx-property-controls/lib/PropertyFieldSwatchColorPicker ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { color : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldSwatchColorPicker ( color , { label : Swatch Color , selectedColor : this.properties.color , colors : [ { color : #ffb900 , label : Yellow }, { color : #fff100 , label : Light Yellow }, { color : #d83b01 , label : Orange }, { color : #e81123 , label : Red }, { color : #a80000 , label : Dark Red }, { color : #5c005c , label : Dark Magenta }, { color : #e3008c , label : Light Magenta }, { color : #5c2d91 , label : Purple }, { color : #0078d4 , label : Blue }, { color : #00bcf2 , label : Light Blue }, { color : #008272 , label : Teal }, { color : #107c10 , label : Green }, { color : #bad80a , label : Light Green }, { color : #eaeaea }, { color : black , label : Black }, { color : #333333 , label : Neutral }, { color : rgba(102, 102, 102, 0.5) , label : Half Gray } ], onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , key : colorFieldId }) Implementation The PropertyFieldColorPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. selectedColor string or IColor no The CSS-compatible string or an IColor object to describe the initial color color IPropertyFieldSwatchColorOption[] yes The color choices (color can be any CSS-Compatible string, labels are optional and will be shown as a tooltip on the swatch) showAsCircles boolean no When true, color cells are shown as circles. When false (default), color cells are shown as squares columnCount number no The number of cells to show per row (defaults to 6, minimum of 1 and maximum of 8) style PropertyFieldSwatchColorPickerStyle no Determines how the control is displayed (defaults to inline) iconName string no The name of the UI Fabric Font Icon to use for Inline display (defaults to Color) valueAsObject boolean no When true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control. Enum PropertyFieldSwatchColorPickerStyle Name Description Full Display the full control in the property pane Inline Display the color picker inline Value By default, the Swatch Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios. By setting the valueAsObject property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object: Property Type Description str string CSS-compatible string (this is the same value that would normally be returned when valueAsObject is false) hex string Hex value (does not reflect alpha) r number Red g number Green b number Blue h number Hue s number Saturation v number Value","title":"PropertyFieldSwatchColorPicker"},{"location":"controls/PropertyFieldSwatchColorPicker/#propertyfieldswatchcolorpicker-control","text":"This control generates a swatch color picker that you can use inside the property pane. PropertyFieldSwatchColorPicker PropertyFieldColorPicker color selector","title":"PropertyFieldSwatchColorPicker control"},{"location":"controls/PropertyFieldSwatchColorPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldSwatchColorPicker , PropertyFieldSwatchColorPickerStyle } from @pnp/spfx-property-controls/lib/PropertyFieldSwatchColorPicker ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { color : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldSwatchColorPicker ( color , { label : Swatch Color , selectedColor : this.properties.color , colors : [ { color : #ffb900 , label : Yellow }, { color : #fff100 , label : Light Yellow }, { color : #d83b01 , label : Orange }, { color : #e81123 , label : Red }, { color : #a80000 , label : Dark Red }, { color : #5c005c , label : Dark Magenta }, { color : #e3008c , label : Light Magenta }, { color : #5c2d91 , label : Purple }, { color : #0078d4 , label : Blue }, { color : #00bcf2 , label : Light Blue }, { color : #008272 , label : Teal }, { color : #107c10 , label : Green }, { color : #bad80a , label : Light Green }, { color : #eaeaea }, { color : black , label : Black }, { color : #333333 , label : Neutral }, { color : rgba(102, 102, 102, 0.5) , label : Half Gray } ], onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , key : colorFieldId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldSwatchColorPicker/#implementation","text":"The PropertyFieldColorPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. disabled boolean no Specify if the control needs to be disabled. selectedColor string or IColor no The CSS-compatible string or an IColor object to describe the initial color color IPropertyFieldSwatchColorOption[] yes The color choices (color can be any CSS-Compatible string, labels are optional and will be shown as a tooltip on the swatch) showAsCircles boolean no When true, color cells are shown as circles. When false (default), color cells are shown as squares columnCount number no The number of cells to show per row (defaults to 6, minimum of 1 and maximum of 8) style PropertyFieldSwatchColorPickerStyle no Determines how the control is displayed (defaults to inline) iconName string no The name of the UI Fabric Font Icon to use for Inline display (defaults to Color) valueAsObject boolean no When true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string properties any yes Parent web part properties, this object is use to update the property value. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. key string yes An unique key that indicates the identity of this control. Enum PropertyFieldSwatchColorPickerStyle Name Description Full Display the full control in the property pane Inline Display the color picker inline","title":"Implementation"},{"location":"controls/PropertyFieldSwatchColorPicker/#value","text":"By default, the Swatch Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios. By setting the valueAsObject property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object: Property Type Description str string CSS-compatible string (this is the same value that would normally be returned when valueAsObject is false) hex string Hex value (does not reflect alpha) r number Red g number Green b number Blue h number Hue s number Saturation v number Value","title":"Value"},{"location":"controls/PropertyFieldTermPicker/","text":"PropertyFieldTermPicker control This control generates a term picker that can be used in the property pane of your SharePoint Framework web parts. Disclaimer : This control makes use of the ProcessQuery API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available. Empty term picker Selecting terms Selected terms in the panel Empty term picker Term picker: Auto Complete Limit the term set to a specific group or termset How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldTermPicker } from @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ; Create a new property for your web part, for example: import { IPickerTerms } from @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ; export interface IPropertyControlsTestWebPartProps { terms : IPickerTerms ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldTermPicker ( terms , { label : Select terms , panelTitle : Select terms , initialValues : this.properties.terms , allowMultipleSelections : true , excludeSystemGroup : false , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , context : this.context , onGetErrorMessage : null , deferredValidationTime : 0 , limitByGroupNameOrID : People , limitByTermsetNameOrID : Location , key : termSetsPickerFieldId }) Implementation The PropertyFieldTermPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. panelTitle string yes TermSet Picker Panel title. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. excludeSystemGroup boolean no Indicator to define if the system Groups are exclude. Default is false. limitByGroupNameOrID string no Limit the term sets that can be used by the group name or ID. limitByTermsetNameOrID string no Limit the terms that can be picked by the Term Set name or ID. hideTermStoreName boolean no Specifies if you want to show or hide the term store name from the panel. isTermSetSelectable boolean no Specify if the term set itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. resolveDelay number no The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. if a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called. Default is 500. Interface IPickerTerms Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent term set of the term termSetName string no The Name of the parent term set of the term Differences between PropertyFieldEnterpriseTermPicker and PropertyFieldTermPicker PropertyFieldEnterpriseTermPicker is implemented to be used for \"enterprise\" Term Stores with large amount of groups, terms sets, and terms. It loads term sets and terms on demand - only at the moment when specified group or term set has been expanded in the Term Store Tree. To implement on-demand loading PropertyFieldEnterpriseTermPicker uses @pnp/sp-taxonomy module from @pnp/pnpjs library. It increases the size of a bundle when the control is used. Additionaly, PropertyFieldEnterpriseTermPicker allows to request labels for the terms in the picker. PropertyFieldTermPicker loads all the groups and term sets from the term service during the initial request. This approach fits most of the scenarios with small and medium number of objects in a term store. Besides that, PropertyFieldTermPicker does not use any additional libraries or modules to retrieve data from the taxonomy service which makes it much more lightweight option in comparison with PropertyFieldEnterpriseTermPicker . See PropertyFieldTermPicker for implementation details. We recommend to use PropertyFieldTermPicker control if you don't need on-demand loading or term labels .","title":"PropertyFieldTermPicker"},{"location":"controls/PropertyFieldTermPicker/#propertyfieldtermpicker-control","text":"This control generates a term picker that can be used in the property pane of your SharePoint Framework web parts. Disclaimer : This control makes use of the ProcessQuery API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available. Empty term picker Selecting terms Selected terms in the panel Empty term picker Term picker: Auto Complete Limit the term set to a specific group or termset","title":"PropertyFieldTermPicker control"},{"location":"controls/PropertyFieldTermPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyFieldTermPicker } from @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ; Create a new property for your web part, for example: import { IPickerTerms } from @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ; export interface IPropertyControlsTestWebPartProps { terms : IPickerTerms ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldTermPicker ( terms , { label : Select terms , panelTitle : Select terms , initialValues : this.properties.terms , allowMultipleSelections : true , excludeSystemGroup : false , onPropertyChange : this.onPropertyPaneFieldChanged , properties : this.properties , context : this.context , onGetErrorMessage : null , deferredValidationTime : 0 , limitByGroupNameOrID : People , limitByTermsetNameOrID : Location , key : termSetsPickerFieldId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldTermPicker/#implementation","text":"The PropertyFieldTermPicker control can be configured with the following properties: Property Type Required Description label string yes Property field label displayed on top. panelTitle string yes TermSet Picker Panel title. disabled boolean no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. excludeSystemGroup boolean no Indicator to define if the system Groups are exclude. Default is false. limitByGroupNameOrID string no Limit the term sets that can be used by the group name or ID. limitByTermsetNameOrID string no Limit the terms that can be picked by the Term Set name or ID. hideTermStoreName boolean no Specifies if you want to show or hide the term store name from the panel. isTermSetSelectable boolean no Specify if the term set itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. onPropertyChange function yes Defines a onPropertyChange function to raise when the date gets changed. properties any yes Parent web part properties, this object is use to update the property value. key string yes An unique key that indicates the identity of this control. onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. deferredValidationTime number no Control will start to validate after users stop typing for deferredValidationTime milliseconds. Default value is 200. resolveDelay number no The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. if a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called. Default is 500. Interface IPickerTerms Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent term set of the term termSetName string no The Name of the parent term set of the term","title":"Implementation"},{"location":"controls/PropertyFieldTermPicker/#differences-between-propertyfieldenterprisetermpicker-and-propertyfieldtermpicker","text":"PropertyFieldEnterpriseTermPicker is implemented to be used for \"enterprise\" Term Stores with large amount of groups, terms sets, and terms. It loads term sets and terms on demand - only at the moment when specified group or term set has been expanded in the Term Store Tree. To implement on-demand loading PropertyFieldEnterpriseTermPicker uses @pnp/sp-taxonomy module from @pnp/pnpjs library. It increases the size of a bundle when the control is used. Additionaly, PropertyFieldEnterpriseTermPicker allows to request labels for the terms in the picker. PropertyFieldTermPicker loads all the groups and term sets from the term service during the initial request. This approach fits most of the scenarios with small and medium number of objects in a term store. Besides that, PropertyFieldTermPicker does not use any additional libraries or modules to retrieve data from the taxonomy service which makes it much more lightweight option in comparison with PropertyFieldEnterpriseTermPicker . See PropertyFieldTermPicker for implementation details. We recommend to use PropertyFieldTermPicker control if you don't need on-demand loading or term labels .","title":"Differences between PropertyFieldEnterpriseTermPicker and PropertyFieldTermPicker"},{"location":"controls/PropertyFieldTextWithCallout/","text":"PropertyFieldTextWithCallout control This control generates a text field control with a callout. PropertyFieldTextWithCallout rendering PropertyFieldTextWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldTextWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldTextWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { textInfoHeaderValue : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldTextWithCallout ( textInfoHeaderValue , { calloutTrigger : CalloutTriggers.Hover , key : textInfoHeaderFieldId , label : Describe your PnP passion with few words , calloutContent : React.createElement ( span , {}, You can describe your passion with such words as strong, cosmic, all-absorbing, etc. ), calloutWidth : 150 , value : this.properties.textInfoHeaderValue }) Implementation The PropertyFieldTextWithCallout control uses the same implementation as the default PropertyPaneTextField and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldTextWithCallout"},{"location":"controls/PropertyFieldTextWithCallout/#propertyfieldtextwithcallout-control","text":"This control generates a text field control with a callout. PropertyFieldTextWithCallout rendering PropertyFieldTextWithCallout callout opened","title":"PropertyFieldTextWithCallout control"},{"location":"controls/PropertyFieldTextWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldTextWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldTextWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { textInfoHeaderValue : string ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldTextWithCallout ( textInfoHeaderValue , { calloutTrigger : CalloutTriggers.Hover , key : textInfoHeaderFieldId , label : Describe your PnP passion with few words , calloutContent : React.createElement ( span , {}, You can describe your passion with such words as strong, cosmic, all-absorbing, etc. ), calloutWidth : 150 , value : this.properties.textInfoHeaderValue })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldTextWithCallout/#implementation","text":"The PropertyFieldTextWithCallout control uses the same implementation as the default PropertyPaneTextField and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyFieldToggleWithCallout/","text":"PropertyFieldToggleWithCallout control This control generates a toggle control with a callout. PropertyFieldToggleWithCallout rendering PropertyFieldToggleWithCallout callout opened How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldToggleWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldToggleWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { toggleInfoHeaderValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldToggleWithCallout ( toggleInfoHeaderValue , { calloutTrigger : CalloutTriggers.Click , key : toggleInfoHeaderFieldId , label : Turn on the PnP feature , calloutContent : React.createElement ( p , {}, With this control you can enable or disable the PnP features in your web part ), onText : ON , offText : OFF , checked : this.properties.toggleInfoHeaderValue }) Implementation The PropertyFieldToggleWithCallout control uses the same implementation as the default PropertyPaneToggle and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"PropertyFieldToggleWithCallout"},{"location":"controls/PropertyFieldToggleWithCallout/#propertyfieldtogglewithcallout-control","text":"This control generates a toggle control with a callout. PropertyFieldToggleWithCallout rendering PropertyFieldToggleWithCallout callout opened","title":"PropertyFieldToggleWithCallout control"},{"location":"controls/PropertyFieldToggleWithCallout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { CalloutTriggers } from @pnp/spfx-property-controls/lib/PropertyFieldHeader ; import { PropertyFieldToggleWithCallout } from @pnp/spfx-property-controls/lib/PropertyFieldToggleWithCallout ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { toggleInfoHeaderValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyFieldToggleWithCallout ( toggleInfoHeaderValue , { calloutTrigger : CalloutTriggers.Click , key : toggleInfoHeaderFieldId , label : Turn on the PnP feature , calloutContent : React.createElement ( p , {}, With this control you can enable or disable the PnP features in your web part ), onText : ON , offText : OFF , checked : this.properties.toggleInfoHeaderValue })","title":"How to use this control in your solutions"},{"location":"controls/PropertyFieldToggleWithCallout/#implementation","text":"The PropertyFieldToggleWithCallout control uses the same implementation as the default PropertyPaneToggle and has the following additional properties: Property Type Required Description calloutContent React.ReactNode no Callout content - any HTML calloutWidth number no Custom width for callout including borders. If value is 0, no width is applied. calloutTrigger CalloutTriggers no Event to show the callout gapSpace number no The gap between the callout and the target Enum CalloutTriggers Name Description Click Shows the callout when you hover over the icon Hover Shows the callout when you click on the icon","title":"Implementation"},{"location":"controls/PropertyPanePropertyEditor/","text":"PropertyPanePropertyEditor control This control allows the user to edit the webpart properties in JSON. It can also be used to export properties of a webpart and later import them again to a similar webpart on a different page. If the user clicks 'export' a file named 'webpartproperties.json' is presented for download. The same file can be uploaded to a new instance of the same webpart on for instance another site or page. PropertyPanePropertyEditor rendering in property pane PropertyPanePropertyEditor rendering when expanded How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyPanePropertyEditor } from @pnp/spfx-property-controls/lib/PropertyPanePropertyEditor ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { toggleInfoHeaderValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyPanePropertyEditor ({ webpart : this , key : propertyEditor }) Implementation The PropertyEditor control has the following properties: Property Type Required Description webpart BaseClientSideWebPart yes The webpart, which is in principle the current webpart, of which you want to be able to edit the properties from","title":"PropertyPanePropertyEditor"},{"location":"controls/PropertyPanePropertyEditor/#propertypanepropertyeditor-control","text":"This control allows the user to edit the webpart properties in JSON. It can also be used to export properties of a webpart and later import them again to a similar webpart on a different page. If the user clicks 'export' a file named 'webpartproperties.json' is presented for download. The same file can be uploaded to a new instance of the same webpart on for instance another site or page. PropertyPanePropertyEditor rendering in property pane PropertyPanePropertyEditor rendering when expanded","title":"PropertyPanePropertyEditor control"},{"location":"controls/PropertyPanePropertyEditor/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyPanePropertyEditor } from @pnp/spfx-property-controls/lib/PropertyPanePropertyEditor ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { toggleInfoHeaderValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyPanePropertyEditor ({ webpart : this , key : propertyEditor })","title":"How to use this control in your solutions"},{"location":"controls/PropertyPanePropertyEditor/#implementation","text":"The PropertyEditor control has the following properties: Property Type Required Description webpart BaseClientSideWebPart yes The webpart, which is in principle the current webpart, of which you want to be able to edit the properties from","title":"Implementation"},{"location":"controls/PropertyPaneWebPartInformation/","text":"PropertyPaneWebPartInformation control This control allows you to specify a description, a 'read more' link, and an optional embedded video PropertyPaneWebPartInformation rendering How to use this control in your solutions Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyWebPartInformation } from @pnp/spfx-property-controls/lib/PropertyPaneWebPartInformation ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { toggleInfoHeaderValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyPaneWebPartInformation ({ description : `This is a strong demo webpart /strong , used to demonstrate all the a href= https://aka.ms/sppnp PnP /a property controls` , moreInfoLink : `https://sharepoint.github.io/sp-dev-fx-property-controls/` , videoProperties : { embedLink : `https://www.youtube.com/embed/d_9o3tQ90zo` , properties : { allowFullScreen : true } }, key : webPartInfoId }) Implementation The PropertyPaneWebPartInformation control has the following properties: Property Type Required Description description string yes Description content - any HTML moreInfoLink string no A URL providing optional additional information moreInfoLinkTarget string no An optional target for the link. Defaults to '_blank' videoProperties IVideoEmbedProperties no A video properties object specifying an optionally embedded video Class IVideoEmbedProperties Property Type Required Description embedLink string yes A link to an embeddable video. The video will be embedded in an iframe. See the example above for details width number no optional width of the iframe height number no optional height of the iframe properties object no additional properties to set on the iframe element","title":"PropertyPaneWebPartInformation"},{"location":"controls/PropertyPaneWebPartInformation/#propertypanewebpartinformation-control","text":"This control allows you to specify a description, a 'read more' link, and an optional embedded video PropertyPaneWebPartInformation rendering","title":"PropertyPaneWebPartInformation control"},{"location":"controls/PropertyPaneWebPartInformation/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-property-controls dependency. Check out The getting started page for more information about installing the dependency. Import the following modules to your component: import { PropertyWebPartInformation } from @pnp/spfx-property-controls/lib/PropertyPaneWebPartInformation ; Create a new property for your web part, for example: export interface IPropertyControlsTestWebPartProps { toggleInfoHeaderValue : boolean ; } Add the custom property control to the groupFields of the web part property pane configuration: PropertyPaneWebPartInformation ({ description : `This is a strong demo webpart /strong , used to demonstrate all the a href= https://aka.ms/sppnp PnP /a property controls` , moreInfoLink : `https://sharepoint.github.io/sp-dev-fx-property-controls/` , videoProperties : { embedLink : `https://www.youtube.com/embed/d_9o3tQ90zo` , properties : { allowFullScreen : true } }, key : webPartInfoId })","title":"How to use this control in your solutions"},{"location":"controls/PropertyPaneWebPartInformation/#implementation","text":"The PropertyPaneWebPartInformation control has the following properties: Property Type Required Description description string yes Description content - any HTML moreInfoLink string no A URL providing optional additional information moreInfoLinkTarget string no An optional target for the link. Defaults to '_blank' videoProperties IVideoEmbedProperties no A video properties object specifying an optionally embedded video Class IVideoEmbedProperties Property Type Required Description embedLink string yes A link to an embeddable video. The video will be embedded in an iframe. See the example above for details width number no optional width of the iframe height number no optional height of the iframe properties object no additional properties to set on the iframe element","title":"Implementation"}]}