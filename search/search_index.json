{
    "docs": [
        {
            "location": "/", 
            "text": "Reusable property pane controls for the SharePoint Framework solutions \n\n\nThis repository provides developers with a set of reusable property pane controls that can be used in their SharePoint Framework (SPFx) solutions.\n\n\n\n\nAttention\n\n\nThe controls project has a minimal dependency on SharePoint Framework version \n1.3.0\n. Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version \n1.1.0\n will get used.\n\n\n\n\nGetting started\n\n\nInstallation\n\n\nTo get started you have to install the following dependency to your project: \n@pnp/spfx-property-controls\n.\n\n\nEnter the following command to install the dependency to your project:\n\n\nnpm install @pnp/spfx-property-controls --save --save-exact\n\n\n\n\n\nConfiguration\n\n\nOnce the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the \nconfig/config.json\n and adding the following line to the \nlocalizedResources\n property:\n\n\nPropertyControlStrings\n:\n \nnode_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js\n\n\n\n\n\n\nControls\n\n\nThe following controls are currently available:\n\n\n\n\nPropertyFieldColorPicker\n (Property pane color picker)\n\n\nPropertyFieldDateTimePicker\n (Property pane date and time selector)\n\n\nPropertyFieldListPicker\n (Property pane list selector)\n\n\nPropertyFieldPeoplePicker\n (Property pane people / group selector)\n\n\nPropertyFieldSpinButton\n (Property pane spin button)\n\n\nPropertyFieldTermPicker\n (Property pane managed metadata term selector)\n\n\nPropertyFieldMultiSelect\n (Property pane field which allows multi-value selection)\n\n\nPropertyFieldNumber\n (Property pane field which allows only number values)\n\n\n\n\nThe following controls are extended controls that show a callout next to the label\n\n\n\n\nPropertyFieldButtonWithCallout\n (Property button field with callout)\n\n\nPropertyFieldCheckboxWithCallout\n (Property checkbox field with callout)\n\n\nPropertyFieldChoiceGroupWithCallout\n (Property choice group field with callout)\n\n\nPropertyFieldDropdownWithCallout\n (Property dropdown field with callout)\n\n\nPropertyFieldLabelWithCallout\n (Property checkbox field with callout)\n\n\nPropertyFieldLinkWithCallout\n (Property checkbox field with callout)\n\n\nPropertyFieldSliderWithCallout\n (Property slider field with callout)\n\n\nPropertyFieldTextWithCallout\n (Property text field with callout)\n\n\nPropertyFieldToggleWithCallout\n (Property toggle field with callout)", 
            "title": "Home"
        }, 
        {
            "location": "/#reusable-property-pane-controls-for-the-sharepoint-framework-solutions", 
            "text": "This repository provides developers with a set of reusable property pane controls that can be used in their SharePoint Framework (SPFx) solutions.   Attention  The controls project has a minimal dependency on SharePoint Framework version  1.3.0 . Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version  1.1.0  will get used.", 
            "title": "Reusable property pane controls for the SharePoint Framework solutions"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/#installation", 
            "text": "To get started you have to install the following dependency to your project:  @pnp/spfx-property-controls .  Enter the following command to install the dependency to your project:  npm install @pnp/spfx-property-controls --save --save-exact", 
            "title": "Installation"
        }, 
        {
            "location": "/#configuration", 
            "text": "Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the  config/config.json  and adding the following line to the  localizedResources  property:  PropertyControlStrings :   node_modules/@pnp/spfx-property-controls/lib/loc/{locale}.js", 
            "title": "Configuration"
        }, 
        {
            "location": "/#controls", 
            "text": "The following controls are currently available:   PropertyFieldColorPicker  (Property pane color picker)  PropertyFieldDateTimePicker  (Property pane date and time selector)  PropertyFieldListPicker  (Property pane list selector)  PropertyFieldPeoplePicker  (Property pane people / group selector)  PropertyFieldSpinButton  (Property pane spin button)  PropertyFieldTermPicker  (Property pane managed metadata term selector)  PropertyFieldMultiSelect  (Property pane field which allows multi-value selection)  PropertyFieldNumber  (Property pane field which allows only number values)   The following controls are extended controls that show a callout next to the label   PropertyFieldButtonWithCallout  (Property button field with callout)  PropertyFieldCheckboxWithCallout  (Property checkbox field with callout)  PropertyFieldChoiceGroupWithCallout  (Property choice group field with callout)  PropertyFieldDropdownWithCallout  (Property dropdown field with callout)  PropertyFieldLabelWithCallout  (Property checkbox field with callout)  PropertyFieldLinkWithCallout  (Property checkbox field with callout)  PropertyFieldSliderWithCallout  (Property slider field with callout)  PropertyFieldTextWithCallout  (Property text field with callout)  PropertyFieldToggleWithCallout  (Property toggle field with callout)", 
            "title": "Controls"
        }, 
        {
            "location": "/controls/PropertyFieldCollectionData/", 
            "text": "PropertyFieldCollectionData control\n\n\nThis property field control gives you the ability to insert a list / collection data which can be used in your web part. For example: you want to specify multiple locations for showing a weather information.\n\n\nThe control allows you to specify multiple data types like: string, number, boolean, or dropdown.\n\n\nPropertyFieldCollectionData\n\n\n\n\nThe type of data you get returned depends on the fields you defined. For the example above, the data looks like this:\n\n\n[\n\n  \n{\nTitle\n:\nPerson\n,\nLastname\n:\n1\n,\nAge\n:\n42\n,\nCity\n:\nhelsinki\n,\nSign\n:\ntrue\n},\n\n  \n{\nTitle\n:\nPerson\n,\nLastname\n:\n2\n,\nAge\n:\n42\n,\nCity\n:\nhelsinki\n,\nSign\n:\ntrue\n}\n\n\n]\n\n\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldCollectionData\n,\n \nCustomCollectionFieldType\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldCollectionData\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ncollectionData\n: \nany\n[];\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldCollectionData\n(\ncollectionData\n,\n \n{\n\n  \nkey\n:\n \ncollectionData\n,\n\n  \nlabel\n:\n \nCollection data\n,\n\n  \npanelHeader\n:\n \nCollection data panel header\n,\n\n  \nmanageBtnLabel\n:\n \nManage collection data\n,\n\n  \nvalue\n: \nthis.properties.collectionData\n,\n\n  \nfields\n:\n \n[\n\n    \n{\n\n      \nid\n:\n \nTitle\n,\n\n      \ntitle\n:\n \nFirstname\n,\n\n      \ntype\n: \nCustomCollectionFieldType.string\n,\n\n      \nrequired\n: \ntrue\n\n    \n},\n\n    \n{\n\n      \nid\n:\n \nLastname\n,\n\n      \ntitle\n:\n \nLastname\n,\n\n      \ntype\n: \nCustomCollectionFieldType.string\n\n    \n},\n\n    \n{\n\n      \nid\n:\n \nAge\n,\n\n      \ntitle\n:\n \nAge\n,\n\n      \ntype\n: \nCustomCollectionFieldType.number\n,\n\n      \nrequired\n: \ntrue\n\n    \n},\n\n    \n{\n\n      \nid\n:\n \nCity\n,\n\n      \ntitle\n:\n \nFavorite city\n,\n\n      \ntype\n: \nCustomCollectionFieldType.dropdown\n,\n\n      \noptions\n:\n \n[\n\n        \n{\n\n          \nkey\n:\n \nantwerp\n,\n\n          \ntext\n:\n \nAntwerp\n\n        \n},\n\n        \n{\n\n          \nkey\n:\n \nhelsinki\n,\n\n          \ntext\n:\n \nHelsinki\n\n        \n},\n\n        \n{\n\n          \nkey\n:\n \nmontreal\n,\n\n          \ntext\n:\n \nMontreal\n\n        \n}\n\n      \n],\n\n      \nrequired\n: \ntrue\n\n    \n},\n\n    \n{\n\n      \nid\n:\n \nSign\n,\n\n      \ntitle\n:\n \nSigned\n,\n\n      \ntype\n: \nCustomCollectionFieldType.boolean\n\n    \n}\n\n  \n],\n\n  \ndisabled\n: \nfalse\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldCollectionData\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\npanelHeader\n\n\nstring\n\n\nyes\n\n\nLabel to be used as the header in the panel.\n\n\n\n\n\n\nmanageBtnLabel\n\n\nstring\n\n\nyes\n\n\nLabel of the button to open the panel.\n\n\n\n\n\n\nfields\n\n\nICustomCollectionField[]\n\n\nyes\n\n\nThe fields to be used for the list of collection data.\n\n\n\n\n\n\nvalue\n\n\nstring\n\n\nyes\n\n\nThe collection data value.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control is disabled.\n\n\n\n\n\n\n\n\nInterface \nICustomCollectionField\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\nyes\n\n\nID of the field.\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nyes\n\n\nTitle of the field. This will be used for the label in the table.\n\n\n\n\n\n\ntype\n\n\nyes\n\n\nCustomCollectionFieldType\n\n\nSpecifies the type of field to render.\n\n\n\n\n\n\nrequired\n\n\nno\n\n\nboolean\n\n\nSpecify if the field is required.\n\n\n\n\n\n\noptions\n\n\nno\n\n\nIDropdownOption[]\n\n\nDropdown options. Only necessary when dropdown type is used.\n\n\n\n\n\n\n\n\nEnum \nCustomCollectionFieldType\n\n\n\n\n\n\n\n\nType\n\n\n\n\n\n\n\n\n\n\nstring\n\n\n\n\n\n\nnumber\n\n\n\n\n\n\nboolean\n\n\n\n\n\n\ndropdown", 
            "title": "PropertyFieldCollectionData"
        }, 
        {
            "location": "/controls/PropertyFieldCollectionData/#propertyfieldcollectiondata-control", 
            "text": "This property field control gives you the ability to insert a list / collection data which can be used in your web part. For example: you want to specify multiple locations for showing a weather information.  The control allows you to specify multiple data types like: string, number, boolean, or dropdown.  PropertyFieldCollectionData   The type of data you get returned depends on the fields you defined. For the example above, the data looks like this:  [ \n   { Title : Person , Lastname : 1 , Age : 42 , City : helsinki , Sign : true }, \n   { Title : Person , Lastname : 2 , Age : 42 , City : helsinki , Sign : true }  ]", 
            "title": "PropertyFieldCollectionData control"
        }, 
        {
            "location": "/controls/PropertyFieldCollectionData/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldCollectionData ,   CustomCollectionFieldType   }   from   @pnp/spfx-property-controls/lib/PropertyFieldCollectionData ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   collectionData :  any [];  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldCollectionData ( collectionData ,   { \n   key :   collectionData , \n   label :   Collection data , \n   panelHeader :   Collection data panel header , \n   manageBtnLabel :   Manage collection data , \n   value :  this.properties.collectionData , \n   fields :   [ \n     { \n       id :   Title , \n       title :   Firstname , \n       type :  CustomCollectionFieldType.string , \n       required :  true \n     }, \n     { \n       id :   Lastname , \n       title :   Lastname , \n       type :  CustomCollectionFieldType.string \n     }, \n     { \n       id :   Age , \n       title :   Age , \n       type :  CustomCollectionFieldType.number , \n       required :  true \n     }, \n     { \n       id :   City , \n       title :   Favorite city , \n       type :  CustomCollectionFieldType.dropdown , \n       options :   [ \n         { \n           key :   antwerp , \n           text :   Antwerp \n         }, \n         { \n           key :   helsinki , \n           text :   Helsinki \n         }, \n         { \n           key :   montreal , \n           text :   Montreal \n         } \n       ], \n       required :  true \n     }, \n     { \n       id :   Sign , \n       title :   Signed , \n       type :  CustomCollectionFieldType.boolean \n     } \n   ], \n   disabled :  false  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldCollectionData/#implementation", 
            "text": "The  PropertyFieldCollectionData  control can be configured with the following properties:     Property  Type  Required  Description      key  string  yes  An unique key that indicates the identity of this control.    label  string  yes  Property field label displayed on top.    panelHeader  string  yes  Label to be used as the header in the panel.    manageBtnLabel  string  yes  Label of the button to open the panel.    fields  ICustomCollectionField[]  yes  The fields to be used for the list of collection data.    value  string  yes  The collection data value.    disabled  boolean  no  Specify if the control is disabled.     Interface  ICustomCollectionField     Property  Type  Required  Description      id  string  yes  ID of the field.    title  string  yes  Title of the field. This will be used for the label in the table.    type  yes  CustomCollectionFieldType  Specifies the type of field to render.    required  no  boolean  Specify if the field is required.    options  no  IDropdownOption[]  Dropdown options. Only necessary when dropdown type is used.     Enum  CustomCollectionFieldType     Type      string    number    boolean    dropdown", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/", 
            "text": "PropertyFieldColorPicker control\n\n\nThis control generates a color picker that you can use inside the property pane.\n\n\nPropertyFieldColorPicker\n\n\n\n\nPropertyFieldColorPicker color selector\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldColorPicker\n,\n \nPropertyFieldColorPickerStyle\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldColorPicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ncolor\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldColorPicker\n(\ncolor\n,\n \n{\n\n  \nlabel\n:\n \nColor\n,\n\n  \nselectedColor\n: \nthis.properties.color\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ndisabled\n: \nfalse\n,\n\n  \nalphaSliderHidden\n: \nfalse\n,\n\n  \nstyle\n: \nPropertyFieldColorPickerStyle.Full\n,\n\n  \niconName\n:\n \nPrecipitation\n,\n\n  \nkey\n:\n \ncolorFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldColorPicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\nselectedColor\n\n\nstring or IColor\n\n\nno\n\n\nThe CSS-compatible string or an IColor object to describe the initial color\n\n\n\n\n\n\nalphaSliderHidden\n\n\nboolean\n\n\nno\n\n\nWhen true, the alpha slider control is hidden\n\n\n\n\n\n\nstyle\n\n\nPropertyFieldColorPickerStyle\n\n\nno\n\n\nDetermines how the control is displayed (defaults to inline)\n\n\n\n\n\n\niconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for Inline display (defaults to Color)\n\n\n\n\n\n\nvalueAsObject\n\n\nboolean\n\n\nno\n\n\nWhen true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\n\n\nEnum \nPropertyFieldColorPickerStyle\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFull\n\n\nDisplay the full control in the property pane\n\n\n\n\n\n\nInline\n\n\nDisplay the color picker inline\n\n\n\n\n\n\n\n\nValue\n\n\nBy default, the Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios.\n\n\nBy setting the \nvalueAsObject\n property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nstring\n\n\nCSS-compatible string (this is the same value that would normally be returned when \nvalueAsObject\n is false)\n\n\n\n\n\n\nhex\n\n\nstring\n\n\nHex value (does not reflect alpha)\n\n\n\n\n\n\nr\n\n\nnumber\n\n\nRed\n\n\n\n\n\n\ng\n\n\nnumber\n\n\nGreen\n\n\n\n\n\n\nb\n\n\nnumber\n\n\nBlue\n\n\n\n\n\n\nh\n\n\nnumber\n\n\nHue\n\n\n\n\n\n\ns\n\n\nnumber\n\n\nSaturation\n\n\n\n\n\n\nv\n\n\nnumber\n\n\nValue", 
            "title": "PropertyFieldColorPicker"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/#propertyfieldcolorpicker-control", 
            "text": "This control generates a color picker that you can use inside the property pane.  PropertyFieldColorPicker   PropertyFieldColorPicker color selector", 
            "title": "PropertyFieldColorPicker control"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldColorPicker ,   PropertyFieldColorPickerStyle   }   from   @pnp/spfx-property-controls/lib/PropertyFieldColorPicker ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   color :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldColorPicker ( color ,   { \n   label :   Color , \n   selectedColor :  this.properties.color , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   disabled :  false , \n   alphaSliderHidden :  false , \n   style :  PropertyFieldColorPickerStyle.Full , \n   iconName :   Precipitation , \n   key :   colorFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/#implementation", 
            "text": "The  PropertyFieldColorPicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    selectedColor  string or IColor  no  The CSS-compatible string or an IColor object to describe the initial color    alphaSliderHidden  boolean  no  When true, the alpha slider control is hidden    style  PropertyFieldColorPickerStyle  no  Determines how the control is displayed (defaults to inline)    iconName  string  no  The name of the UI Fabric Font Icon to use for Inline display (defaults to Color)    valueAsObject  boolean  no  When true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string    properties  any  yes  Parent web part properties, this object is use to update the property value.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    key  string  yes  An unique key that indicates the identity of this control.     Enum  PropertyFieldColorPickerStyle     Name  Description      Full  Display the full control in the property pane    Inline  Display the color picker inline", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldColorPicker/#value", 
            "text": "By default, the Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios.  By setting the  valueAsObject  property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object:     Property  Type  Description      str  string  CSS-compatible string (this is the same value that would normally be returned when  valueAsObject  is false)    hex  string  Hex value (does not reflect alpha)    r  number  Red    g  number  Green    b  number  Blue    h  number  Hue    s  number  Saturation    v  number  Value", 
            "title": "Value"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/", 
            "text": "PropertyFieldDateTimePicker control\n\n\nThis control generates a Date and Time picker field that can be used in the property pane of your SharePoint Framework web parts.\n\n\nThe control can be configured to be date only or date and time.\n\n\nDate only\n\n\n\n\nDate picker\n\n\n\n\nDate and time\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldDateTimePicker\n,\n \nDateConvention\n,\n \nTimeConvention\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nimport\n \n{\n \nIDateTimeFieldValue\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker\n;\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ndatetime\n: \nIDateTimeFieldValue\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldDateTimePicker\n(\ndatetime\n,\n \n{\n\n  \nlabel\n:\n \nSelect the date and time\n,\n\n  \ninitialDate\n: \nthis.properties.datetime\n,\n\n  \ndateConvention\n: \nDateConvention.DateTime\n,\n\n  \ntimeConvention\n: \nTimeConvention.Hours12\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nkey\n:\n \ndateTimeFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldDateTimePicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ninitialData\n\n\nIDateTimeFieldValue\n\n\nyes\n\n\nInitial date and time value of the control.\n\n\n\n\n\n\nformatData\n\n\nfunction\n\n\nno\n\n\nDefines a formatDate function that can override the output value.\n\n\n\n\n\n\ndateConvention\n\n\nDateConvention\n\n\nno\n\n\nDefines the date convention to use. By default this is set to date and time.\n\n\n\n\n\n\ntimeConvention\n\n\nTimeConvention\n\n\nno\n\n\nDefines the time convention to use. By default this is set to 24-hour clock convention.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nInterface \nIDateTimeFieldValue\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nDate\n\n\nyes\n\n\nJavaScript date value.\n\n\n\n\n\n\ndisplayValue\n\n\nstring\n\n\nyes\n\n\nDate value formatted as a string.\n\n\n\n\n\n\n\n\nEnum \nDateConvention\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDateTime\n\n\nShows the date and time picker\n\n\n\n\n\n\nDate\n\n\nShows only the date picker\n\n\n\n\n\n\n\n\nEnum \nTimeConvention\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHours12\n\n\nSpecify the hours in 12-hours (AM / PM) time convention.\n\n\n\n\n\n\nHours24\n\n\nSpecify the hours in 24-hours time convention.", 
            "title": "PropertyFieldDateTimePicker"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/#propertyfielddatetimepicker-control", 
            "text": "This control generates a Date and Time picker field that can be used in the property pane of your SharePoint Framework web parts.  The control can be configured to be date only or date and time.  Date only   Date picker   Date and time", 
            "title": "PropertyFieldDateTimePicker control"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldDateTimePicker ,   DateConvention ,   TimeConvention   }   from   @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ;    Create a new property for your web part, for example:   import   {   IDateTimeFieldValue   }   from   @pnp/spfx-property-controls/lib/PropertyFieldDateTimePicker ;  export   interface   IPropertyControlsTestWebPartProps   { \n   datetime :  IDateTimeFieldValue ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldDateTimePicker ( datetime ,   { \n   label :   Select the date and time , \n   initialDate :  this.properties.datetime , \n   dateConvention :  DateConvention.DateTime , \n   timeConvention :  TimeConvention.Hours12 , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   key :   dateTimeFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldDateTimePicker/#implementation", 
            "text": "The  PropertyFieldDateTimePicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    initialData  IDateTimeFieldValue  yes  Initial date and time value of the control.    formatData  function  no  Defines a formatDate function that can override the output value.    dateConvention  DateConvention  no  Defines the date convention to use. By default this is set to date and time.    timeConvention  TimeConvention  no  Defines the time convention to use. By default this is set to 24-hour clock convention.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Interface  IDateTimeFieldValue     Property  Type  Required  Description      value  Date  yes  JavaScript date value.    displayValue  string  yes  Date value formatted as a string.     Enum  DateConvention     Name  Description      DateTime  Shows the date and time picker    Date  Shows only the date picker     Enum  TimeConvention     Name  Description      Hours12  Specify the hours in 12-hours (AM / PM) time convention.    Hours24  Specify the hours in 24-hours time convention.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/", 
            "text": "PropertyFieldListPicker control\n\n\nThis control generates a list picker field that can be used in the property pane of your SharePoint Framework web parts.\n\n\nThe control can be configured as a single or multi-selection list picker:\n\n\nSingle list picker\n\n\n\n\nMulti list picker\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldListPicker\n,\n \nPropertyFieldListPickerOrderBy\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldListPicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nlists\n: \nstring\n \n|\n \nstring\n[];\n \n// Stores the list ID(s)\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldListPicker\n(\nlists\n,\n \n{\n\n  \nlabel\n:\n \nSelect a list\n,\n\n  \nselectedList\n: \nthis.properties.lists\n,\n\n  \nincludeHidden\n: \nfalse\n,\n\n  \norderBy\n: \nPropertyFieldListPickerOrderBy.Title\n,\n\n  \ndisabled\n: \nfalse\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged.bind\n(\nthis\n),\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ncontext\n: \nthis.context\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nkey\n:\n \nlistPickerFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldListPicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ncontext\n\n\nWebPartContext\n\n\nyes\n\n\nContext of the current web part.\n\n\n\n\n\n\nselectedList\n\n\nstring OR string[]\n\n\nno\n\n\nInitial selected list set of the control.\n\n\n\n\n\n\nbaseTemplate\n\n\nnumber\n\n\nno\n\n\nBaseTemplate ID of the lists or libaries you want to return.\n\n\n\n\n\n\nincludeHidden\n\n\nboolean\n\n\nno\n\n\nSpecify if you want to include hidden lists in the list picker. By default this is set to \ntrue\n.\n\n\n\n\n\n\norderBy\n\n\nPropertyFieldListPickerOrderBy\n\n\nno\n\n\nSpecify the property on which you want to order the retrieve set of lists.\n\n\n\n\n\n\nmultiSelect\n\n\nboolean\n\n\nno\n\n\nSpecify if you want to have a single or multi-list picker. By default this is set to \nfalse\n (single list picker).\n\n\n\n\n\n\nshowSelectAll\n\n\nboolean\n\n\nno\n\n\nSpecify if you want the Select All checkbox. By default this is set to \nfalse\n (mult-list picker only).\n\n\n\n\n\n\nselectAllInList\n\n\nboolean\n\n\nno\n\n\nSpecify where to show the Select All checkbox. When false (default), checkbox is shown before the label, when true it is shown with the lists  (mult-list picker only).\n\n\n\n\n\n\nselectAllInListLabel\n\n\nstring\n\n\nno\n\n\nThe label to use for the in list select all checkbox (mult-list picker only).\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nEnum \nPropertyFieldListPickerOrderBy\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nId\n\n\nSort by list / library ID\n\n\n\n\n\n\nTitle\n\n\nSort by list / library title", 
            "title": "PropertyFieldListPicker"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/#propertyfieldlistpicker-control", 
            "text": "This control generates a list picker field that can be used in the property pane of your SharePoint Framework web parts.  The control can be configured as a single or multi-selection list picker:  Single list picker   Multi list picker", 
            "title": "PropertyFieldListPicker control"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldListPicker ,   PropertyFieldListPickerOrderBy   }   from   @pnp/spfx-property-controls/lib/PropertyFieldListPicker ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   lists :  string   |   string [];   // Stores the list ID(s)  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldListPicker ( lists ,   { \n   label :   Select a list , \n   selectedList :  this.properties.lists , \n   includeHidden :  false , \n   orderBy :  PropertyFieldListPickerOrderBy.Title , \n   disabled :  false , \n   onPropertyChange :  this.onPropertyPaneFieldChanged.bind ( this ), \n   properties :  this.properties , \n   context :  this.context , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   key :   listPickerFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldListPicker/#implementation", 
            "text": "The  PropertyFieldListPicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    context  WebPartContext  yes  Context of the current web part.    selectedList  string OR string[]  no  Initial selected list set of the control.    baseTemplate  number  no  BaseTemplate ID of the lists or libaries you want to return.    includeHidden  boolean  no  Specify if you want to include hidden lists in the list picker. By default this is set to  true .    orderBy  PropertyFieldListPickerOrderBy  no  Specify the property on which you want to order the retrieve set of lists.    multiSelect  boolean  no  Specify if you want to have a single or multi-list picker. By default this is set to  false  (single list picker).    showSelectAll  boolean  no  Specify if you want the Select All checkbox. By default this is set to  false  (mult-list picker only).    selectAllInList  boolean  no  Specify where to show the Select All checkbox. When false (default), checkbox is shown before the label, when true it is shown with the lists  (mult-list picker only).    selectAllInListLabel  string  no  The label to use for the in list select all checkbox (mult-list picker only).    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Enum  PropertyFieldListPickerOrderBy     Name  Description      Id  Sort by list / library ID    Title  Sort by list / library title", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldMultiSelect/", 
            "text": "PropertyFieldMultiSelect control\n\n\nThis control generates a dropdown with the possibility of selecting multiple values.\n\n\nMulti-select field rendering\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldMultiSelect\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldMultiSelect\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nmultiSelect\n: \nstring\n[];\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldMultiSelect\n(\nmultiSelect\n,\n \n{\n\n  \nkey\n:\n \nmultiSelect\n,\n\n  \nlabel\n:\n \nMulti select field\n,\n\n  \noptions\n:\n \n[\n\n    \n{\n\n      \nkey\n:\n \nEN\n,\n\n      \ntext\n:\n \nEN\n\n    \n},\n\n    \n{\n\n      \nkey\n:\n \nFR\n,\n\n      \ntext\n:\n \nFR\n\n    \n},\n\n    \n{\n\n      \nkey\n:\n \nNL\n,\n\n      \ntext\n:\n \nNL\n\n    \n}\n\n  \n],\n\n  \nselectedKeys\n: \nthis.properties.multiSelect\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldMultiSelect\n control uses the same implementation as the default \nPropertyPaneDropdown\n control and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nselectedKeys\n\n\nstring[] OR number[]\n\n\nno\n\n\nSpecifies the selected keys.\n\n\n\n\n\n\n\n\n\n\nImportant\n: Do not make use of the \nselectedKey\n property. This property is inherited from the \nPropertyPaneDropdown\n control.", 
            "title": "PropertyFieldMultiSelect"
        }, 
        {
            "location": "/controls/PropertyFieldMultiSelect/#propertyfieldmultiselect-control", 
            "text": "This control generates a dropdown with the possibility of selecting multiple values.  Multi-select field rendering", 
            "title": "PropertyFieldMultiSelect control"
        }, 
        {
            "location": "/controls/PropertyFieldMultiSelect/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldMultiSelect   }   from   @pnp/spfx-property-controls/lib/PropertyFieldMultiSelect ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   multiSelect :  string [];  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldMultiSelect ( multiSelect ,   { \n   key :   multiSelect , \n   label :   Multi select field , \n   options :   [ \n     { \n       key :   EN , \n       text :   EN \n     }, \n     { \n       key :   FR , \n       text :   FR \n     }, \n     { \n       key :   NL , \n       text :   NL \n     } \n   ], \n   selectedKeys :  this.properties.multiSelect  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldMultiSelect/#implementation", 
            "text": "The  PropertyFieldMultiSelect  control uses the same implementation as the default  PropertyPaneDropdown  control and has the following additional properties:     Property  Type  Required  Description      selectedKeys  string[] OR number[]  no  Specifies the selected keys.      Important : Do not make use of the  selectedKey  property. This property is inherited from the  PropertyPaneDropdown  control.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldNumber/", 
            "text": "PropertyFieldNumber control\n\n\nThis control generates an input field for numbers. Text is not allowed as this will result into an invalid input.\n\n\nPropertyFieldNumber example usage\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldNumber\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldNumber\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nnumberValue\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldNumber\n(\nnumberValue\n,\n \n{\n\n  \nkey\n:\n \nnumberValue\n,\n\n  \nlabel\n:\n \nNumber value only\n,\n\n  \ndescription\n:\n \nNumber field description\n,\n\n  \nvalue\n: \nthis.properties.numberValue\n,\n\n  \nmaxValue\n: \n10\n,\n\n  \nminValue\n: \n1\n,\n\n  \ndisabled\n: \nfalse\n\n\n})\n\n\n\n\n\n\n\n\nYou can also implement your own validation with the \nonGetErrorMessage\n property as follows:\n\n\n\n\nPropertyFieldNumber\n(\nnumberValue\n,\n \n{\n\n  \nkey\n:\n \nnumberValue\n,\n\n  \nlabel\n:\n \nNumber value only\n,\n\n  \ndescription\n:\n \nNumber field description\n,\n\n  \nvalue\n: \nthis.properties.numberValue\n,\n\n  \nmaxValue\n: \n10\n,\n\n  \nminValue\n: \n1\n,\n\n  \ndisabled\n: \nfalse\n,\n\n  \nonGetErrorMessage\n:\n \n(\nvalue\n: \nnumber\n)\n \n=\n \n{\n\n    \nif\n \n(\nvalue\n \n%\n \n2\n \n!==\n \n0\n)\n \n{\n\n      \nreturn\n \nOnly even numbers are allowed\n;\n\n    \n}\n\n    \nreturn\n \n;\n\n  \n}\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldNumber\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nno\n\n\nThe number field input description.\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nno\n\n\nPlaceholder text to be displayed in the number field.\n\n\n\n\n\n\nvalue\n\n\nnumber\n\n\nno\n\n\nValue to be displayed in the number field.\n\n\n\n\n\n\nmaxValue\n\n\nnumber\n\n\nno\n\n\nMaximum number that can be inserted.\n\n\n\n\n\n\nminValue\n\n\nnumber\n\n\nno\n\n\nMinimum number that can be inserted.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\nerrorMessage\n\n\nstring\n\n\nno\n\n\nIf set, this will be displayed as an error message.\n\n\n\n\n\n\nonGetErrorMessage\n\n\n(value: number) =\n string\n\n\nno\n\n\nIf set, this method is used to get the validation error message and determine whether the input value is valid or not.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nNumber field will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds.", 
            "title": "PropertyFieldNumber"
        }, 
        {
            "location": "/controls/PropertyFieldNumber/#propertyfieldnumber-control", 
            "text": "This control generates an input field for numbers. Text is not allowed as this will result into an invalid input.  PropertyFieldNumber example usage", 
            "title": "PropertyFieldNumber control"
        }, 
        {
            "location": "/controls/PropertyFieldNumber/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldNumber   }   from   @pnp/spfx-property-controls/lib/PropertyFieldNumber ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   numberValue :  number ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldNumber ( numberValue ,   { \n   key :   numberValue , \n   label :   Number value only , \n   description :   Number field description , \n   value :  this.properties.numberValue , \n   maxValue :  10 , \n   minValue :  1 , \n   disabled :  false  })    You can also implement your own validation with the  onGetErrorMessage  property as follows:   PropertyFieldNumber ( numberValue ,   { \n   key :   numberValue , \n   label :   Number value only , \n   description :   Number field description , \n   value :  this.properties.numberValue , \n   maxValue :  10 , \n   minValue :  1 , \n   disabled :  false , \n   onGetErrorMessage :   ( value :  number )   =   { \n     if   ( value   %   2   !==   0 )   { \n       return   Only even numbers are allowed ; \n     } \n     return   ; \n   }  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldNumber/#implementation", 
            "text": "The  PropertyFieldNumber  control can be configured with the following properties:     Property  Type  Required  Description      key  string  yes  An unique key that indicates the identity of this control.    label  string  yes  Property field label displayed on top.    description  string  no  The number field input description.    placeholder  string  no  Placeholder text to be displayed in the number field.    value  number  no  Value to be displayed in the number field.    maxValue  number  no  Maximum number that can be inserted.    minValue  number  no  Minimum number that can be inserted.    disabled  boolean  no  Specify if the control needs to be disabled.    errorMessage  string  no  If set, this will be displayed as an error message.    onGetErrorMessage  (value: number) =  string  no  If set, this method is used to get the validation error message and determine whether the input value is valid or not.    deferredValidationTime  number  no  Number field will start to validate after users stop typing for  deferredValidationTime  milliseconds.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldOrder/", 
            "text": "PropertyFieldOrder control\n\n\nThis control generates a list that can be easily reordered using drag and drop and/or arrow buttons.\n\n\nPropertyFieldOrder\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldOrder\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldOrder\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \norderedItems\n: \nArray\nany\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldOrder\n(\norderedItems\n,\n \n{\n\n  \nkey\n:\n \norderedItems\n,\n\n  \nlabel\n:\n \nOrdered Items\n,\n\n  \nitems\n: \nthis.properties.orderedItems\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n\n\n})\n\n\n\n\n\n\nItem Rendering\n\n\nBy default, items will render using the \ntoString()\n method for each element in your \nitems\n array. This works well for simple arrays of strings, numbers, etc.\n\n\nObject Property\n\n\nWhen working with an array of objects, you can specify the name of the property to use as the display value by specifying the \ntextProperty\n property.\n\n\nFor instance, for an array of objects like the following:\n\n\n[\n  {\ntext\n: \nCat\n, \niconName\n: \nCat\n},\n  {\ntext\n: \nPig\n, \niconName\n: \nSavings\n},\n  {\ntext\n: \nHuman\n, \niconName\n: \nRunning\n},\n  {\ntext\n: \nRobot\n, \niconName\n: \nRobot\n},\n  {\ntext\n: \nDog\n, \niconName\n: \nFangBody\n}\n]\n\n\n\n\n\nTo prevent every item from showing as \n[object Object]\n, you can set the \ntextProperty\n property to the name of the property you would like to use for display:\n\n\nPropertyFieldOrder\n(\norderedItems\n,\n \n{\n\n  \nkey\n:\n \norderedItems\n,\n\n  \nlabel\n:\n \nOrdered Items\n,\n\n  \nitems\n: \nthis.properties.orderedItems\n,\n\n  \ntextProperty\n:\n \ntext\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n\n\n})\n\n\n\n\n\n\n\n\nCustom Rendering\n\n\nYou can fully customize how items are rendered by providing the \nonRenderItem\n callback function and returning whatever \nJSX.Element\n you want.\n\n\nFor example, you can define your function in a \ntsx\n file like this:\n\n\nimport\n \n*\n \nas\n \nReact\n \nfrom\n \nreact\n;\n\n\n\nexport\n \nconst\n \norderedItem\n \n=\n \n(\nitem\n:\nany\n,\n \nindex\n:\nnumber\n)\n:\n \nJSX\n.\nElement\n \n=\n \n{\n\n    \nreturn\n \n(\n\n        \nspan\n\n            \ni\n \nclassName\n=\n{\nms-Icon ms-Icon--\n \n+\n \nitem\n.\niconName\n}\n \nstyle\n=\n{{\npaddingRight\n:\n4px\n}}\n/\n\n            \n{\nitem\n.\ntext\n}\n\n        \n/span\n\n    \n);\n\n\n};\n\n\n\n\n\n\nYou can then import this function into your webpart using the relative path to this file similar to the following:\n\n\nimport\n \n{\n \norderedItem\n \n}\n \nfrom\n \n./components/OrderedItem\n;\n\n\n\n\n\n\nThen you can simply reference it in your \nPropertyFieldOrder\n:\n\n\nPropertyFieldOrder\n(\norderedItems\n,\n \n{\n\n  \nkey\n:\n \norderedItems\n,\n\n  \nlabel\n:\n \nOrdered Items\n,\n\n  \nitems\n: \nthis.properties.orderedItems\n,\n\n  \nonRenderItem\n: \norderedItem\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n\n\n})\n\n\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldOrder\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\nitems\n\n\nArray\n\n\nyes\n\n\nAn array of values to reorder.\n\n\n\n\n\n\ntextProperty\n\n\nstring\n\n\nno\n\n\nThe property to use for display, when undefined, the toString() method of the object is used (ignored when the onRenderItem function is specified)\n\n\n\n\n\n\nmaxHeight\n\n\nnumber\n\n\nno\n\n\nThe maximun height for the items in px (when not set, the control expands as necessary)\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ndisableDragAndDrop\n\n\nboolean\n\n\nno\n\n\nWhen true, drag and drop reordering is disabled (defaults to false)\n\n\n\n\n\n\nremoveArrows\n\n\nboolean\n\n\nno\n\n\nWhen true, arrow buttons are not displayed (defaults to false)\n\n\n\n\n\n\nmoveUpIconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for the move up button (defaults to ChevronUpSmall)\n\n\n\n\n\n\nmoveDownIconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for the move down button (defaults to ChevronDownSmall)\n\n\n\n\n\n\nonRenderItem\n\n\nfunction\n\n\nno\n\n\nOptional callback to provide custom rendering of the item (default is simple text based on either item or the property identified in the textProperty)\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.", 
            "title": "PropertyFieldOrder"
        }, 
        {
            "location": "/controls/PropertyFieldOrder/#propertyfieldorder-control", 
            "text": "This control generates a list that can be easily reordered using drag and drop and/or arrow buttons.  PropertyFieldOrder", 
            "title": "PropertyFieldOrder control"
        }, 
        {
            "location": "/controls/PropertyFieldOrder/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldOrder   }   from   @pnp/spfx-property-controls/lib/PropertyFieldOrder ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   orderedItems :  Array any ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldOrder ( orderedItems ,   { \n   key :   orderedItems , \n   label :   Ordered Items , \n   items :  this.properties.orderedItems , \n   properties :  this.properties , \n   onPropertyChange :  this.onPropertyPaneFieldChanged  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldOrder/#item-rendering", 
            "text": "By default, items will render using the  toString()  method for each element in your  items  array. This works well for simple arrays of strings, numbers, etc.", 
            "title": "Item Rendering"
        }, 
        {
            "location": "/controls/PropertyFieldOrder/#object-property", 
            "text": "When working with an array of objects, you can specify the name of the property to use as the display value by specifying the  textProperty  property.  For instance, for an array of objects like the following:  [\n  { text :  Cat ,  iconName :  Cat },\n  { text :  Pig ,  iconName :  Savings },\n  { text :  Human ,  iconName :  Running },\n  { text :  Robot ,  iconName :  Robot },\n  { text :  Dog ,  iconName :  FangBody }\n]  To prevent every item from showing as  [object Object] , you can set the  textProperty  property to the name of the property you would like to use for display:  PropertyFieldOrder ( orderedItems ,   { \n   key :   orderedItems , \n   label :   Ordered Items , \n   items :  this.properties.orderedItems , \n   textProperty :   text , \n   properties :  this.properties , \n   onPropertyChange :  this.onPropertyPaneFieldChanged  })", 
            "title": "Object Property"
        }, 
        {
            "location": "/controls/PropertyFieldOrder/#custom-rendering", 
            "text": "You can fully customize how items are rendered by providing the  onRenderItem  callback function and returning whatever  JSX.Element  you want.  For example, you can define your function in a  tsx  file like this:  import   *   as   React   from   react ;  export   const   orderedItem   =   ( item : any ,   index : number ) :   JSX . Element   =   { \n     return   ( \n         span \n             i   className = { ms-Icon ms-Icon--   +   item . iconName }   style = {{ paddingRight : 4px }} / \n             { item . text } \n         /span \n     );  };   You can then import this function into your webpart using the relative path to this file similar to the following:  import   {   orderedItem   }   from   ./components/OrderedItem ;   Then you can simply reference it in your  PropertyFieldOrder :  PropertyFieldOrder ( orderedItems ,   { \n   key :   orderedItems , \n   label :   Ordered Items , \n   items :  this.properties.orderedItems , \n   onRenderItem :  orderedItem , \n   properties :  this.properties , \n   onPropertyChange :  this.onPropertyPaneFieldChanged  })", 
            "title": "Custom Rendering"
        }, 
        {
            "location": "/controls/PropertyFieldOrder/#implementation", 
            "text": "The  PropertyFieldOrder  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    items  Array  yes  An array of values to reorder.    textProperty  string  no  The property to use for display, when undefined, the toString() method of the object is used (ignored when the onRenderItem function is specified)    maxHeight  number  no  The maximun height for the items in px (when not set, the control expands as necessary)    disabled  boolean  no  Specify if the control needs to be disabled.    disableDragAndDrop  boolean  no  When true, drag and drop reordering is disabled (defaults to false)    removeArrows  boolean  no  When true, arrow buttons are not displayed (defaults to false)    moveUpIconName  string  no  The name of the UI Fabric Font Icon to use for the move up button (defaults to ChevronUpSmall)    moveDownIconName  string  no  The name of the UI Fabric Font Icon to use for the move down button (defaults to ChevronDownSmall)    onRenderItem  function  no  Optional callback to provide custom rendering of the item (default is simple text based on either item or the property identified in the textProperty)    properties  any  yes  Parent web part properties, this object is use to update the property value.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    key  string  yes  An unique key that indicates the identity of this control.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/", 
            "text": "PropertyFieldPeoplePicker control\n\n\nThis control generates a people / group picker that can be used in the property pane of your SharePoint Framework web parts.\n\n\nSearching for persons\n\n\n\n\nSearching for groups\n\n\n\n\nSelected people / groups\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldPeoplePicker\n,\n \nPrincipalType\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nimport\n \n{\n \nIPropertyFieldGroupOrPerson\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker\n;\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \npeople\n: \nIPropertyFieldGroupOrPerson\n[];\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldPeoplePicker\n(\npeople\n,\n \n{\n\n  \nlabel\n:\n \nPropertyFieldPeoplePicker\n,\n\n  \ninitialData\n: \nthis.properties.people\n,\n\n  \nallowDuplicate\n: \nfalse\n,\n\n  \nprincipalType\n:\n \n[\nPrincipalType\n.\nUsers\n,\n \nPrincipalType\n.\nSharePoint\n,\n \nPrincipalType\n.\nSecurity\n],\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \ncontext\n: \nthis.context\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nkey\n:\n \npeopleFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldPeoplePicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ncontext\n\n\nWebPartContext\n\n\nyes\n\n\nContext of the current web part.\n\n\n\n\n\n\ninitialData\n\n\nIPropertyFieldGroupOrPerson[]\n\n\nno\n\n\nIntial data to load in the people picker (optional).\n\n\n\n\n\n\nallowDuplicate\n\n\nboolean\n\n\nno\n\n\nDefines if the People Picker allows to select duplicated users (optional).\n\n\n\n\n\n\nmultiSelect\n\n\nboolean\n\n\nno\n\n\nDefine if you want to allow multi user / group selection. (optional, true by default).\n\n\n\n\n\n\nprincipalType\n\n\nPrincipalType[]\n\n\nno\n\n\nDefine which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nInterface \nIPropertyFieldGroupOrPerson\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\nno\n\n\nThe ID of the group\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nno\n\n\nGroup description\n\n\n\n\n\n\nfullName\n\n\nstring\n\n\nyes\n\n\nUsers' full name or group display name\n\n\n\n\n\n\nlogin\n\n\nstring\n\n\nyes\n\n\nUsers' login or group provider name (when security group) or group account name (when SharePoint group).\n\n\n\n\n\n\nemail\n\n\nstring\n\n\nno\n\n\nUsers' email\n\n\n\n\n\n\njobTitle\n\n\nstring\n\n\nno\n\n\nUsers' job title\n\n\n\n\n\n\ninitials\n\n\nstring\n\n\nno\n\n\nUsers' initials\n\n\n\n\n\n\nimageUrl\n\n\nstring\n\n\nno\n\n\nUsers' profile image URL\n\n\n\n\n\n\n\n\nEnum \nPrincipalType\n\n\nThe \nPrincipalType\n enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUsers\n\n\nTo specify if you want to retrieve users.\n\n\n\n\n\n\nSecurity\n\n\nTo specify if you want to retrieve security groups.\n\n\n\n\n\n\nSharePoint\n\n\nTo specify if you want to retrieve SharePoint groups.", 
            "title": "PropertyFieldPeoplePicker"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/#propertyfieldpeoplepicker-control", 
            "text": "This control generates a people / group picker that can be used in the property pane of your SharePoint Framework web parts.  Searching for persons   Searching for groups   Selected people / groups", 
            "title": "PropertyFieldPeoplePicker control"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldPeoplePicker ,   PrincipalType   }   from   @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ;    Create a new property for your web part, for example:   import   {   IPropertyFieldGroupOrPerson   }   from   @pnp/spfx-property-controls/lib/PropertyFieldPeoplePicker ;  export   interface   IPropertyControlsTestWebPartProps   { \n   people :  IPropertyFieldGroupOrPerson [];  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldPeoplePicker ( people ,   { \n   label :   PropertyFieldPeoplePicker , \n   initialData :  this.properties.people , \n   allowDuplicate :  false , \n   principalType :   [ PrincipalType . Users ,   PrincipalType . SharePoint ,   PrincipalType . Security ], \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   context :  this.context , \n   properties :  this.properties , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   key :   peopleFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldPeoplePicker/#implementation", 
            "text": "The  PropertyFieldPeoplePicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    context  WebPartContext  yes  Context of the current web part.    initialData  IPropertyFieldGroupOrPerson[]  no  Intial data to load in the people picker (optional).    allowDuplicate  boolean  no  Defines if the People Picker allows to select duplicated users (optional).    multiSelect  boolean  no  Define if you want to allow multi user / group selection. (optional, true by default).    principalType  PrincipalType[]  no  Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Interface  IPropertyFieldGroupOrPerson     Property  Type  Required  Description      id  string  no  The ID of the group    description  string  no  Group description    fullName  string  yes  Users' full name or group display name    login  string  yes  Users' login or group provider name (when security group) or group account name (when SharePoint group).    email  string  no  Users' email    jobTitle  string  no  Users' job title    initials  string  no  Users' initials    imageUrl  string  no  Users' profile image URL     Enum  PrincipalType  The  PrincipalType  enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups.     Name  Description      Users  To specify if you want to retrieve users.    Security  To specify if you want to retrieve security groups.    SharePoint  To specify if you want to retrieve SharePoint groups.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/", 
            "text": "PropertyFieldSpinButton control\n\n\nThis control generates a spin button which allows the user to incrementally adjust a value in small steps.\n\n\nPropertyFieldSpinButton initial render\n\n\n\n\nPropertyFieldSpinButton increment\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldSpinButton\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldSpinButton\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nspinValue\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldSpinButton\n(\nspinValue\n,\n \n{\n\n  \nlabel\n:\n \nSpin Value\n,\n\n  \ninitialValue\n: \nthis.properties.spinValue\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ndisabled\n: \nfalse\n,\n\n  \nsuffix\n:\n \npx\n,\n\n  \nmin\n: \n0\n,\n\n  \nmax\n: \n5\n,\n\n  \nstep\n: \n0.25\n,\n\n  \ndecimalPlaces\n: \n2\n,\n\n  \nincrementIconName\n:\n \nCalculatorAddition\n,\n\n  \ndecrementIconName\n:\n \nCalculatorSubtract\n,\n\n  \nkey\n:\n \nspinButtonFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldSpinButton\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ninitialValue\n\n\nnumber\n\n\nno\n\n\nInitial number value of the control.\n\n\n\n\n\n\nstep\n\n\nnumber\n\n\nno\n\n\nThe difference between the two adjacent values of the SpinButton (default is 1)\n\n\n\n\n\n\nmin\n\n\nnumber\n\n\nno\n\n\nThe minimum value (no minimum when unspecified)\n\n\n\n\n\n\nmax\n\n\nnumber\n\n\nno\n\n\nThe minimum value (no minimum when unspecified)\n\n\n\n\n\n\nincrementIconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for the increment button (defaults to ChevronUpSmall)\n\n\n\n\n\n\ndecrementIconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for the decrement button (defaults to ChevronDownSmall)\n\n\n\n\n\n\nsuffix\n\n\nstring\n\n\nno\n\n\nAn optional string value to append to the field display\n\n\n\n\n\n\ndecimalPlaces\n\n\nnumber\n\n\nno\n\n\nThe number of decimal places to show/allow (defaults to 0)\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.", 
            "title": "PropertyFieldSpinButton"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/#propertyfieldspinbutton-control", 
            "text": "This control generates a spin button which allows the user to incrementally adjust a value in small steps.  PropertyFieldSpinButton initial render   PropertyFieldSpinButton increment", 
            "title": "PropertyFieldSpinButton control"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldSpinButton   }   from   @pnp/spfx-property-controls/lib/PropertyFieldSpinButton ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   spinValue :  number ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldSpinButton ( spinValue ,   { \n   label :   Spin Value , \n   initialValue :  this.properties.spinValue , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   disabled :  false , \n   suffix :   px , \n   min :  0 , \n   max :  5 , \n   step :  0.25 , \n   decimalPlaces :  2 , \n   incrementIconName :   CalculatorAddition , \n   decrementIconName :   CalculatorSubtract , \n   key :   spinButtonFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldSpinButton/#implementation", 
            "text": "The  PropertyFieldSpinButton  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    initialValue  number  no  Initial number value of the control.    step  number  no  The difference between the two adjacent values of the SpinButton (default is 1)    min  number  no  The minimum value (no minimum when unspecified)    max  number  no  The minimum value (no minimum when unspecified)    incrementIconName  string  no  The name of the UI Fabric Font Icon to use for the increment button (defaults to ChevronUpSmall)    decrementIconName  string  no  The name of the UI Fabric Font Icon to use for the decrement button (defaults to ChevronDownSmall)    suffix  string  no  An optional string value to append to the field display    decimalPlaces  number  no  The number of decimal places to show/allow (defaults to 0)    properties  any  yes  Parent web part properties, this object is use to update the property value.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    key  string  yes  An unique key that indicates the identity of this control.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldSwatchColorPicker/", 
            "text": "PropertyFieldSwatchColorPicker control\n\n\nThis control generates a swatch color picker that you can use inside the property pane.\n\n\nPropertyFieldSwatchColorPicker\n\n\n\n\nPropertyFieldColorPicker color selector\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldSwatchColorPicker\n,\n \nPropertyFieldSwatchColorPickerStyle\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldSwatchColorPicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ncolor\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldSwatchColorPicker\n(\ncolor\n,\n \n{\n\n  \nlabel\n:\n \nSwatch Color\n,\n\n  \nselectedColor\n: \nthis.properties.color\n,\n\n  \ncolors\n:\n \n[\n\n    \n{\n \ncolor\n:\n \n#ffb900\n,\n \nlabel\n:\n \nYellow\n \n},\n\n    \n{\n \ncolor\n:\n \n#fff100\n,\n \nlabel\n:\n \nLight Yellow\n \n},\n\n    \n{\n \ncolor\n:\n \n#d83b01\n,\n \nlabel\n:\n \nOrange\n},\n\n    \n{\n \ncolor\n:\n \n#e81123\n,\n \nlabel\n:\n \nRed\n \n},\n\n    \n{\n \ncolor\n:\n \n#a80000\n,\n \nlabel\n:\n \nDark Red\n},\n\n    \n{\n \ncolor\n:\n \n#5c005c\n,\n \nlabel\n:\n \nDark Magenta\n \n},\n\n    \n{\n \ncolor\n:\n \n#e3008c\n,\n \nlabel\n:\n \nLight Magenta\n},\n\n    \n{\n \ncolor\n:\n \n#5c2d91\n,\n \nlabel\n:\n \nPurple\n},\n\n    \n{\n \ncolor\n:\n \n#0078d4\n,\n \nlabel\n:\n \nBlue\n},\n\n    \n{\n \ncolor\n:\n \n#00bcf2\n,\n \nlabel\n:\n \nLight Blue\n \n},\n\n    \n{\n \ncolor\n:\n \n#008272\n,\n \nlabel\n:\n \nTeal\n},\n\n    \n{\n \ncolor\n:\n \n#107c10\n,\n \nlabel\n:\n \nGreen\n},\n\n    \n{\n \ncolor\n:\n \n#bad80a\n,\n \nlabel\n:\n \nLight Green\n \n},\n\n    \n{\n \ncolor\n:\n \n#eaeaea\n},\n\n    \n{\n \ncolor\n:\n \nblack\n,\n \nlabel\n:\n \nBlack\n},\n\n    \n{\n \ncolor\n:\n \n#333333\n,\n \nlabel\n:\n \nNeutral\n},\n\n    \n{\n \ncolor\n:\n \nrgba(102, 102, 102, 0.5)\n,\n \nlabel\n:\n \nHalf Gray\n \n}\n\n  \n],\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \nkey\n:\n \ncolorFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldColorPicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\nselectedColor\n\n\nstring or IColor\n\n\nno\n\n\nThe CSS-compatible string or an IColor object to describe the initial color\n\n\n\n\n\n\ncolor\n\n\nIPropertyFieldSwatchColorOption[]\n\n\nyes\n\n\nThe color choices (color can be any CSS-Compatible string, labels are optional and will be shown as a tooltip on the swatch)\n\n\n\n\n\n\nshowAsCircles\n\n\nboolean\n\n\nno\n\n\nWhen true, color cells are shown as circles. When false (default), color cells are shown as squares\n\n\n\n\n\n\ncolumnCount\n\n\nnumber\n\n\nno\n\n\nThe number of cells to show per row (defaults to 6, minimum of 1 and maximum of 8)\n\n\n\n\n\n\nstyle\n\n\nPropertyFieldSwatchColorPickerStyle\n\n\nno\n\n\nDetermines how the control is displayed (defaults to inline)\n\n\n\n\n\n\niconName\n\n\nstring\n\n\nno\n\n\nThe name of the UI Fabric Font Icon to use for Inline display (defaults to Color)\n\n\n\n\n\n\nvalueAsObject\n\n\nboolean\n\n\nno\n\n\nWhen true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\n\n\nEnum \nPropertyFieldSwatchColorPickerStyle\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFull\n\n\nDisplay the full control in the property pane\n\n\n\n\n\n\nInline\n\n\nDisplay the color picker inline\n\n\n\n\n\n\n\n\nValue\n\n\nBy default, the Swatch Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios.\n\n\nBy setting the \nvalueAsObject\n property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nstring\n\n\nCSS-compatible string (this is the same value that would normally be returned when \nvalueAsObject\n is false)\n\n\n\n\n\n\nhex\n\n\nstring\n\n\nHex value (does not reflect alpha)\n\n\n\n\n\n\nr\n\n\nnumber\n\n\nRed\n\n\n\n\n\n\ng\n\n\nnumber\n\n\nGreen\n\n\n\n\n\n\nb\n\n\nnumber\n\n\nBlue\n\n\n\n\n\n\nh\n\n\nnumber\n\n\nHue\n\n\n\n\n\n\ns\n\n\nnumber\n\n\nSaturation\n\n\n\n\n\n\nv\n\n\nnumber\n\n\nValue", 
            "title": "PropertyFieldSwatchColorPicker"
        }, 
        {
            "location": "/controls/PropertyFieldSwatchColorPicker/#propertyfieldswatchcolorpicker-control", 
            "text": "This control generates a swatch color picker that you can use inside the property pane.  PropertyFieldSwatchColorPicker   PropertyFieldColorPicker color selector", 
            "title": "PropertyFieldSwatchColorPicker control"
        }, 
        {
            "location": "/controls/PropertyFieldSwatchColorPicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldSwatchColorPicker ,   PropertyFieldSwatchColorPickerStyle   }   from   @pnp/spfx-property-controls/lib/PropertyFieldSwatchColorPicker ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   color :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldSwatchColorPicker ( color ,   { \n   label :   Swatch Color , \n   selectedColor :  this.properties.color , \n   colors :   [ \n     {   color :   #ffb900 ,   label :   Yellow   }, \n     {   color :   #fff100 ,   label :   Light Yellow   }, \n     {   color :   #d83b01 ,   label :   Orange }, \n     {   color :   #e81123 ,   label :   Red   }, \n     {   color :   #a80000 ,   label :   Dark Red }, \n     {   color :   #5c005c ,   label :   Dark Magenta   }, \n     {   color :   #e3008c ,   label :   Light Magenta }, \n     {   color :   #5c2d91 ,   label :   Purple }, \n     {   color :   #0078d4 ,   label :   Blue }, \n     {   color :   #00bcf2 ,   label :   Light Blue   }, \n     {   color :   #008272 ,   label :   Teal }, \n     {   color :   #107c10 ,   label :   Green }, \n     {   color :   #bad80a ,   label :   Light Green   }, \n     {   color :   #eaeaea }, \n     {   color :   black ,   label :   Black }, \n     {   color :   #333333 ,   label :   Neutral }, \n     {   color :   rgba(102, 102, 102, 0.5) ,   label :   Half Gray   } \n   ], \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   key :   colorFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldSwatchColorPicker/#implementation", 
            "text": "The  PropertyFieldColorPicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    disabled  boolean  no  Specify if the control needs to be disabled.    selectedColor  string or IColor  no  The CSS-compatible string or an IColor object to describe the initial color    color  IPropertyFieldSwatchColorOption[]  yes  The color choices (color can be any CSS-Compatible string, labels are optional and will be shown as a tooltip on the swatch)    showAsCircles  boolean  no  When true, color cells are shown as circles. When false (default), color cells are shown as squares    columnCount  number  no  The number of cells to show per row (defaults to 6, minimum of 1 and maximum of 8)    style  PropertyFieldSwatchColorPickerStyle  no  Determines how the control is displayed (defaults to inline)    iconName  string  no  The name of the UI Fabric Font Icon to use for Inline display (defaults to Color)    valueAsObject  boolean  no  When true, the property is returned as an IColor object. When false (default), the property is returned as a CSS-compatible string    properties  any  yes  Parent web part properties, this object is use to update the property value.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    key  string  yes  An unique key that indicates the identity of this control.     Enum  PropertyFieldSwatchColorPickerStyle     Name  Description      Full  Display the full control in the property pane    Inline  Display the color picker inline", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldSwatchColorPicker/#value", 
            "text": "By default, the Swatch Color Picker returns the value as a CSS-compatible string. This allows you the flexibility of simply assigning the value to an inline style as is and this is usually sufficient. However, this also limits the information directly available to you since the format could be a Hex code, an RGBA value, or even a named color and may not be suitable for advanced scenarios.  By setting the  valueAsObject  property to true, you will always receive a consistent IColor object that provides you detailed information about the chosen color. Here are the properties available in the IColor object:     Property  Type  Description      str  string  CSS-compatible string (this is the same value that would normally be returned when  valueAsObject  is false)    hex  string  Hex value (does not reflect alpha)    r  number  Red    g  number  Green    b  number  Blue    h  number  Hue    s  number  Saturation    v  number  Value", 
            "title": "Value"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/", 
            "text": "PropertyFieldTermPicker control\n\n\nThis control generates a term picker that can be used in the property pane of your SharePoint Framework web parts.\n\n\n\n\nDisclaimer\n: This control makes use of the \nProcessQuery\n API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available.\n\n\n\n\nEmpty term picker\n\n\n\n\nSelecting terms\n\n\n\n\nSelected terms in the panel\n\n\n\n\nEmpty term picker\n\n\n\n\nTerm picker: Auto Complete\n\n\n\n\nLimit the term set to a specific group or termset\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPropertyFieldTermPicker\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldTermPicker\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nimport\n \n{\n \nIPickerTerms\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldTermPicker\n;\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nterms\n: \nIPickerTerms\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldTermPicker\n(\nterms\n,\n \n{\n\n  \nlabel\n:\n \nSelect terms\n,\n\n  \npanelTitle\n:\n \nSelect terms\n,\n\n  \ninitialValues\n: \nthis.properties.terms\n,\n\n  \nallowMultipleSelections\n: \ntrue\n,\n\n  \nexcludeSystemGroup\n: \nfalse\n,\n\n  \nonPropertyChange\n: \nthis.onPropertyPaneFieldChanged\n,\n\n  \nproperties\n: \nthis.properties\n,\n\n  \ncontext\n: \nthis.context\n,\n\n  \nonGetErrorMessage\n: \nnull\n,\n\n  \ndeferredValidationTime\n: \n0\n,\n\n  \nlimitByGroupNameOrID\n:\n \nPeople\n,\n\n  \nlimitByTermsetNameOrID\n:\n \nLocation\n,\n\n  \nkey\n:\n \ntermSetsPickerFieldId\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldTermPicker\n control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nstring\n\n\nyes\n\n\nProperty field label displayed on top.\n\n\n\n\n\n\npanelTitle\n\n\nstring\n\n\nyes\n\n\nTermSet Picker Panel title.\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\nno\n\n\nSpecify if the control needs to be disabled.\n\n\n\n\n\n\ncontext\n\n\nWebPartContext\n\n\nyes\n\n\nContext of the current web part.\n\n\n\n\n\n\ninitialValues\n\n\nIPickerTerms\n\n\nno\n\n\nDefines the selected by default term sets.\n\n\n\n\n\n\nallowMultipleSelections\n\n\nboolean\n\n\nno\n\n\nDefines if the user can select only one or many term sets. Default value is false.\n\n\n\n\n\n\nexcludeSystemGroup\n\n\nboolean\n\n\nno\n\n\nIndicator to define if the system Groups are exclude. Default is false.\n\n\n\n\n\n\nlimitByGroupNameOrID\n\n\nstring\n\n\nno\n\n\nLimit the term sets that can be used by the group name or ID.\n\n\n\n\n\n\nlimitByTermsetNameOrID\n\n\nstring\n\n\nno\n\n\nLimit the terms that can be picked by the Term Set name or ID.\n\n\n\n\n\n\nhideTermStoreName\n\n\nboolean\n\n\nno\n\n\nSpecifies if you want to show or hide the term store name from the panel.\n\n\n\n\n\n\nisTermSetSelectable\n\n\nboolean\n\n\nno\n\n\nSpecify if the term set itself is selectable in the tree view.\n\n\n\n\n\n\nonPropertyChange\n\n\nfunction\n\n\nyes\n\n\nDefines a onPropertyChange function to raise when the date gets changed.\n\n\n\n\n\n\nproperties\n\n\nany\n\n\nyes\n\n\nParent web part properties, this object is use to update the property value.\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nAn unique key that indicates the identity of this control.\n\n\n\n\n\n\nonGetErrorMessage\n\n\nfunction\n\n\nno\n\n\nThe method is used to get the validation error message and determine whether the input value is valid or not. See \nthis documentation\n to learn how to use it.\n\n\n\n\n\n\ndeferredValidationTime\n\n\nnumber\n\n\nno\n\n\nControl will start to validate after users stop typing for \ndeferredValidationTime\n milliseconds. Default value is 200.\n\n\n\n\n\n\n\n\nInterface \nIPickerTerms\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nstring\n\n\nyes\n\n\nThe ID of the term\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\nThe name of the term\n\n\n\n\n\n\npath\n\n\nstring\n\n\nyes\n\n\nThe path of the term\n\n\n\n\n\n\ntermSet\n\n\nstring\n\n\nyes\n\n\nThe Id of the parent term set of the term\n\n\n\n\n\n\ntermSetName\n\n\nstring\n\n\nno\n\n\nThe Name of the parent term set of the term", 
            "title": "PropertyFieldTermPicker"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/#propertyfieldtermpicker-control", 
            "text": "This control generates a term picker that can be used in the property pane of your SharePoint Framework web parts.   Disclaimer : This control makes use of the  ProcessQuery  API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available.   Empty term picker   Selecting terms   Selected terms in the panel   Empty term picker   Term picker: Auto Complete   Limit the term set to a specific group or termset", 
            "title": "PropertyFieldTermPicker control"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   PropertyFieldTermPicker   }   from   @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ;    Create a new property for your web part, for example:   import   {   IPickerTerms   }   from   @pnp/spfx-property-controls/lib/PropertyFieldTermPicker ;  export   interface   IPropertyControlsTestWebPartProps   { \n   terms :  IPickerTerms ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldTermPicker ( terms ,   { \n   label :   Select terms , \n   panelTitle :   Select terms , \n   initialValues :  this.properties.terms , \n   allowMultipleSelections :  true , \n   excludeSystemGroup :  false , \n   onPropertyChange :  this.onPropertyPaneFieldChanged , \n   properties :  this.properties , \n   context :  this.context , \n   onGetErrorMessage :  null , \n   deferredValidationTime :  0 , \n   limitByGroupNameOrID :   People , \n   limitByTermsetNameOrID :   Location , \n   key :   termSetsPickerFieldId  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldTermPicker/#implementation", 
            "text": "The  PropertyFieldTermPicker  control can be configured with the following properties:     Property  Type  Required  Description      label  string  yes  Property field label displayed on top.    panelTitle  string  yes  TermSet Picker Panel title.    disabled  boolean  no  Specify if the control needs to be disabled.    context  WebPartContext  yes  Context of the current web part.    initialValues  IPickerTerms  no  Defines the selected by default term sets.    allowMultipleSelections  boolean  no  Defines if the user can select only one or many term sets. Default value is false.    excludeSystemGroup  boolean  no  Indicator to define if the system Groups are exclude. Default is false.    limitByGroupNameOrID  string  no  Limit the term sets that can be used by the group name or ID.    limitByTermsetNameOrID  string  no  Limit the terms that can be picked by the Term Set name or ID.    hideTermStoreName  boolean  no  Specifies if you want to show or hide the term store name from the panel.    isTermSetSelectable  boolean  no  Specify if the term set itself is selectable in the tree view.    onPropertyChange  function  yes  Defines a onPropertyChange function to raise when the date gets changed.    properties  any  yes  Parent web part properties, this object is use to update the property value.    key  string  yes  An unique key that indicates the identity of this control.    onGetErrorMessage  function  no  The method is used to get the validation error message and determine whether the input value is valid or not. See  this documentation  to learn how to use it.    deferredValidationTime  number  no  Control will start to validate after users stop typing for  deferredValidationTime  milliseconds. Default value is 200.     Interface  IPickerTerms     Property  Type  Required  Description      key  string  yes  The ID of the term    name  string  yes  The name of the term    path  string  yes  The path of the term    termSet  string  yes  The Id of the parent term set of the term    termSetName  string  no  The Name of the parent term set of the term", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/", 
            "text": "PropertyFieldButtonWithCallout control\n\n\nThis control generates a button control with a callout.\n\n\nPropertyFieldButtonWithCallout rendering\n\n\n\n\nPropertyFieldButtonWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldButtonWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldButtonWithCallout\n;\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldButtonWithCallout\n(\nfakeProperty\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \nbuttonWithCalloutFieldId\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nTests connection to the database with the parameters listed above\n),\n\n  \ncalloutWidth\n: \n150\n,\n\n  \ntext\n:\n \nTest connection\n,\n\n  \nonClick\n:\n \n()\n \n=\n \n{\n \n/* Code to test db connection */\n \n}\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldButtonWithCallout\n control uses the same implementation as the default \nPropertyPaneButton\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldButtonWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/#propertyfieldbuttonwithcallout-control", 
            "text": "This control generates a button control with a callout.  PropertyFieldButtonWithCallout rendering   PropertyFieldButtonWithCallout callout opened", 
            "title": "PropertyFieldButtonWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldButtonWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldButtonWithCallout ;    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldButtonWithCallout ( fakeProperty ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   buttonWithCalloutFieldId , \n   calloutContent :  React.createElement ( p ,   {},   Tests connection to the database with the parameters listed above ), \n   calloutWidth :  150 , \n   text :   Test connection , \n   onClick :   ()   =   {   /* Code to test db connection */   }  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldButtonWithCallout/#implementation", 
            "text": "The  PropertyFieldButtonWithCallout  control uses the same implementation as the default  PropertyPaneButton  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/", 
            "text": "PropertyFieldCheckboxWithCallout control\n\n\nThis control generates a checkbox control with a callout.\n\n\nPropertyFieldCheckboxWithCallout rendering\n\n\n\n\nPropertyFieldCheckboxWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldCheckboxWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldCheckboxWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ncheckboxWithCalloutValue\n: \nboolean\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldCheckboxWithCallout\n(\ncheckboxWithCalloutValue\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \ncheckboxWithCalloutFieldId\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nCheck the checkbox to accept Application Terms and Conditions\n),\n\n  \ncalloutWidth\n: \n200\n,\n\n  \ntext\n:\n \nAccept terms and conditions\n,\n\n  \nchecked\n: \nthis.properties.checkboxWithCalloutValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldCheckboxWithCallout\n control uses the same implementation as the default \nPropertyPaneCheckbox\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldCheckboxWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/#propertyfieldcheckboxwithcallout-control", 
            "text": "This control generates a checkbox control with a callout.  PropertyFieldCheckboxWithCallout rendering   PropertyFieldCheckboxWithCallout callout opened", 
            "title": "PropertyFieldCheckboxWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldCheckboxWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldCheckboxWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   checkboxWithCalloutValue :  boolean ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldCheckboxWithCallout ( checkboxWithCalloutValue ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   checkboxWithCalloutFieldId , \n   calloutContent :  React.createElement ( p ,   {},   Check the checkbox to accept Application Terms and Conditions ), \n   calloutWidth :  200 , \n   text :   Accept terms and conditions , \n   checked :  this.properties.checkboxWithCalloutValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldCheckboxWithCallout/#implementation", 
            "text": "The  PropertyFieldCheckboxWithCallout  control uses the same implementation as the default  PropertyPaneCheckbox  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/", 
            "text": "PropertyFieldChoiceGroupWithCallout control\n\n\nThis control generates a choice group control with a callout.\n\n\nPropertyFieldChoiceGroupWithCallout rendering\n\n\n\n\nPropertyFieldChoiceGroupWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldChoiceGroupWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldChoiceGroupWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nchoiceGroupWithCalloutValue\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldChoiceGroupWithCallout\n(\nchoiceGroupWithCalloutValue\n,\n \n{\n\n  \ncalloutContent\n: \nReact.createElement\n(\ndiv\n,\n \n{},\n \nSelect preferrable mobile platform\n),\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Hover\n,\n\n  \nkey\n:\n \nchoiceGroupWithCalloutFieldId\n,\n\n  \nlabel\n:\n \nPreferred mobile platform\n,\n\n  \noptions\n:\n \n[{\n\n    \nkey\n:\n \niOS\n,\n\n    \ntext\n:\n \niOS\n,\n\n    \nchecked\n: \nthis.properties.choiceGroupWithCalloutValue\n \n===\n \niOS\n\n  \n},\n \n{\n\n    \nkey\n:\n \nAndroid\n,\n\n    \ntext\n:\n \nAndroid\n,\n\n    \nchecked\n: \nthis.properties.choiceGroupWithCalloutValue\n \n===\n \nAndroid\n\n  \n},\n \n{\n\n    \nkey\n:\n \nOther\n,\n\n    \ntext\n:\n \nOther\n,\n\n    \nchecked\n: \nthis.properties.choiceGroupWithCalloutValue\n \n===\n \nOther\n\n  \n}]\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldChoiceGroupWithCallout\n control uses the same implementation as the default \nPropertyPaneChoiceGroup\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldChoiceGroupWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/#propertyfieldchoicegroupwithcallout-control", 
            "text": "This control generates a choice group control with a callout.  PropertyFieldChoiceGroupWithCallout rendering   PropertyFieldChoiceGroupWithCallout callout opened", 
            "title": "PropertyFieldChoiceGroupWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldChoiceGroupWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldChoiceGroupWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   choiceGroupWithCalloutValue :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldChoiceGroupWithCallout ( choiceGroupWithCalloutValue ,   { \n   calloutContent :  React.createElement ( div ,   {},   Select preferrable mobile platform ), \n   calloutTrigger :  CalloutTriggers.Hover , \n   key :   choiceGroupWithCalloutFieldId , \n   label :   Preferred mobile platform , \n   options :   [{ \n     key :   iOS , \n     text :   iOS , \n     checked :  this.properties.choiceGroupWithCalloutValue   ===   iOS \n   },   { \n     key :   Android , \n     text :   Android , \n     checked :  this.properties.choiceGroupWithCalloutValue   ===   Android \n   },   { \n     key :   Other , \n     text :   Other , \n     checked :  this.properties.choiceGroupWithCalloutValue   ===   Other \n   }]  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldChoiceGroupWithCallout/#implementation", 
            "text": "The  PropertyFieldChoiceGroupWithCallout  control uses the same implementation as the default  PropertyPaneChoiceGroup  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/", 
            "text": "PropertyFieldDropDownWithCallout control\n\n\nThis control generates a dropdown control with a callout.\n\n\nPropertyFieldDropDownWithCallout rendering\n\n\n\n\nPropertyFieldDropDownWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldDropdownWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldDropdownWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ndropdownInfoHeaderKey\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldDropdownWithCallout\n(\ndropdownInfoHeaderKey\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Hover\n,\n\n  \nkey\n:\n \ndropdownInfoHeaderFieldId\n,\n\n  \nlabel\n:\n \nSelect the version\n,\n\n  \noptions\n:\n \n[{\n\n    \nkey\n:\n \nv1.0.0\n,\n\n    \ntext\n:\n \nv1.0.0\n\n  \n},\n \n{\n\n    \nkey\n:\n \nv1.0.1\n,\n\n    \ntext\n:\n \nv1.0.1\n\n  \n},\n \n{\n\n    \nkey\n:\n \nv1.0.2\n,\n\n    \ntext\n:\n \nv1.0.2\n\n  \n},\n \n{\n\n    \nkey\n:\n \nv2.0.0\n,\n\n    \ntext\n:\n \nv2.0.0\n\n  \n}],\n\n  \nselectedKey\n: \nthis.properties.dropdownInfoHeaderKey\n,\n\n  \ncalloutContent\n: \ndropdownInfoHeaderCallountContent\n\n\n})\n\n\n\n\n\n\n\n\nImplement the \ncalloutContent\n function as follows:\n\n\n\n\nprivate\n \ngetDropdownInfoHeaderCalloutContent\n()\n:\n \nJSX\n.\nElement\n \n{\n\n  \nconst\n \nselectedKey\n: \nstring\n \n=\n \nthis\n.\nproperties\n.\ndropdownInfoHeaderKey\n;\n\n\n  \nif\n \n(\nselectedKey\n)\n \n{\n\n    \nreturn\n \nReact\n.\ncreateElement\n(\ndiv\n,\n \n{},\n \n`you have selected \n${\nselectedKey\n}\n`\n);\n\n  \n}\n \nelse\n \n{\n\n    \nreturn\n \nReact\n.\ncreateElement\n(\ndiv\n,\n \n{},\n \n`you haven\nt selected any version`\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldDropDownWithCallout\n control uses the same implementation as the default \nPropertyPaneDropdown\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldDropdownWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/#propertyfielddropdownwithcallout-control", 
            "text": "This control generates a dropdown control with a callout.  PropertyFieldDropDownWithCallout rendering   PropertyFieldDropDownWithCallout callout opened", 
            "title": "PropertyFieldDropDownWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldDropdownWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldDropdownWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   dropdownInfoHeaderKey :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldDropdownWithCallout ( dropdownInfoHeaderKey ,   { \n   calloutTrigger :  CalloutTriggers.Hover , \n   key :   dropdownInfoHeaderFieldId , \n   label :   Select the version , \n   options :   [{ \n     key :   v1.0.0 , \n     text :   v1.0.0 \n   },   { \n     key :   v1.0.1 , \n     text :   v1.0.1 \n   },   { \n     key :   v1.0.2 , \n     text :   v1.0.2 \n   },   { \n     key :   v2.0.0 , \n     text :   v2.0.0 \n   }], \n   selectedKey :  this.properties.dropdownInfoHeaderKey , \n   calloutContent :  dropdownInfoHeaderCallountContent  })    Implement the  calloutContent  function as follows:   private   getDropdownInfoHeaderCalloutContent () :   JSX . Element   { \n   const   selectedKey :  string   =   this . properties . dropdownInfoHeaderKey ; \n\n   if   ( selectedKey )   { \n     return   React . createElement ( div ,   {},   `you have selected  ${ selectedKey } ` ); \n   }   else   { \n     return   React . createElement ( div ,   {},   `you haven t selected any version` ); \n   }  }", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldDropdownWithCallout/#implementation", 
            "text": "The  PropertyFieldDropDownWithCallout  control uses the same implementation as the default  PropertyPaneDropdown  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/", 
            "text": "PropertyFieldLabelWithCallout control\n\n\nThis control generates a label control with a callout.\n\n\nPropertyFieldLabelWithCallout rendering\n\n\n\n\nPropertyFieldLabelWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldLabelWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldLabelWithCallout\n;\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldLabelWithCallout\n(\nfakeProp\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \nLabelWithCalloutFieldId\n,\n\n  \ncalloutContent\n:\n \nUse dropdowns below to select list and list\\\ns field to work with\n,\n\n  \ncalloutWidth\n: \n200\n,\n\n  \ntext\n:\n \nSelect List and Field\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldLabelWithCallout\n control uses the same implementation as the default \nPropertyPaneLabel\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldLabelWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/#propertyfieldlabelwithcallout-control", 
            "text": "This control generates a label control with a callout.  PropertyFieldLabelWithCallout rendering   PropertyFieldLabelWithCallout callout opened", 
            "title": "PropertyFieldLabelWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldLabelWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldLabelWithCallout ;    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldLabelWithCallout ( fakeProp ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   LabelWithCalloutFieldId , \n   calloutContent :   Use dropdowns below to select list and list\\ s field to work with , \n   calloutWidth :  200 , \n   text :   Select List and Field  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldLabelWithCallout/#implementation", 
            "text": "The  PropertyFieldLabelWithCallout  control uses the same implementation as the default  PropertyPaneLabel  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/", 
            "text": "PropertyFieldLinkWithCallout control\n\n\nThis control generates a link control with a callout.\n\n\nPropertyFieldLinkWithCallout rendering\n\n\n\n\nPropertyFieldLinkWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/Callout\n;\n\n\nimport\n \n{\n \nPropertyFieldLinkWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldLinkWithCallout\n;\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldLinkWithCallout\n(\nfakeProp\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \nlinkWithCalloutFieldId\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nClick the link to open a new page with Application Terms \n Conditions\n),\n\n  \ncalloutWidth\n: \n200\n,\n\n  \ntext\n:\n \nTerms \n Conditions\n,\n\n  \nhref\n:\n \nhttps://github.com/SharePoint/sp-dev-fx-property-controls\n,\n\n  \ntarget\n:\n \n_blank\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldLinkWithCallout\n control uses the same implementation as the default \nPropertyPaneLink\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldLinkWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/#propertyfieldlinkwithcallout-control", 
            "text": "This control generates a link control with a callout.  PropertyFieldLinkWithCallout rendering   PropertyFieldLinkWithCallout callout opened", 
            "title": "PropertyFieldLinkWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/Callout ;  import   {   PropertyFieldLinkWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldLinkWithCallout ;    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldLinkWithCallout ( fakeProp ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   linkWithCalloutFieldId , \n   calloutContent :  React.createElement ( p ,   {},   Click the link to open a new page with Application Terms   Conditions ), \n   calloutWidth :  200 , \n   text :   Terms   Conditions , \n   href :   https://github.com/SharePoint/sp-dev-fx-property-controls , \n   target :   _blank  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldLinkWithCallout/#implementation", 
            "text": "The  PropertyFieldLinkWithCallout  control uses the same implementation as the default  PropertyPaneLink  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/", 
            "text": "PropertyFieldSliderWithCallout control\n\n\nThis control generates a slider control with a callout.\n\n\nPropertyFieldSliderWithCallout rendering\n\n\n\n\nPropertyFieldSliderWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldSliderWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldSliderWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \nsliderWithCalloutValue\n: \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldSliderWithCallout\n(\nsliderWithCalloutValue\n,\n \n{\n\n  \ncalloutContent\n: \nReact.createElement\n(\ndiv\n,\n \n{},\n \nSelect background image opacity\n),\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \ncalloutWidth\n: \n200\n,\n\n  \nkey\n:\n \nsliderWithCalloutFieldId\n,\n\n  \nlabel\n:\n \nOpacity\n,\n\n  \nmax\n: \n100\n,\n\n  \nmin\n: \n0\n,\n\n  \nstep\n: \n1\n,\n\n  \nshowValue\n: \ntrue\n,\n\n  \nvalue\n: \nthis.properties.sliderWithCalloutValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldSliderWithCallout\n control uses the same implementation as the default \nPropertyPaneSlider\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldSliderWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/#propertyfieldsliderwithcallout-control", 
            "text": "This control generates a slider control with a callout.  PropertyFieldSliderWithCallout rendering   PropertyFieldSliderWithCallout callout opened", 
            "title": "PropertyFieldSliderWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldSliderWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldSliderWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   sliderWithCalloutValue :  number ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldSliderWithCallout ( sliderWithCalloutValue ,   { \n   calloutContent :  React.createElement ( div ,   {},   Select background image opacity ), \n   calloutTrigger :  CalloutTriggers.Click , \n   calloutWidth :  200 , \n   key :   sliderWithCalloutFieldId , \n   label :   Opacity , \n   max :  100 , \n   min :  0 , \n   step :  1 , \n   showValue :  true , \n   value :  this.properties.sliderWithCalloutValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldSliderWithCallout/#implementation", 
            "text": "The  PropertyFieldSliderWithCallout  control uses the same implementation as the default  PropertyPaneSlider  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/", 
            "text": "PropertyFieldTextWithCallout control\n\n\nThis control generates a text field control with a callout.\n\n\nPropertyFieldTextWithCallout rendering\n\n\n\n\nPropertyFieldTextWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldTextWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldTextWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ntextInfoHeaderValue\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldTextWithCallout\n(\ntextInfoHeaderValue\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Hover\n,\n\n  \nkey\n:\n \ntextInfoHeaderFieldId\n,\n\n  \nlabel\n:\n \nDescribe your PnP passion with few words\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\nspan\n,\n \n{},\n \nYou can describe your passion with such words as strong, cosmic, all-absorbing, etc.\n),\n\n  \ncalloutWidth\n: \n150\n,\n\n  \nvalue\n: \nthis.properties.textInfoHeaderValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldTextWithCallout\n control uses the same implementation as the default \nPropertyPaneTextField\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldTextWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/#propertyfieldtextwithcallout-control", 
            "text": "This control generates a text field control with a callout.  PropertyFieldTextWithCallout rendering   PropertyFieldTextWithCallout callout opened", 
            "title": "PropertyFieldTextWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldTextWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldTextWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   textInfoHeaderValue :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldTextWithCallout ( textInfoHeaderValue ,   { \n   calloutTrigger :  CalloutTriggers.Hover , \n   key :   textInfoHeaderFieldId , \n   label :   Describe your PnP passion with few words , \n   calloutContent :  React.createElement ( span ,   {},   You can describe your passion with such words as strong, cosmic, all-absorbing, etc. ), \n   calloutWidth :  150 , \n   value :  this.properties.textInfoHeaderValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldTextWithCallout/#implementation", 
            "text": "The  PropertyFieldTextWithCallout  control uses the same implementation as the default  PropertyPaneTextField  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/", 
            "text": "PropertyFieldToggleWithCallout control\n\n\nThis control generates a toggle control with a callout.\n\n\nPropertyFieldToggleWithCallout rendering\n\n\n\n\nPropertyFieldToggleWithCallout callout opened\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-property-controls\n dependency. Check out The \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nCalloutTriggers\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldHeader\n;\n\n\nimport\n \n{\n \nPropertyFieldToggleWithCallout\n \n}\n \nfrom\n \n@pnp/spfx-property-controls/lib/PropertyFieldToggleWithCallout\n;\n\n\n\n\n\n\n\n\nCreate a new property for your web part, for example:\n\n\n\n\nexport\n \ninterface\n \nIPropertyControlsTestWebPartProps\n \n{\n\n  \ntoggleInfoHeaderValue\n: \nstring\n;\n\n\n}\n\n\n\n\n\n\n\n\nAdd the custom property control to the \ngroupFields\n of the web part property pane configuration:\n\n\n\n\nPropertyFieldToggleWithCallout\n(\ntoggleInfoHeaderValue\n,\n \n{\n\n  \ncalloutTrigger\n: \nCalloutTriggers.Click\n,\n\n  \nkey\n:\n \ntoggleInfoHeaderFieldId\n,\n\n  \nlabel\n:\n \nTurn on the PnP feature\n,\n\n  \ncalloutContent\n: \nReact.createElement\n(\np\n,\n \n{},\n \nWith this control you can enable or disable the PnP features in your web part\n),\n\n  \nonText\n:\n \nON\n,\n\n  \noffText\n:\n \nOFF\n,\n\n  \nchecked\n: \nthis.properties.toggleInfoHeaderValue\n\n\n})\n\n\n\n\n\n\nImplementation\n\n\nThe \nPropertyFieldToggleWithCallout\n control uses the same implementation as the default \nPropertyPaneToggle\n and has the following additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncalloutContent\n\n\nReact.ReactNode\n\n\nno\n\n\nCallout content - any HTML\n\n\n\n\n\n\ncalloutWidth\n\n\nnumber\n\n\nno\n\n\nCustom width for callout including borders. If value is 0, no width is applied.\n\n\n\n\n\n\ncalloutTrigger\n\n\nCalloutTriggers\n\n\nno\n\n\nEvent to show the callout\n\n\n\n\n\n\ngapSpace\n\n\nnumber\n\n\nno\n\n\nThe gap between the callout and the target\n\n\n\n\n\n\n\n\nEnum \nCalloutTriggers\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nShows the callout when you hover over the icon\n\n\n\n\n\n\nHover\n\n\nShows the callout when you click on the icon", 
            "title": "PropertyFieldToggleWithCallout"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/#propertyfieldtogglewithcallout-control", 
            "text": "This control generates a toggle control with a callout.  PropertyFieldToggleWithCallout rendering   PropertyFieldToggleWithCallout callout opened", 
            "title": "PropertyFieldToggleWithCallout control"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-property-controls  dependency. Check out The  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   CalloutTriggers   }   from   @pnp/spfx-property-controls/lib/PropertyFieldHeader ;  import   {   PropertyFieldToggleWithCallout   }   from   @pnp/spfx-property-controls/lib/PropertyFieldToggleWithCallout ;    Create a new property for your web part, for example:   export   interface   IPropertyControlsTestWebPartProps   { \n   toggleInfoHeaderValue :  string ;  }    Add the custom property control to the  groupFields  of the web part property pane configuration:   PropertyFieldToggleWithCallout ( toggleInfoHeaderValue ,   { \n   calloutTrigger :  CalloutTriggers.Click , \n   key :   toggleInfoHeaderFieldId , \n   label :   Turn on the PnP feature , \n   calloutContent :  React.createElement ( p ,   {},   With this control you can enable or disable the PnP features in your web part ), \n   onText :   ON , \n   offText :   OFF , \n   checked :  this.properties.toggleInfoHeaderValue  })", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/PropertyFieldToggleWithCallout/#implementation", 
            "text": "The  PropertyFieldToggleWithCallout  control uses the same implementation as the default  PropertyPaneToggle  and has the following additional properties:     Property  Type  Required  Description      calloutContent  React.ReactNode  no  Callout content - any HTML    calloutWidth  number  no  Custom width for callout including borders. If value is 0, no width is applied.    calloutTrigger  CalloutTriggers  no  Event to show the callout    gapSpace  number  no  The gap between the callout and the target     Enum  CalloutTriggers     Name  Description      Click  Shows the callout when you hover over the icon    Hover  Shows the callout when you click on the icon", 
            "title": "Implementation"
        }, 
        {
            "location": "/beta/", 
            "text": "Testing out a beta release \n\n\nAll you need to do for testing out a beta release of \n@pnp/spfx-property-controls\n is to install the dependency as follows:\n\n\nnpm install @pnp/spfx-property-controls@next --save\n\n\n\n\n\nBeta control documentation\n\n\nThe control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the \ndev\n branch: \nbeta documentation\n.\n\n\nNext Steps\n\n\nOnce you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started: \nhome\n.", 
            "title": "Beta testing"
        }, 
        {
            "location": "/beta/#testing-out-a-beta-release", 
            "text": "All you need to do for testing out a beta release of  @pnp/spfx-property-controls  is to install the dependency as follows:  npm install @pnp/spfx-property-controls@next --save", 
            "title": "Testing out a beta release"
        }, 
        {
            "location": "/beta/#beta-control-documentation", 
            "text": "The control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the  dev  branch:  beta documentation .", 
            "title": "Beta control documentation"
        }, 
        {
            "location": "/beta/#next-steps", 
            "text": "Once you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started:  home .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Releases\n\n\n1.6.0\n\n\nNew controls\n\n\n\n\nPropertyFieldCollectionData\n was added \n58\n\n\nPropertyFieldOrder\n was added \n19\n\n\nPropertyFieldSwatchColorPicker\n was added \n55\n\n\n\n\nFixes\n\n\n\n\nFix for \nPropertyFieldColorPicker\n Palette Icon alignment issue in IE11 \n56\n\n\n\n\n1.5.1\n\n\nEnhancements\n\n\n\n\nColor Pickers optionally return Color Objects \n#55\n\n\n\n\nFixes\n\n\n\n\nUndefined web part context fixed in the \nPropertyFieldPeoplePicker\n \n#47\n\n\nTaxonomy service fix for working with term set GUID \n#48\n\n\nAdded focus intercepting input for Full style \n#52\n\n\n\n\n1.5.0\n\n\nEnhancements\n\n\n\n\nPropertyFieldListPicker\n control extended with select all lists option \n#8\n\n\nPropertyFieldTermPicker\n control extended with the ability to search terms by typing in the textbox \n#11\n \n#42\n \n#44\n \n#45\n\n\nSPTermStorePickerService\n has a new interface which contains only the required properties \n\n\n\n\n1.4.2\n\n\nEnhancements\n\n\n\n\nIntroduced the \nonGetErrorMessage\n property for the \nPropertyFieldNumber\n field control (\n#36 - PropertyFieldNumber control suggestion\n)\n\n\n\n\n1.4.1\n\n\nEnhancements\n\n\n\n\nOptimized telemetry so that it only pushes control data\n\n\n\n\nFixes\n\n\n\n\nFixes for issue \n#30 - Check if Label is null and if so don't render it.\n\n\nFix for issue \n#33 - \nPropertyFieldPeoplePicker\n Validation does not work as expected.\n\n\n\n\n1.4.0\n\n\nNew controls\n\n\n\n\nPropertyFieldMultiSelect\n got added\n\n\nPropertyFieldNumber\n got added\n\n\n\n\nEnhancements\n\n\n\n\nPropertyFieldTermPicker\n new introduced property to specify to show or hide the term store name: \nhideTermStoreName\n.\n\n\nPropertyFieldTermPicker\n updated process when terms were unselected based on ID instead of path.\n\n\n\n\n1.3.0\n\n\nNew controls\n\n\n\n\nPropertyFieldCodeEditor\n got added\n\n\n\n\nEnhancements\n\n\n\n\nPropertyFieldTermPicker\n improved with save and cancel button\n\n\nPropertyFieldTermPicker\n improved with \nonClick\n event on input field\n\n\n\n\n1.2.0\n\n\nEnhancements\n\n\n\n\nAdded the option to the people picker to allow you to specify single or multi-selection\n\n\n\n\nFixes\n\n\n\n\nPeople picker accidentally picked the wrong person\n\n\nImproved telemetry with some object checks\n\n\n\n\n1.1.1\n\n\n\n\nRemoved operation name from telemetry\n\n\n\n\n1.1.0\n\n\nImprovements\n\n- Telemetry added\n- Term picker control has now the option to scope on term set or group\n\n\nNew controls\n\n- Added the \nPropertyFieldButtonWithCallout\n control\n- Added the \nPropertyFieldCheckboxWithCallout\n control\n- Added the \nPropertyFieldChoiceGroupWithCallout\n control\n- Added the \nPropertyFieldWithCallout\n control\n- Added the \nPropertyLabelWithCallout\n control\n- Added the \nPropertyLinkWithCallout\n control\n- Added the \nPropertySliderWithCallout\n control\n\n\n1.0.0\n\n\n\n\nAdded the \nPropertyFieldDropdownWithCallout\n control\n\n\nAdded the \nPropertyFieldTextWithCallout\n control\n\n\nAdded the \nPropertyFieldToggleWithCallout\n control\n\n\n\n\nBeta 1.0.0-beta.4\n\n\nNew Controls\n\n- Added the \nPropertyFieldColorPicker\n control\n- Added the \nPropertyFieldSpinButton\n control\n\n\nBeta 1.0.0-beta.3\n\n\nImprovement\n\n- Added \nfirstDayOfWeek\n option to the date picker control\n\n\nBeta 1.0.0-beta.2\n\n\n\n\nInitial release", 
            "title": "Release notes"
        }, 
        {
            "location": "/about/release-notes/#releases", 
            "text": "", 
            "title": "Releases"
        }, 
        {
            "location": "/about/release-notes/#160", 
            "text": "New controls   PropertyFieldCollectionData  was added  58  PropertyFieldOrder  was added  19  PropertyFieldSwatchColorPicker  was added  55   Fixes   Fix for  PropertyFieldColorPicker  Palette Icon alignment issue in IE11  56", 
            "title": "1.6.0"
        }, 
        {
            "location": "/about/release-notes/#151", 
            "text": "Enhancements   Color Pickers optionally return Color Objects  #55   Fixes   Undefined web part context fixed in the  PropertyFieldPeoplePicker   #47  Taxonomy service fix for working with term set GUID  #48  Added focus intercepting input for Full style  #52", 
            "title": "1.5.1"
        }, 
        {
            "location": "/about/release-notes/#150", 
            "text": "Enhancements   PropertyFieldListPicker  control extended with select all lists option  #8  PropertyFieldTermPicker  control extended with the ability to search terms by typing in the textbox  #11   #42   #44   #45  SPTermStorePickerService  has a new interface which contains only the required properties", 
            "title": "1.5.0"
        }, 
        {
            "location": "/about/release-notes/#142", 
            "text": "Enhancements   Introduced the  onGetErrorMessage  property for the  PropertyFieldNumber  field control ( #36 - PropertyFieldNumber control suggestion )", 
            "title": "1.4.2"
        }, 
        {
            "location": "/about/release-notes/#141", 
            "text": "Enhancements   Optimized telemetry so that it only pushes control data   Fixes   Fixes for issue  #30 - Check if Label is null and if so don't render it.  Fix for issue  #33 -  PropertyFieldPeoplePicker  Validation does not work as expected.", 
            "title": "1.4.1"
        }, 
        {
            "location": "/about/release-notes/#140", 
            "text": "New controls   PropertyFieldMultiSelect  got added  PropertyFieldNumber  got added   Enhancements   PropertyFieldTermPicker  new introduced property to specify to show or hide the term store name:  hideTermStoreName .  PropertyFieldTermPicker  updated process when terms were unselected based on ID instead of path.", 
            "title": "1.4.0"
        }, 
        {
            "location": "/about/release-notes/#130", 
            "text": "New controls   PropertyFieldCodeEditor  got added   Enhancements   PropertyFieldTermPicker  improved with save and cancel button  PropertyFieldTermPicker  improved with  onClick  event on input field", 
            "title": "1.3.0"
        }, 
        {
            "location": "/about/release-notes/#120", 
            "text": "Enhancements   Added the option to the people picker to allow you to specify single or multi-selection   Fixes   People picker accidentally picked the wrong person  Improved telemetry with some object checks", 
            "title": "1.2.0"
        }, 
        {
            "location": "/about/release-notes/#111", 
            "text": "Removed operation name from telemetry", 
            "title": "1.1.1"
        }, 
        {
            "location": "/about/release-notes/#110", 
            "text": "Improvements \n- Telemetry added\n- Term picker control has now the option to scope on term set or group  New controls \n- Added the  PropertyFieldButtonWithCallout  control\n- Added the  PropertyFieldCheckboxWithCallout  control\n- Added the  PropertyFieldChoiceGroupWithCallout  control\n- Added the  PropertyFieldWithCallout  control\n- Added the  PropertyLabelWithCallout  control\n- Added the  PropertyLinkWithCallout  control\n- Added the  PropertySliderWithCallout  control", 
            "title": "1.1.0"
        }, 
        {
            "location": "/about/release-notes/#100", 
            "text": "Added the  PropertyFieldDropdownWithCallout  control  Added the  PropertyFieldTextWithCallout  control  Added the  PropertyFieldToggleWithCallout  control", 
            "title": "1.0.0"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta4", 
            "text": "New Controls \n- Added the  PropertyFieldColorPicker  control\n- Added the  PropertyFieldSpinButton  control", 
            "title": "Beta 1.0.0-beta.4"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta3", 
            "text": "Improvement \n- Added  firstDayOfWeek  option to the date picker control", 
            "title": "Beta 1.0.0-beta.3"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta2", 
            "text": "Initial release", 
            "title": "Beta 1.0.0-beta.2"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\n\nMIT License\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}